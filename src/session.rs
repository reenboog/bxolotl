use crate::{chain_key::ChainKey, root_key::RootKey, receive_chain::ReceiveChain, key_exchange::KeyExchange, signed_public_key::SignedPublicKeyX448, signed_key_pair::{SignedKeyPairX448}, master_key::{MasterKey}, message::{Message, Type}, kyber::{self, EncryptedEnvelope, KeyBundle, KeyPairKyber, PublicKeyKyber, PrivateKeyKyber}, chain::{Chain, self}, message_key, x448::{KeyPairX448, PublicKeyX448}, ed448::KeyPairEd448, mac::AxolotlMac};

pub const RATCHETS_BETWEEN_KYBER: u32 = 20;

#[derive(PartialEq, Debug, Eq, Copy, Clone)]
pub enum Role {
	Alice = 0,
	Bob = 1
}

#[derive(Debug, PartialEq)]
pub enum Error {
	WrongKyberIdentity,
	UnknownKyberRatchet,
	KyberBadEncoding,
	KyberBadAesParams,
	KyberBadEphemeralKey,
	KyberWrongCiphertext,
	NoRatchetSupplied,
	SkippedKeyMissing,
	NewCounterForOldChain,
	NewChainRequired,
	NoCurrentChain,
	NoLocalRatchet,
	NoLocalKyber,
	TooManyKeySkipped,
	WrongMessageKey,
	WrongMac
}

// TODO: test
impl From<kyber::Error> for Error {
	fn from(err: kyber::Error) -> Self {
		match err {
			kyber::Error::DecodeError => Self::KyberBadEncoding,
			kyber::Error::WrongCiphertext => Self::KyberWrongCiphertext,
			kyber::Error::BadAesParams => Self::KyberBadAesParams,
			kyber::Error::WrongEphKeyLen => Self::KyberBadAesParams,  // TODO: a dedicated error?
			kyber::Error::WrongKyberKeyLen => Self::KyberBadAesParams,
			kyber::Error::WrongIvLen => Self::KyberBadAesParams,
			kyber::Error::WrongKeyLen => Self::KyberBadAesParams,
			kyber::Error::BadKyberedKeysFormat => Self::KyberBadEphemeralKey,
			kyber::Error::BadKyberEncryptedFormat => Self::KyberBadEphemeralKey,
			kyber::Error::BadKyberEncryptedKeyFormat => Self::KyberBadEphemeralKey,
			kyber::Error::WrongKyberIdentity => Self::WrongKyberIdentity,
			kyber::Error::UnknownKyberRatchet => Self::UnknownKyberRatchet, // TODO: a dedicated error?
		}
	}
}

impl From<message_key::Error> for Error {
	fn from(key: message_key::Error) -> Self {
		match key {
			message_key::Error::BadKeyMaterial => Self::WrongMessageKey,
			message_key::Error::WrongMac => Self::WrongMac
		}
	}
}

impl From<chain::Error> for Error {
	fn from(_: chain::Error) -> Self {
		Self::TooManyKeySkipped
	}
}

#[derive(Debug, PartialEq)]
pub struct Session {
	id: u64,
	role: Role,
	receive_only: bool,

	counter: u32,
	prev_counter: u32, // prev sending chain len?
	ratchet_counter: u32,

	// saved for Bob only, alice uses her kyber_ratched instead; FIXME: move to Role? 
	my_kyber_identity: Option<KeyPairKyber>,

	// TODO: these two can be made non optional, if instead of resetting on decrypt a new ratched is generated
	my_ratchet: Option<KeyPairX448>, 
	my_kyber_ratchet: Option<KeyPairKyber>,

	// can be initially nil for Bob (until decrypt, plus, it can be kyber-encrypted itself)
	their_ratchet: Option<PublicKeyX448>,
	their_ratchet_kyber: PublicKeyKyber,

	unacked_key_exchange: Option<KeyExchange>, // FIXME: move to Role?

	root_key: RootKey,
	// TODO: can be made non optional if root_key is initialized in either alice/bob instead of encrypt as is now
	send_chain_key: Option<ChainKey>, 
	receive_chain: ReceiveChain
}

unsafe impl Send for Session {}

impl Session {
	pub fn id(&self) -> u64 {
		self.id
	}

	pub fn receive_only(&self) -> bool {
		self.receive_only
	}

	pub fn role(&self) -> Role {
		self.role
	}
}

impl Session {
	pub fn alice(my_identity: KeyPairX448, 
		my_ephemeral: KeyPairX448,
		my_signing_identity: KeyPairEd448,
		my_kyber_identity: KeyPairKyber,
		my_kyber_ratchet: KeyPairKyber,
		their_identity: PublicKeyX448,
		their_signed_prekey: SignedPublicKeyX448,
		their_prekey: PublicKeyX448,
		their_kyber_prekey: PublicKeyKyber,
		their_kyber_identity: PublicKeyKyber,
		force_reset: bool) -> Self {
			
			let id = KeyExchange::derive_id(my_identity.public_key(), their_prekey.id());
			let master_key = MasterKey::alice(&my_identity, &my_ephemeral, &their_identity, &their_signed_prekey, &their_prekey);
			let key_exchange = KeyExchange {
				x448_identity: my_identity.public_key().clone(),
				kyber_encrypted_ephemeral: kyber::encrypt_keys(my_ephemeral.public_key(), my_kyber_ratchet.public_key(), kyber::EncryptionMode::Double { first_key: &their_kyber_prekey, second_key: &their_kyber_identity }),
				kyber_identity: my_kyber_identity.public_key().clone(),
				ed448_identity: my_signing_identity.public_key().clone(),
				signed_prekey_id: their_signed_prekey.key().id(),
				x448_prekey_id: their_prekey.id(),
				force_reset
			};

			Self {
				id,
				role: Role::Alice,
				receive_only: false,
				counter: 0,
				prev_counter: 0,
				ratchet_counter: 0,
				my_kyber_identity: Some(my_kyber_identity),
				my_ratchet: None,
				my_kyber_ratchet: Some(my_kyber_ratchet),
				their_ratchet: Some(their_prekey),
				their_ratchet_kyber: their_kyber_prekey,
				unacked_key_exchange: Some(key_exchange),
				root_key: *master_key.root_key(),
				send_chain_key: None, 
				receive_chain: ReceiveChain::new() // REVIEW: make optional?
			}
	}

	pub fn bob(my_identity: KeyPairX448,
		my_kyber_identity: KeyPairKyber,
		my_signed_prekey: SignedKeyPairX448,
		my_prekey: KeyPairX448,
		my_kyber_prekey: KeyPairKyber,
		their_identity: PublicKeyX448,
		their_ephemeral: PublicKeyX448,
		their_ratchet_kyber: PublicKeyKyber) -> Self {
			let id = KeyExchange::derive_id(&their_identity, my_prekey.public_key().id());
			let master_key = MasterKey::bob(&my_identity, &my_signed_prekey, &my_prekey, &their_identity, &their_ephemeral);

			Self {
				id,
				role: Role::Bob, 
				receive_only: false,
				counter: 0, 
				prev_counter: 0, 
				ratchet_counter: 0,
				my_kyber_identity: Some(my_kyber_identity), 
				my_ratchet: Some(my_prekey), 
				my_kyber_ratchet: Some(my_kyber_prekey),
				their_ratchet: None, 
				their_ratchet_kyber, 
				unacked_key_exchange: None,
				root_key: *master_key.root_key(),
				send_chain_key: None, // REVIEW: master_key.chain_key? â€“rather not, for it's not used until encrypt
				receive_chain: ReceiveChain::new() 
			}
	}
}

impl Session {
	pub fn set_receive_only(&mut self) {
		self.receive_only = true
	}

	pub fn force_kyber_for_next(&mut self) {
		self.ratchet_counter = RATCHETS_BETWEEN_KYBER;
	}

	// TODO: return result
	pub fn encrypt(&mut self, plaintext: &[u8], message_type: Type) -> AxolotlMac {
		if self.my_ratchet.is_none() {
			if self.ratchet_counter == RATCHETS_BETWEEN_KYBER {
				self.ratchet_counter = 0;
				self.my_kyber_ratchet = Some(KeyPairKyber::generate()); // TODO: don't generate, but inject instead
			}

			self.ratchet_counter += 1;
			self.my_ratchet = Some(KeyPairX448::generate()); // TODO: don't generate, but inject instead

			// REVIEW: do I need MasterKey at all?
			// TODO: don't hard unwrap
			let (ck, rk) = MasterKey::derive(&self.root_key, self.my_ratchet.as_ref().unwrap(), self.their_ratchet.as_ref().unwrap()).into(); 

			self.send_chain_key = Some(ck);
			self.root_key = rk;

			self.prev_counter = self.counter;
			self.counter = 0;
		}

		let mut msg = Message::new(message_type);

		if let Some(ref my_kyber_ratchet) = self.my_kyber_ratchet {
			// TODO: don't hard unwrap
			msg.set_kyber_encrypted_ratchet_key(kyber::encrypt_keys(self.my_ratchet.as_ref().unwrap().public_key(), my_kyber_ratchet.public_key(), kyber::EncryptionMode::Once { key: &self.their_ratchet_kyber }));
		} else {
			msg.set_ratchet_key(self.my_ratchet.as_ref().unwrap().public_key().clone());
		}

		msg.set_counter(self.counter);
		msg.set_prev_counter(self.prev_counter);
		msg.set_key_exchange(self.unacked_key_exchange.clone());

		// TODO: don't hard unwrap
		let mk = self.send_chain_key.as_ref().unwrap().message_key(); 
		let mac = mk.encrypt(plaintext, &mut msg);

		self.counter += 1;
		// TODO: don't hard unwrap
		self.send_chain_key = Some(self.send_chain_key.as_ref().unwrap().next());

		mac
	}

	fn decrypt_kyber_encrypted_ratchet(&self, eph: &EncryptedEnvelope) -> Result<KeyBundle, Error> {
		use kyber::DecryptionMode::{Once, Double};

		let find_key = |id| -> Result<&PrivateKeyKyber, kyber::Error> {
			// TODO: check key id? it'll fail decrypting anyway, if somethign goes wrong
			Ok(self.receive_chain.kyber_key_pair(id).or(self.my_kyber_ratchet.as_ref()).ok_or(kyber::Error::UnknownKyberRatchet)?.private_key())
		};

		if eph.double_encrypted {
			// second key is the outer key, while the first key is the inner one, ie `encrypt(encrypt(data, first), second)
			let second_key = self.my_kyber_identity.as_ref().ok_or(Error::NoLocalKyber)?.private_key();

			Ok(kyber::decrypt_keys(eph, Double { second_key, first_key: Box::new(find_key) })?)
		} else {
			Ok(kyber::decrypt_keys::<kyber::KeySource>(eph, Once { key: find_key(eph.payload.encryption_key_id)? })?)
		}
	}

	fn decrypt_with_current_or_past_chain(&mut self, mac: &AxolotlMac, purported_ratchet: &PublicKeyX448) -> Result<Option<Vec<u8>>, Error> {
		// TODO: introduce Chain.id()
		if let Some(current) = self.receive_chain.current().map(|c| c.ratchet_key().id()) {
			if let Some(chain) = self.receive_chain.chain_mut(purported_ratchet) {
				let counter = mac.body().counter();

				if counter < chain.next_counter() {
					let skipped = chain.skipped_key(counter).ok_or(Error::TooManyKeySkipped)?; // what if not found? can it be?
					let decrypted = skipped.decrypt(mac)?;

					chain.remove(counter);

					// TODO: introduce Chain.id()
					if current != chain.ratchet_key().id() && !chain.has_skipped_keys() {
						self.receive_chain.remove_by_ratchet_key_id(current);
					}

					return Ok(Some(decrypted));
				} else {
					// TODO: introduce Chain.id()
					if chain.ratchet_key().id() != current {
						return Err(Error::NewCounterForOldChain);
					} else {
						let next = chain.stage(counter)?;
						let mk = next.message_key();
						let decrypted = mk.decrypt(mac)?;

						next.commit();

						return Ok(Some(decrypted));
					}
				}
			}
		}

		// no chain found -> create a new ratchet
		Ok(None)
	}

	// TODO: return Result
	pub fn decrypt(&mut self, mac: &AxolotlMac) -> Result<Vec<u8>, Error> {
		let msg = mac.body();
		let purported_ratchet: PublicKeyX448; // TODO: can I get rid of this?
		let purported_kyber_ratchet: PublicKeyKyber; // TODO: can I get rid of this?

		if let Some(kyber_encrypted_ratchet) = msg.kyber_encrypted_ratchet_key() {
			let KeyBundle { ephemeral, kyber } = self.decrypt_kyber_encrypted_ratchet(kyber_encrypted_ratchet)?;

			purported_ratchet = ephemeral;
			purported_kyber_ratchet = kyber;
		} else {
			purported_ratchet = msg.ratchet_key().ok_or(Error::NoCurrentChain)?.clone();
			purported_kyber_ratchet = self.their_ratchet_kyber.clone();
		}

		// TODO: switch instead
		if let Some(decrypted) = self.decrypt_with_current_or_past_chain(mac, &purported_ratchet)? {
			return Ok(decrypted);
		}

		let my_ratchet = self.my_ratchet.as_ref().ok_or(Error::NoLocalRatchet)?;

		// the sender used this ratchet for the 1st time, so let's dh-rotate
		let (ck, rk) = MasterKey::derive(&self.root_key, my_ratchet, &purported_ratchet).into();
		let current = self.receive_chain.current_mut();
		let mut new_chain = Chain::new(purported_ratchet.clone(), ck, chain::MAX_KEYS_TO_SKIP);

		if let Some(ref my_kyber) = self.my_kyber_ratchet {
			new_chain.set_kyber_ratchet_key(my_kyber.clone());
		} else if let Some(ref current) = current {
			new_chain.set_kyber_ratchet_key(current.kyber_ratchet_key().as_ref().unwrap().clone()); // TODO: don't hard unwrap
		}

		let next = new_chain.stage(msg.counter()).unwrap(); // TODO: don't hard unwrap

		let decrypted = next.message_key().decrypt(mac)?;
		next.commit();

		if let Some(current) = current {
			current.stage(msg.prev_counter()).unwrap().commit(); // TODO: don't hard unwrap
		}

		self.receive_chain.set_current(new_chain);

		self.root_key = rk;
		self.their_ratchet = Some(purported_ratchet);
		self.their_ratchet_kyber = purported_kyber_ratchet;
		self.my_ratchet = None;
		self.my_kyber_ratchet = None;
		self.unacked_key_exchange = None;

		Ok(decrypted)
	}
}

#[cfg(test)]
mod tests {
	use crate::{x448::{KeyPairX448}, ed448::KeyPairEd448, kyber::{KeyPairKyber, PrivateKeyKyber, KeyBundle, self}, signed_key_pair::{SignedKeyPairX448}, signed_public_key::SignedPublicKeyX448, key_exchange::KeyExchange, message::Type, session::RATCHETS_BETWEEN_KYBER, chain, hmac};
	use super::{Session, AxolotlMac, Error};

	fn alice_x448_identity() -> KeyPairX448 {
		let private = b"\x00\xc4\x0a\x23\x46\x32\x7e\x1c\x19\x0d\xac\x29\x0c\xb3\x8e\x41\x79\x73\x52\x43\x00\x4f\xb3\xae\x4f\xc4\x82\xf4\xb0\xa2\x57\x66\x48\xa5\xe8\xab\xc0\x06\x93\x4f\x78\xfe\x7b\xe7\x67\x11\x65\x4d\x9a\x55\x5a\xe9\x28\x93\x0b\x80";
		let public = b"\xd7\x32\x4f\x46\xc1\xa5\x1d\xbf\xef\x1a\xe4\xa8\xe9\x1e\x51\x07\xc4\x17\x9b\x6f\xc4\xa6\xb5\x97\xb1\x21\x7a\x9a\x5f\xb9\x48\xe0\xc0\xa7\xcc\x66\x1f\x1b\x3e\xdf\x60\x5c\x58\x52\xc7\xcd\x09\xc2\xbd\x0a\xf7\x67\x89\x54\xc3\xdf";

		KeyPairX448::new(private.into(), public.into())
	}

	fn alice_ephemeral() -> KeyPairX448 {
		let private = b"\xe0\x9e\x9a\x46\x9f\x2d\xf0\x6b\x71\x8a\x00\x38\xef\x46\xac\xd2\x0c\x00\x0a\x6d\x6f\xaf\x74\x71\x8e\xf6\x6a\x5c\x3a\x3c\xd4\x5d\x15\x0a\x30\x70\x37\xdf\x6c\x69\x4c\xd0\x98\x81\x48\x71\xe9\x35\xf4\xe4\x6b\xc1\x12\x81\xc2\xa0";
		let public = b"\x43\x6a\xa5\xc5\x72\x9a\xc9\x54\x5b\x7e\x11\xd3\x96\x6a\xc4\x7d\x20\x5c\x12\xbb\x5b\x7d\x81\x73\xae\xd5\x32\x50\x51\x4c\x3e\x51\xe8\x1b\xeb\x9b\x3a\xed\x32\x23\x5f\x3e\xb9\x9e\x8e\xca\x81\x6b\x33\x27\x84\xba\x54\x6c\x8d\xd3";

		KeyPairX448::new(private.into(), public.into())
	}

	fn alice_kyber_ratchet() -> KeyPairKyber {
		let private = b"\xf8\xf7\x93\xdb\xd2\x42\x47\x17\x49\x8f\xc9\x56\x75\x76\xcf\x1c\xb5\xba\x9e\x2c\x50\x52\x0b\xb8\x52\xd1\x20\x30\x46\xba\xa0\xe2\xb9\x3e\x41\x73\xe9\x00\x0b\x31\xd6\x59\x59\x42\x2a\xd4\xe0\xb7\x7e\xc9\x8a\x50\x35\x44\x1e\xa5\x03\x55\x78\x50\xb9\x95\x7e\xd8\x18\x18\x8c\x6c\x6e\xb9\x46\x0f\xa5\xb9\x6a\x7d\x32\x9a\x47\x20\x73\x64\x18\x1f\xae\x12\x58\x98\x05\x17\x12\xea\xb4\x59\x68\x11\x6b\x33\x6e\x23\x68\x89\xec\x47\x6a\x63\x20\x8b\xaa\x10\x00\xa3\x69\x80\x00\x2b\xbc\xfb\x0a\xb2\x0a\x22\x27\x87\xf1\x0b\x49\xc1\xc2\xfb\xd6\x4f\xcd\xd2\x7c\x42\x38\x94\xf3\x51\x27\x6a\x2a\x49\x94\x66\xa2\x1d\xab\x80\x3d\x13\x4d\xd5\x23\x21\x7d\x50\xae\x90\xf1\xbb\x73\x7b\x63\x3b\x1c\x37\x18\x88\x38\xc4\x87\x79\x84\xa1\x46\xc5\x79\x8e\x89\xe0\x4a\xca\x22\x42\x72\xc8\x63\xca\x32\xc8\x19\x44\xb2\xeb\x94\x93\x5a\x62\x9e\x27\xd1\xa5\xa5\xb6\x01\xa6\x13\x92\x82\xa1\x27\xb0\xb1\x38\xdc\x30\x9d\x33\xd3\x2d\xce\xf2\x42\x2e\xac\x73\xb7\x5a\x51\x53\xf5\x68\x6c\xb6\x0f\xfc\xa2\x69\xc7\x91\x87\x01\x29\x97\xd0\x5b\x2c\xea\x6c\xc8\x07\xec\x01\x55\x20\x8c\x8a\x93\x86\x41\x61\x44\xed\xea\xb6\xf8\x5a\x74\xd1\x29\x5f\x1a\x9c\x92\xe7\xbc\xc5\x73\x6c\x6e\xd6\x1c\x4d\x2a\xfb\x6c\x81\x7b\x5f\x51\xba\x33\x9c\x07\x86\x62\x68\x86\xf8\x49\x20\x24\x27\x80\x4f\x15\xb3\x34\x93\x7f\xd1\x03\x01\x37\xca\xa8\x8b\xc6\x4e\x0b\xea\x83\xe7\x3c\x88\xcf\xd5\x7d\xb6\xfa\xa4\x0c\x65\x98\xda\x26\x7e\xe0\xa2\x76\xb3\x4b\x3f\x1a\x8c\xbb\x78\x38\x51\xcd\xd4\x0b\xde\x08\x3c\xd5\xb2\x6f\xbd\x3b\x53\x90\x5b\x6b\xbc\xc0\xbd\xb3\xba\x2b\xbe\x43\x46\xe7\xb0\x32\x48\xb4\xc8\x43\xab\x49\x8c\x19\xac\x67\x63\x5d\x07\xfb\xcb\x6f\x70\x68\x77\x21\x99\x91\x65\xc2\x79\xd1\x04\xbd\x00\xac\xef\xca\xca\xcf\xe5\xab\x06\x01\x63\x6b\x47\x1e\x30\x08\xa4\xd1\x52\x0b\x04\xab\x7a\x01\xa8\x51\x7c\x20\x67\x1c\x12\xc2\x00\x15\x1d\x89\xa5\x75\x3d\xb9\xb5\xee\x54\xa8\x86\x2b\x42\x70\xb4\x7f\x96\x57\x61\x64\x66\x57\x36\x30\x35\x72\xf2\x58\x55\x9c\x72\xef\xc8\x81\xf7\xc4\x60\x32\x95\x64\xa1\x54\x33\x82\xa1\xb0\xad\x37\x42\x6e\x80\x6f\xd3\x59\x1d\x2c\x82\x35\x4a\x36\x80\xfe\x29\x32\x80\xb7\xb0\xaa\xb8\x64\xa7\xdc\x78\x9f\xe1\x1e\xf6\x83\xb7\xa8\x31\xbb\x63\xf9\x3d\xb7\xa5\x4a\x9d\x48\x20\x9a\xfc\x55\xa1\x7a\xca\x4f\xc5\xbf\xbf\x66\x43\x9f\x2a\xc1\xd3\xe4\x4f\xa0\x43\xbe\xcb\xb5\x34\xd5\x05\x1b\xf6\xbb\xa1\xb6\x01\x28\x65\xec\x78\x02\x6c\xa7\x06\xe4\x29\xd1\xf5\x1c\x91\xd8\x45\xfc\xb3\x12\xf4\x1b\x0e\x20\x9a\x70\xc9\x4c\x4d\x23\x85\x31\xd5\x6c\x4e\xf5\x56\x0c\x8e\xb6\xbc\x1b\xc6\x20\x3b\x56\x69\x45\xc1\x0f\x87\x8c\x39\xe4\xf5\x5a\xf7\x84\x4a\x26\x99\x78\x24\xb4\x54\x5f\xbb\x18\x40\xd0\x19\xb6\x33\x01\x05\xf1\x32\xdc\x83\x92\x64\x8c\x26\x65\x15\x7b\xf3\x81\x79\xa0\x64\x56\xc1\x67\x56\x39\xf4\x02\x6b\x1a\x4c\x6e\x23\x78\xdd\x8b\x7b\xeb\x63\x64\x5d\x0a\x26\x17\x73\x33\x0a\x12\x85\xb0\xc3\xa4\x9b\x80\x72\x28\x97\xab\xc5\x76\xa9\x75\xbb\x5a\x1c\x44\x3d\x1a\xf0\x07\xe9\x55\x55\xd1\x18\x3f\xfd\x00\x58\x42\xa9\x50\x8f\x45\x22\x79\xe7\x46\x7a\xfc\xb4\x7d\x85\x4f\xc5\x71\x0f\xb6\x3b\x88\x70\xab\x05\x0e\xb3\x4e\x74\xe1\x69\x64\xc2\x2f\x5a\x49\x2d\xe4\x18\x8f\xde\x01\xbd\xd5\xa8\xb2\x92\x19\x70\xc0\x31\x61\xc7\x2a\x23\x55\x46\x2d\x8b\xc6\xa6\xc0\x03\x13\xd8\xe3\x70\x35\x9c\x9d\x89\x18\x5a\xd2\xe3\x01\x6b\xd2\x7c\xbd\x77\x9a\x54\xca\xb6\x59\xf5\x59\x96\x23\x3a\x17\xea\x0d\x50\x6b\x89\xe1\xc0\x81\xfd\xd2\x45\x2b\xec\x17\xb0\x05\x4e\x9b\x48\x47\xb1\x34\xcf\x4e\x1c\xb0\x7f\xe2\x8d\x6a\x0c\x29\xc2\xa8\xa2\x94\x48\x12\xbd\x44\x6b\x35\x68\x68\xb8\x94\x14\x05\xf4\x4f\x07\x66\x49\xe6\xb6\x35\x02\xd7\x7b\xd4\x44\x55\xa2\xe6\x34\x84\xa4\x28\x31\x45\xc2\xa0\x16\xb0\xfe\xf9\x43\xa3\x08\x76\xc3\x20\xc3\x54\x84\x40\x06\xa9\x2f\x76\x98\x98\x84\x65\x9c\x02\xf3\xcb\xc0\x3c\x81\xa4\x80\xa6\xbe\xac\x18\x69\x6b\x8f\x5a\x8c\xc5\xe3\x5c\x2a\x81\xac\x0d\x3b\x88\x35\xf1\xa6\x0a\xad\xfc\x3c\xc4\x98\x7b\xd0\x76\x22\x8c\x8b\x4c\x24\xc6\x72\x8a\x61\x64\x48\x2c\x40\x54\xf6\x00\x1c\xda\x70\x45\xd4\x7a\xbd\x28\x62\x9f\x94\x8d\x97\xf9\x65\x34\x35\x63\x46\x04\x88\x3e\x48\x9e\x72\x01\x83\x16\x5b\x58\x6d\xc3\x0d\x4a\xea\x88\x4b\xa5\x40\xd6\x33\xa9\x77\x9c\x3b\xee\xe4\x19\x5f\xec\x76\x4c\xc8\x33\x64\x86\x8e\x3d\x07\x87\x07\x0b\x63\xf7\x31\xb7\xe8\x05\x71\x32\x88\x12\xcd\xf9\x24\x8c\x25\xaa\x45\xe3\xb1\x33\x8b\x4f\x99\xfa\x45\xa4\xd7\x84\x97\xe5\x7d\x3e\xb2\xbb\x7b\xc5\x02\x0e\xc1\xc9\x06\xe7\x51\x64\x04\x01\x19\x00\x8f\xc6\x42\x28\x60\xe0\xa9\xd8\x5a\x2b\x5b\xc7\x4c\x11\x2b\x93\x5f\xf4\xce\xc0\x7b\x05\xf4\xb5\x50\x17\x83\x46\x57\x1b\x66\xc4\xd5\x9e\x6c\xc8\x66\x19\xe2\xcf\x85\xb4\x7a\xe3\xd4\x8d\x82\x74\x9c\xdd\x43\x3d\x29\x80\xb6\x9c\x25\x61\xbf\x0b\x87\x7f\x17\x54\xae\xe3\x2f\x25\xc7\x9f\xa6\x12\x2c\x62\x8c\x5b\xd3\xf5\x1d\xf1\xc3\x97\xdf\xb4\x92\x3b\x07\x53\x22\x37\x73\xc2\xe0\x95\x11\xd5\x52\x0f\x2a\xb7\x92\xb3\x49\x02\x38\x3d\x76\xba\x0b\xb2\x52\x4a\x97\x98\x30\x93\x54\x76\x3b\xf2\x3f\xe6\x4c\x51\xc1\x63\x9a\xaa\x91\x1d\xab\x98\x6c\x09\x96\x06\x4e\xec\x59\xc0\x11\xce\xab\xc3\x50\xd9\xc2\x56\x87\x73\x4a\xf1\x35\xb4\x88\xb0\x05\xe4\x66\xb5\xdd\x77\xb7\xb5\x16\xcb\x86\xec\x55\xd6\x96\xb4\x89\x42\x8d\x97\x43\xb5\xe5\xb4\x58\x5c\xd8\xa6\x32\x3c\xce\xe8\x53\x96\x2f\xc0\xbe\x41\x94\x5a\x9e\x29\x0e\x40\xc4\x28\x39\xe6\xce\xb8\x26\x02\x06\x28\xa5\x68\x14\x09\xe1\x54\xa7\x77\xc0\xb8\x49\x2a\x03\x8c\x46\x54\x79\x89\x1e\x3c\xfa\xb2\xf2\x9c\x26\xaa\xb0\x0d\xb7\xab\xad\x1b\x00\x4e\xee\xaa\x1a\xbf\x79\x1b\xaa\x8b\xb0\x5c\xf8\x99\xbb\xe1\x6f\x81\x3b\x1f\x29\x76\x75\x10\xd8\x67\x05\xd4\x43\x2f\x86\xb9\x21\x32\x9c\x3c\x5b\x2b\x63\xd1\x65\x80\x22\xa4\x56\xe5\x6f\x90\xd0\xab\x40\x77\x87\x19\x3a\xad\x70\x12\xb0\x21\x41\xcf\xe5\xe8\x2c\xed\xf6\xb8\x0f\x89\xb4\xd3\x00\x9e\xff\xd3\xc3\x91\xb9\x37\x4f\xb1\x1b\xe0\xa3\x64\x2f\x2b\xc5\x6a\x44\x54\xed\xaa\xc9\x95\x51\x41\xa7\xac\xb0\xed\xb4\x72\xed\xe0\x40\x33\x68\x34\x14\xe9\x75\x0b\x95\x1e\xaa\xf7\x1a\xc2\x12\x5f\x06\xb5\x52\xf7\x86\x75\x02\x62\xcb\xbc\xe9\x4c\xde\x12\xc7\x61\x84\xba\x6a\xa3\x91\x7e\xc5\x20\x0e\xb7\x28\xe4\xd1\x74\xa2\x80\x76\x75\x11\x2c\x04\xc3\x51\x85\xbb\x8e\xce\xc3\x72\xb8\xeb\xb7\xed\x07\x6b\x1b\x24\xb9\x9d\x39\xaf\xe1\xc4\xb4\x85\x17\x3f\x1c\x04\x93\x47\x88\x4b\x99\x8a\x7b\x5e\x72\x2c\x62\xa0\x03\xdf\x74\x4f\xd1\x95\x34\xfc\x5c\x47\xec\x06\x3e\x18\x54\x02\x21\x29\x1b\xe0\x5c\x53\x44\x5a\xbd\x0a\xbc\x4a\x87\x6c\xb9\xd9\xf7\x68\xcd\x03\xc7\x17\x87\x21\x83\xc2\x67\xeb\xa1\x8c\xd5\xfc\xb4\xf0\x5a\x47\xd7\xe3\x2a\xc8\x07\x90\x7b\x57\x1f\xd8\xb7\x35\x6c\xc3\x71\xe4\x1b\xca\xe0\x33\x14\xaf\x74\x4b\x60\x33\xc9\xab\x41\x75\xe8\x24\x58\xb2\xda\x3b\xce\x5b\xcc\xdf\x06\xb8\x40\x44\x71\x69\x5a\x63\xe3\xd3\x05\x29\x80\xc7\x6d\x41\x2f\xa8\xc6\xbd\x8b\x7c\xaf\x2d\x9c\x56\x7e\xc5\x79\xc0\x3b\xbe\x4e\x93\x11\xf1\x09\xbf\xbe\xe7\x1b\x2b\x76\x2f\xc1\xb6\xc0\xcb\x65\x9f\xe2\x2c\xcd\x6f\x64\x3b\xcc\x47\x07\xb9\xd1\x69\x66\xcb\x0e\x3d\x36\x5a\x81\x10\x50\xa7\xd3\x15\x46\x12\x3f\xc2\x64\x41\x11\xbc\x6e\xff\xd7\x48\x05\xa6\x07\x27\xa2\x08\x71\x99\xbb\xb1\x80\x11\xf6\xf4\x27\xb7\x41\x64\xb2\x90\x90\x94\x88\x0d\x88\x47\x1f\x06\x23\x16\x34\x38\xc0\xcb\x28\x1f\xb2\xc1\x09\x9c\xf4\xae\xee\x04\x18\x5c\x02\x18\xa8\xe3\x0b\x9b\x9a\x4f\x2c\xf4\x3d\x0f\xf4\x95\xe4\x7a\x76\xcf\x93\x6a\xb9\x87\x99\x3b\x56\x3f\x6a\x36\xa0\x79\xec\x13\xb1\x42\xc3\x52\xc0\x9c\x40\x06\xcc\x58\x68\x0e\x98\x72\x03\xc7\xbb\x07\x3b\x80\xb0\x13\x78\x64\x58\x50\x0c\x44\x01\x8c\x8e\x28\xcd\xd1\xb0\x10\x9e\x65\x4b\x5a\x10\xce\x86\xe1\x3f\x02\x70\x79\xff\x04\xb3\xce\x6a\x63\xbd\x75\x75\x03\xa9\x6e\x2f\xf4\xa3\xb5\xe8\x96\x04\xb8\x9c\xf3\x52\xcb\xa6\xc8\x85\xf1\x25\x42\xd8\x00\xc5\xdb\x08\xa8\xbf\x2a\xbe\x28\x22\xb1\x4a\x19\x9e\xcb\xe7\x61\x52\xb5\x6c\xef\x34\x88\xe1\x8a\x0e\x1a\x71\x5d\x16\x99\x38\x01\x08\x57\x99\x2b\x9a\xc2\xf2\x42\x35\x40\x24\x77\x95\xca\x75\x8b\x00\x65\x9b\xad\xfc\x99\x94\xcd\x16\x36\x2c\x88\x5a\x28\xc6\x08\xe4\x81\x2f\x0b\x72\x0d\x35\x51\xb6\xd0\xd3\x56\x18\x48\x3d\xa7\x73\x2a\xb8\x99\x31\x2f\x7c\xce\x07\x2b\x0f\x3a\x01\x27\x94\x85\x34\xf2\x43\x59\x52\xac\x37\xec\x34\x1e\x87\x67\xb4\x0e\x26\x4c\xcc\x82\x47\xe1\x73\x8a\xc0\x84\x76\xe5\xd7\x76\x99\x45\x14\x00\x7c\xa9\xfb\xd8\xb6\x9f\x17\x00\x61\xf0\xc3\xa0\xca\x96\x5a\x48\xad\xda\xc4\xaf\x4c\xea\x11\xcf\xb6\x4a\x29\x2b\x37\xdb\x7c\xaa\x41\xa3\x6d\x6e\x85\x5a\x83\xa1\x41\xf5\x4c\x27\x81\x96\xc9\x4a\xd1\x4c\x65\x05\xc1\x8f\x9c\xb1\x1d\x77\x9b\x31\xda\x47\xa0\x5b\x7e\xdf\x71\xb8\x49\x67\x32\xe6\xe1\x9f\xdc\x4a\xb0\x3d\x59\x4a\xaf\x12\x20\xd5\xe3\xa6\x64\xa3\xa0\xf6\x42\x18\x50\xdc\x3f\x4a\xea\xaf\xd9\x8c\x7f\x5d\xb4\x6d\x59\x00\xce\xc8\xa2\x9d\x2d\x82\x18\x4c\xfb\x2c\xa9\x16\x4f\x9e\x6b\x97\xa7\x29\x64\xfb\xc4\xa6\xf0\xb6\x20\xf7\xaa\x11\xb0\x12\x39\x11\x46\xb2\x30\xc7\x43\x83\xa6\x90\xbc\xc6\x63\xb1\xba\x33\x53\x39\x25\xa3\xe7\x2b\x97\x16\x86\xe3\xea\x46\xcb\x44\xa3\x5e\x17\x6e\x00\x86\x72\x7c\x92\x80\x08\xc8\x98\x84\xd1\x14\x41\x03\x0a\x3a\x52\x0f\x02\xbb\x50\x38\x24\x96\xd5\xf3\x2e\xa1\x5c\x3c\x00\x42\x21\x1a\xb7\xb6\xc9\x25\xc0\x1f\x41\x27\x85\xfb\x15\x8f\xf9\x27\x62\x30\x93\x95\x09\x35\x41\x25\xa2\x3d\x39\x60\xf8\x42\x4e\xf9\x5b\x43\x7c\x01\x4e\x8e\xc8\x4d\x8f\xa7\xc4\x6f\xa7\x53\xa2\xd8\x4c\x8b\x13\xcf\xd3\x17\xb4\x47\x00\x5b\x38\x6b\xb6\x2f\xcb\x32\x81\xe5\xb5\x08\x19\x4f\xdf\x53\xaf\x66\xc2\x7f\x3d\xdc\x12\xc2\xcb\xac\x5e\x32\x5a\xfc\x60\x9e\xf0\x13\x67\xf6\x53\xc4\x23\xec\x6e\x9b\x87\x46\x68\x75\x2f\xed\x10\x36\x4f\xaa\xc3\x90\x17\x52\x81\x38\x8c\x35\x94\x73\xad\x35\x0b\x08\xc7\x94\xeb\x92\x8b\x1f\x95\x33\xd3\x73\xc9\x10\x06\x47\xc6\x43\xc7\xd6\xb2\x70\x94\x35\x43\x94\x5b\x54\xbe\x16\x01\x34\xfb\x6d\x54\x43\x04\x10\xc0\x6b\x98\x91\x15\x85\x45\x6d\x77\xe8\x45\x6e\x9b\x3d\xe4\x47\x5c\xaa\x6b\x88\xf2\x25\xcf\x74\xe9\x36\x77\xe1\x15\xf1\xe0\xb8\x4a\x2c\x1c\x7d\x79\x6f\x98\xc8\x21\xe1\xea\x60\x0f\x34\x7f\xb1\xa6\x8e\x98\x80\x0e\x4e\x19\x5b\xb0\xe6\x54\xab\x38\x3f\xe3\xaa\x88\x85\x57\x1e\xd4\x3c\x9e\x36\x53\xb5\xff\x79\x21\xa6\x3b\xc0\x71\x51\x0e\x75\xf9\x15\x5e\x74\x75\x83\xc8\x82\x9e\x9a\x83\x16\xa4\x5d\x39\x57\x04\xef\x37\xc4\xbe\xf8\x1f\x90\xb3\x08\x3a\x05\x4d\x2c\x27\x3b\x06\x22\x3c\xca\x62\x7b\x7a\x82\xcc\x92\x2b\x0b\x4f\x34\x66\xc4\x3a\xce\x6e\x63\x35\x73\x43\x4e\xdb\xd7\x99\x1a\xe2\x6e\x29\x12\x38\xae\xe6\x18\x42\x6a\x6e\xbf\x3c\x9c\x5f\xe8\x38\x74\xc0\xab\x6e\x77\x4a\xcb\x24\x05\x1a\x54\x29\x96\x58\x57\xd2\x05\x83\x73\xdb\x7f\x0b\xf4\x78\x15\x12\x42\x43\x96\x92\x05\xe3\x82\x4f\x10\x78\x2a\x44\x7b\x34\x02\x57\xb3\xc0\xcd\xb1\x17\x82\x05\x20\x00\x01\x1a\x0d\x80\x32\x7d\x03\x54\x2e\xb1\xc0\x0e\x5f\x98\x90\x10\x5a\xa8\x2a\xd8\xbe\x97\xab\x81\x25\xf3\x68\x85\x3b\x0a\x0f\xb5\x74\xb2\xd4\x49\x75\xb6\x40\x96\xb4\x61\x81\x81\x06\x31\xcb\x3c\xe2\x76\x20\xa7\x0b\xa6\xea\xc3\x33\x5c\xf7\x9f\xab\x66\xc4\x69\x56\x79\x7b\x63\xa7\xf1\x3b\x97\x94\xac\x5d\xa3\xf0\x4a\x58\x55\x7e\xcd\x98\x35\x54\x62\xca\x7f\x52\xcd\x7e\x25\xa0\x82\x22\x57\x09\x65\x1a\xce\xa9\x77\x80\x81\x5b\xae\x59\x8c\xd2\xa9\xaa\x11\xd7\x3b\xd7\xf7\x88\xa1\xbc\xcc\x88\x3c\x51\x9c\xf7\x22\x23\xb3\x54\x51\xf9\x45\x85\x48\x5f\xec\x98\x35\x6c\x3b\x02\x43\xc9\x7a\xa6\xe0\x20\x3c\x5a\x7b\xd0\x04\x7a\xc7\x90\x15\x57\xc3\x3e\x81\xdc\x97\xf4\x46\x06\x51\x62\xc5\x1a\xd9\x26\xee\x17\x9a\xd1\x07\x3f\x99\x53\x6d\x49\x9a\xb5\xc3\xe7\x79\xe3\xf7\xb7\x4d\x44\x10\xa5\xc0\x8e\x6e\x74\x78\x21\xc0\x1f\x0d\x97\x88\x68\x11\xb7\x02\x50\x85\x5d\x01\xc2\x35\xa6\x14\x5a\x8b\xad\xc1\x32\x84\x31\xc6\x17\x07\x98\xa7\x9f\xb4\x01\x89\xa5\x30\xf0\xc1\x78\x02\xc6\x5d\x55\xf1\xc0\x21\xa9\x23\xa8\x1b\x37\xe9\xb4\x7b\x0d\xd3\x2a\x69\x39\xb0\xb6\x73\x6c\x15\x75\x72\xd1\xf0\x09\x2a\xc3\xb8\xb1\x60\x32\x33\x17\x7d\x36\x70\x01\xd4\xa1\x55\x0c\xe8\x77\x33\xc8\x86\x49\x07\xb8\xe2\x88\x9f\x6a\xe3\xc6\x1a\x5a\x0b\x5e\x9b\x40\xbf\xf3\x60\xb5\x98\xad\x48\xd3\x71\x70\x1b\x14\x5d\x8c\x2d\x42\x00\xc6\x2a\x50\x65\x4b\x9c\x35\xc0\x91\x5d\xd7\x08\x31\x9b\x19\x7c\xba\x0c\xbd\xa4\x71\x57\x6a\xd4\x5a\xf9\xf7\xc0\x0f\x37\xaa\x71\x44\x50\xaa\x65\x36\xa3\x48\x19\xf4\x05\x3a\x95\x12\xb7\x9a\xc5\x01\x19\x99\x96\x7a\x71\x0e\x33\x3b\x19\x42\xf5\x09\x42\xc8\xa5\xd3\x89\x5d\xae\x06\x7b\x6e\x32\x8a\x67\x14\x54\xba\x59\xa5\x0a\xc9\x55\x75\xb9\x9d\x63\xf8\x4f\xd6\x61\x7e\x3c\x06\x26\xff\x61\x64\x1a\x23\x0c\x46\xe2\xb5\xea\xfa\xba\x61\x3b\xb7\x6a\x88\x1d\x8e\x11\x2c\x9c\x44\x8e\x86\x73\x28\xee\x88\x65\xf9\x4b\x67\xe5\xc4\x01\xb6\xa5\xcb\x0c\xf9\x54\xf8\x74\x5d\xbc\x84\x3d\x52\x19\x42\xdc\x56\x3f\x8f\x46\x2a\x58\x39\xb4\xf2\x78\xbd\x81\x98\x6e\xd2\x54\xa5\xe0\x39\x1b\xed\x80\xc7\xe2\x97\x2c\xfa\x14\xc3\xb1\x04\xb0\x11\xf0\x72\xd5\xd8\x36\xc7\x54\x8f\x07\xe2\xcc\x3b\x17\x29\x73\xa9\x38\x82\xfb\x31\x6c\x52\x66\xbe\x15\x00\x67\xe5\x0e\x0e\x7a\x34\xb9\x67\x95\x03\x4d\x1b\xd2\x76\x6e\xd6\x2e\xcd\x16\xdd\x65\xc1\x86\x7a\x5d\x25\xd4\xe7\x36\xc5\x58\x6c\xe3\x5c\x7a\x7f\xdc\x97\xba\xfa\x18\x68\xf6\xb8\x75\xfe\x73\x26\x71\x5f\x3d\x67\x6e\xe9\x68\xa1\x25\xfa\x70\x5c\x35\xbf\xb4\x9e\xee\x9c\x11\x1b\xc1\xbf\x63\xd2\x64\x71\xf0\x9d\x2f\xf1\x25\x37\x82\xd4\x0e\xe6\x25\xd2\x44\x84\xb3\x1c\x71\x82\x2a\xe1\xe6\x1c\x9e\xdf\x98\xc0\x9f\x04\xe7\x5c\x44";
		let public = b"\xcd\x03\xc7\x17\x87\x21\x83\xc2\x67\xeb\xa1\x8c\xd5\xfc\xb4\xf0\x5a\x47\xd7\xe3\x2a\xc8\x07\x90\x7b\x57\x1f\xd8\xb7\x35\x6c\xc3\x71\xe4\x1b\xca\xe0\x33\x14\xaf\x74\x4b\x60\x33\xc9\xab\x41\x75\xe8\x24\x58\xb2\xda\x3b\xce\x5b\xcc\xdf\x06\xb8\x40\x44\x71\x69\x5a\x63\xe3\xd3\x05\x29\x80\xc7\x6d\x41\x2f\xa8\xc6\xbd\x8b\x7c\xaf\x2d\x9c\x56\x7e\xc5\x79\xc0\x3b\xbe\x4e\x93\x11\xf1\x09\xbf\xbe\xe7\x1b\x2b\x76\x2f\xc1\xb6\xc0\xcb\x65\x9f\xe2\x2c\xcd\x6f\x64\x3b\xcc\x47\x07\xb9\xd1\x69\x66\xcb\x0e\x3d\x36\x5a\x81\x10\x50\xa7\xd3\x15\x46\x12\x3f\xc2\x64\x41\x11\xbc\x6e\xff\xd7\x48\x05\xa6\x07\x27\xa2\x08\x71\x99\xbb\xb1\x80\x11\xf6\xf4\x27\xb7\x41\x64\xb2\x90\x90\x94\x88\x0d\x88\x47\x1f\x06\x23\x16\x34\x38\xc0\xcb\x28\x1f\xb2\xc1\x09\x9c\xf4\xae\xee\x04\x18\x5c\x02\x18\xa8\xe3\x0b\x9b\x9a\x4f\x2c\xf4\x3d\x0f\xf4\x95\xe4\x7a\x76\xcf\x93\x6a\xb9\x87\x99\x3b\x56\x3f\x6a\x36\xa0\x79\xec\x13\xb1\x42\xc3\x52\xc0\x9c\x40\x06\xcc\x58\x68\x0e\x98\x72\x03\xc7\xbb\x07\x3b\x80\xb0\x13\x78\x64\x58\x50\x0c\x44\x01\x8c\x8e\x28\xcd\xd1\xb0\x10\x9e\x65\x4b\x5a\x10\xce\x86\xe1\x3f\x02\x70\x79\xff\x04\xb3\xce\x6a\x63\xbd\x75\x75\x03\xa9\x6e\x2f\xf4\xa3\xb5\xe8\x96\x04\xb8\x9c\xf3\x52\xcb\xa6\xc8\x85\xf1\x25\x42\xd8\x00\xc5\xdb\x08\xa8\xbf\x2a\xbe\x28\x22\xb1\x4a\x19\x9e\xcb\xe7\x61\x52\xb5\x6c\xef\x34\x88\xe1\x8a\x0e\x1a\x71\x5d\x16\x99\x38\x01\x08\x57\x99\x2b\x9a\xc2\xf2\x42\x35\x40\x24\x77\x95\xca\x75\x8b\x00\x65\x9b\xad\xfc\x99\x94\xcd\x16\x36\x2c\x88\x5a\x28\xc6\x08\xe4\x81\x2f\x0b\x72\x0d\x35\x51\xb6\xd0\xd3\x56\x18\x48\x3d\xa7\x73\x2a\xb8\x99\x31\x2f\x7c\xce\x07\x2b\x0f\x3a\x01\x27\x94\x85\x34\xf2\x43\x59\x52\xac\x37\xec\x34\x1e\x87\x67\xb4\x0e\x26\x4c\xcc\x82\x47\xe1\x73\x8a\xc0\x84\x76\xe5\xd7\x76\x99\x45\x14\x00\x7c\xa9\xfb\xd8\xb6\x9f\x17\x00\x61\xf0\xc3\xa0\xca\x96\x5a\x48\xad\xda\xc4\xaf\x4c\xea\x11\xcf\xb6\x4a\x29\x2b\x37\xdb\x7c\xaa\x41\xa3\x6d\x6e\x85\x5a\x83\xa1\x41\xf5\x4c\x27\x81\x96\xc9\x4a\xd1\x4c\x65\x05\xc1\x8f\x9c\xb1\x1d\x77\x9b\x31\xda\x47\xa0\x5b\x7e\xdf\x71\xb8\x49\x67\x32\xe6\xe1\x9f\xdc\x4a\xb0\x3d\x59\x4a\xaf\x12\x20\xd5\xe3\xa6\x64\xa3\xa0\xf6\x42\x18\x50\xdc\x3f\x4a\xea\xaf\xd9\x8c\x7f\x5d\xb4\x6d\x59\x00\xce\xc8\xa2\x9d\x2d\x82\x18\x4c\xfb\x2c\xa9\x16\x4f\x9e\x6b\x97\xa7\x29\x64\xfb\xc4\xa6\xf0\xb6\x20\xf7\xaa\x11\xb0\x12\x39\x11\x46\xb2\x30\xc7\x43\x83\xa6\x90\xbc\xc6\x63\xb1\xba\x33\x53\x39\x25\xa3\xe7\x2b\x97\x16\x86\xe3\xea\x46\xcb\x44\xa3\x5e\x17\x6e\x00\x86\x72\x7c\x92\x80\x08\xc8\x98\x84\xd1\x14\x41\x03\x0a\x3a\x52\x0f\x02\xbb\x50\x38\x24\x96\xd5\xf3\x2e\xa1\x5c\x3c\x00\x42\x21\x1a\xb7\xb6\xc9\x25\xc0\x1f\x41\x27\x85\xfb\x15\x8f\xf9\x27\x62\x30\x93\x95\x09\x35\x41\x25\xa2\x3d\x39\x60\xf8\x42\x4e\xf9\x5b\x43\x7c\x01\x4e\x8e\xc8\x4d\x8f\xa7\xc4\x6f\xa7\x53\xa2\xd8\x4c\x8b\x13\xcf\xd3\x17\xb4\x47\x00\x5b\x38\x6b\xb6\x2f\xcb\x32\x81\xe5\xb5\x08\x19\x4f\xdf\x53\xaf\x66\xc2\x7f\x3d\xdc\x12\xc2\xcb\xac\x5e\x32\x5a\xfc\x60\x9e\xf0\x13\x67\xf6\x53\xc4\x23\xec\x6e\x9b\x87\x46\x68\x75\x2f\xed\x10\x36\x4f\xaa\xc3\x90\x17\x52\x81\x38\x8c\x35\x94\x73\xad\x35\x0b\x08\xc7\x94\xeb\x92\x8b\x1f\x95\x33\xd3\x73\xc9\x10\x06\x47\xc6\x43\xc7\xd6\xb2\x70\x94\x35\x43\x94\x5b\x54\xbe\x16\x01\x34\xfb\x6d\x54\x43\x04\x10\xc0\x6b\x98\x91\x15\x85\x45\x6d\x77\xe8\x45\x6e\x9b\x3d\xe4\x47\x5c\xaa\x6b\x88\xf2\x25\xcf\x74\xe9\x36\x77\xe1\x15\xf1\xe0\xb8\x4a\x2c\x1c\x7d\x79\x6f\x98\xc8\x21\xe1\xea\x60\x0f\x34\x7f\xb1\xa6\x8e\x98\x80\x0e\x4e\x19\x5b\xb0\xe6\x54\xab\x38\x3f\xe3\xaa\x88\x85\x57\x1e\xd4\x3c\x9e\x36\x53\xb5\xff\x79\x21\xa6\x3b\xc0\x71\x51\x0e\x75\xf9\x15\x5e\x74\x75\x83\xc8\x82\x9e\x9a\x83\x16\xa4\x5d\x39\x57\x04\xef\x37\xc4\xbe\xf8\x1f\x90\xb3\x08\x3a\x05\x4d\x2c\x27\x3b\x06\x22\x3c\xca\x62\x7b\x7a\x82\xcc\x92\x2b\x0b\x4f\x34\x66\xc4\x3a\xce\x6e\x63\x35\x73\x43\x4e\xdb\xd7\x99\x1a\xe2\x6e\x29\x12\x38\xae\xe6\x18\x42\x6a\x6e\xbf\x3c\x9c\x5f\xe8\x38\x74\xc0\xab\x6e\x77\x4a\xcb\x24\x05\x1a\x54\x29\x96\x58\x57\xd2\x05\x83\x73\xdb\x7f\x0b\xf4\x78\x15\x12\x42\x43\x96\x92\x05\xe3\x82\x4f\x10\x78\x2a\x44\x7b\x34\x02\x57\xb3\xc0\xcd\xb1\x17\x82\x05\x20\x00\x01\x1a\x0d\x80\x32\x7d\x03\x54\x2e\xb1\xc0\x0e\x5f\x98\x90\x10\x5a\xa8\x2a\xd8\xbe\x97\xab\x81\x25\xf3\x68\x85\x3b\x0a\x0f\xb5\x74\xb2\xd4\x49\x75\xb6\x40\x96\xb4\x61\x81\x81\x06\x31\xcb\x3c\xe2\x76\x20\xa7\x0b\xa6\xea\xc3\x33\x5c\xf7\x9f\xab\x66\xc4\x69\x56\x79\x7b\x63\xa7\xf1\x3b\x97\x94\xac\x5d\xa3\xf0\x4a\x58\x55\x7e\xcd\x98\x35\x54\x62\xca\x7f\x52\xcd\x7e\x25\xa0\x82\x22\x57\x09\x65\x1a\xce\xa9\x77\x80\x81\x5b\xae\x59\x8c\xd2\xa9\xaa\x11\xd7\x3b\xd7\xf7\x88\xa1\xbc\xcc\x88\x3c\x51\x9c\xf7\x22\x23\xb3\x54\x51\xf9\x45\x85\x48\x5f\xec\x98\x35\x6c\x3b\x02\x43\xc9\x7a\xa6\xe0\x20\x3c\x5a\x7b\xd0\x04\x7a\xc7\x90\x15\x57\xc3\x3e\x81\xdc\x97\xf4\x46\x06\x51\x62\xc5\x1a\xd9\x26\xee\x17\x9a\xd1\x07\x3f\x99\x53\x6d\x49\x9a\xb5\xc3\xe7\x79\xe3\xf7\xb7\x4d\x44\x10\xa5\xc0\x8e\x6e\x74\x78\x21\xc0\x1f\x0d\x97\x88\x68\x11\xb7\x02\x50\x85\x5d\x01\xc2\x35\xa6\x14\x5a\x8b\xad\xc1\x32\x84\x31\xc6\x17\x07\x98\xa7\x9f\xb4\x01\x89\xa5\x30\xf0\xc1\x78\x02\xc6\x5d\x55\xf1\xc0\x21\xa9\x23\xa8\x1b\x37\xe9\xb4\x7b\x0d\xd3\x2a\x69\x39\xb0\xb6\x73\x6c\x15\x75\x72\xd1\xf0\x09\x2a\xc3\xb8\xb1\x60\x32\x33\x17\x7d\x36\x70\x01\xd4\xa1\x55\x0c\xe8\x77\x33\xc8\x86\x49\x07\xb8\xe2\x88\x9f\x6a\xe3\xc6\x1a\x5a\x0b\x5e\x9b\x40\xbf\xf3\x60\xb5\x98\xad\x48\xd3\x71\x70\x1b\x14\x5d\x8c\x2d\x42\x00\xc6\x2a\x50\x65\x4b\x9c\x35\xc0\x91\x5d\xd7\x08\x31\x9b\x19\x7c\xba\x0c\xbd\xa4\x71\x57\x6a\xd4\x5a\xf9\xf7\xc0\x0f\x37\xaa\x71\x44\x50\xaa\x65\x36\xa3\x48\x19\xf4\x05\x3a\x95\x12\xb7\x9a\xc5\x01\x19\x99\x96\x7a\x71\x0e\x33\x3b\x19\x42\xf5\x09\x42\xc8\xa5\xd3\x89\x5d\xae\x06\x7b\x6e\x32\x8a\x67\x14\x54\xba\x59\xa5\x0a\xc9\x55\x75\xb9\x9d\x63\xf8\x4f\xd6\x61\x7e\x3c\x06\x26\xff\x61\x64\x1a\x23\x0c\x46\xe2\xb5\xea\xfa\xba\x61\x3b\xb7\x6a\x88\x1d\x8e\x11\x2c\x9c\x44\x8e\x86\x73\x28\xee\x88\x65\xf9\x4b\x67\xe5\xc4\x01\xb6\xa5\xcb\x0c\xf9\x54\xf8\x74\x5d\xbc\x84\x3d\x52\x19\x42\xdc\x56\x3f\x8f\x46\x2a\x58\x39\xb4\xf2\x78\xbd\x81\x98\x6e\xd2\x54\xa5\xe0\x39\x1b\xed\x80\xc7\xe2\x97\x2c\xfa\x14\xc3\xb1\x04\xb0\x11\xf0\x72\xd5\xd8\x36\xc7\x54\x8f\x07\xe2\xcc\x3b\x17\x29\x73\xa9\x38\x82\xfb\x31\x6c\x52\x66\xbe\x15\x00\x67\xe5\x0e\x0e\x7a\x34\xb9\x67\x95\x03\x4d\x1b\xd2\x76\x6e\xd6\x2e\xcd\x16\xdd\x65\xc1\x86\x7a\x5d\x25\xd4\xe7\x36\xc5\x58\x6c\xe3\x5c\x7a\x7f\xdc\x97\xba\xfa\x18";

		KeyPairKyber::new(private.into(), public.into())
	}

	fn alice_ed448_identity() -> KeyPairEd448 {
		let private = b"\x84\x97\xd6\xcf\xc5\xaa\x5e\xb8\xfd\x80\xfe\x31\x12\x3f\x16\x05\xd2\xbb\x55\x11\x63\x3f\x3e\x58\x4e\x39\xef\xea\x9c\x3c\x47\x61\xb8\x93\xa2\x79\xe7\xf9\xc8\xa7\x0d\x52\x0b\x03\x84\x80\x51\xdc\x82\xfe\xf6\x9e\xe7\x67\x24\x61\xca";
		let public = b"\xab\x32\x7e\x4c\xe7\x75\x8f\xdc\x2c\x91\x9d\x90\xe8\x6b\x1f\x88\x2e\x19\xe8\xfe\x84\x36\xf3\x90\xd3\xf0\x22\x47\xff\xf1\x2f\xc1\x18\xec\x5c\x09\xdc\x9e\x41\xff\x83\x23\x63\x14\x34\x10\x0f\xd5\x11\xb0\xaa\x0e\x00\x63\xd7\x56\x80";

		KeyPairEd448::new(private.into(), public.into())
	}

	fn alice_kyber_identity() -> KeyPairKyber {
		let private = b"\xd7\x59\x99\x8e\x60\x00\x3f\x8c\xa0\xf7\xd3\x6d\x1b\x1c\x50\x9c\x72\xc5\xf1\xca\x15\xa4\x12\xc6\x82\xdc\xa2\x25\x37\x3e\x60\x12\x88\xc4\x93\x28\x6f\x79\xb3\x75\x68\x5f\x57\xfc\x1c\x8c\xf4\x61\x4c\x9a\x2f\x13\x55\x65\x71\xf4\x90\x39\x1a\x9e\x6c\x12\xce\x52\xf7\x6a\x3b\xc4\x59\x3f\xc8\x48\x25\xb5\xc2\x42\x00\x58\xa1\x60\xcc\x74\xd4\x7b\xd0\x52\xa1\x5d\x87\x87\x47\x38\xbb\x24\xd8\x5a\xf7\x35\xcb\xab\x30\x73\x93\xc4\x9b\xb9\xf5\x09\xc7\xa2\x3f\x7d\xd4\x48\x4e\x08\x44\xd0\x08\x25\xa9\xd9\x77\xdc\x55\x0e\xcb\x67\xc4\xf7\x73\x05\x99\x13\x6a\x96\xe5\x3e\x01\xbb\x48\x76\xe2\xc5\x7a\xd8\x91\xe8\x7a\x22\xb3\x75\x7a\xbb\x13\x12\xe7\xb1\x33\x55\xc0\xc4\x6f\x43\x61\xa4\x91\x64\x37\x7a\x70\x82\xf6\x2e\x39\x9c\x72\x0f\xca\x67\xd7\x9a\xab\x5e\x4c\xac\x3a\x20\x7b\x66\xd5\xb1\xed\x1a\x98\x68\x0a\x9b\x38\x58\x4b\x51\xf7\x08\xc3\xd6\x37\x67\x0a\xa3\xfa\x1b\x7b\xdf\x21\x88\x5e\xa3\x18\xa0\xb0\x4c\xa8\xfb\x91\xcd\x3b\x2c\x4c\x5a\x64\x12\x80\x4f\xb0\xb5\x4f\x16\x12\x92\x58\xc4\x3f\x70\xca\x34\x62\xfb\x61\x35\x92\xae\x33\xa7\x92\xc0\x38\x01\x39\x71\xac\x97\x4a\xb9\xb4\xf3\x4d\xf5\x66\x60\xbc\x49\x8d\xd3\x47\xc3\xc9\xaa\x8b\x16\x14\x62\xbe\x66\xc6\xe4\xd4\x28\x30\x42\xa1\x63\x84\x71\xae\x6b\xa9\x31\x6c\x40\x6c\x58\x07\xd2\x33\x05\x11\xb0\x44\x96\xe2\x9b\x83\xd7\x07\x18\xe2\x37\x61\x13\x96\x64\x86\xb0\x49\x3a\x8e\xd9\x05\x86\xa0\xc3\x81\xf6\xc4\xad\xa5\x7c\x99\x81\x90\x05\x5d\x1b\x3b\x83\x8c\x97\x54\xe4\x6d\x72\x6c\x77\xe9\x1a\x4a\x07\x1b\x4a\xc3\xa4\x00\xa0\x00\xc8\x40\x71\x0f\x36\x70\x0a\x5e\x7b\x53\x73\xc9\x83\x01\x17\x8d\x17\x68\x76\xfb\x30\x10\xa3\x4c\x5b\x8b\x5a\x28\x0f\x09\xbd\x89\x5a\x9b\x5c\x74\x2e\x81\x58\x45\x47\x1c\x36\xc3\xaa\xad\xf0\x08\xc8\x22\xb7\x10\xab\x53\xab\x56\xa9\x53\x86\x06\x30\xa8\x98\xb9\xde\xda\x6e\x71\xd0\x2a\xf7\x9a\xa0\x7c\x29\x09\xeb\x06\x3f\x4a\x70\xc5\x90\xb7\x8b\x16\xd6\xbe\xdd\xd7\x2d\x55\xc5\xc2\x71\x86\x14\xb7\xea\x0f\xa4\x29\x68\x11\x52\x3f\x41\x2a\x80\x1f\x74\x2e\xc7\xa8\xa8\xe3\xe3\x45\x26\xb9\x72\x65\xc0\x63\x17\x72\x0b\x51\x92\xcb\x6a\x31\xb7\x57\x44\x2a\x09\x02\x4a\xc3\xfb\x59\xde\x49\xae\xb5\x4c\x0f\xdf\x48\xbb\x31\x37\x72\x18\x2a\x15\x28\xa2\x0a\x67\x65\x87\x63\x65\x33\x84\xb4\x44\x25\x81\x43\x97\xf3\xc9\x81\x57\x21\x7b\x56\x82\xb2\x69\x9a\x2f\x48\xb9\x5b\xb2\x52\x98\x3c\x73\x28\x69\x06\x3c\xa6\x8c\x9a\xe4\xc0\x10\x13\x95\xe5\x57\x6b\x74\xeb\xb5\x30\x13\x2c\x33\x76\x99\x3a\x4b\x1a\x8e\x99\xa6\x72\x47\x05\x26\x81\x6f\xb6\x8c\x12\x8a\xc6\x01\xb5\xac\xac\x69\xbc\x68\x1d\x77\xbc\xe7\x53\xc0\x31\xcb\x0d\x79\xb0\x77\x0c\x40\x50\x59\x37\x3d\xae\xa7\x32\x29\x4a\x6c\xca\x11\x0f\xba\xd4\x6c\x2a\x66\x65\x4e\xf7\x91\xe3\xeb\x14\x62\x3c\x44\x32\x3a\x08\xae\x90\x9e\xb4\x23\x97\x23\x59\x49\x3b\xa4\x0e\x4e\x85\x98\x3b\x58\xca\x79\x74\xc2\xe7\xc2\x86\x8f\x1a\xa7\xf6\x7c\x53\xe2\x48\x24\xb2\xb8\x2b\xfe\xf7\x52\x0a\x36\xa0\xb3\x42\xbe\xb6\x67\xa9\x56\xf8\xb1\x57\x7c\x7a\xef\xfa\x60\xef\xca\x21\x03\xa5\xa1\x44\x91\x82\x2f\xe7\x9a\xc9\xe7\x15\x28\x31\x7d\x70\xbc\xa7\x98\x16\x06\x1c\x46\xc8\xcd\xf6\xb8\xdb\xf1\xab\xf0\xea\x57\x5f\x09\x58\xe8\x1b\x66\xaa\x49\x03\x97\x00\xcc\x34\xe6\x4f\x41\xea\x0f\x7a\x31\x43\xac\x79\x97\xe1\x15\xb1\x35\x26\x6e\xae\x66\x87\x6f\x2a\x37\x94\xc5\xcb\x4f\xac\x7a\x0a\xfc\x45\x35\x89\x46\xcc\xfc\x6d\x92\xa9\x44\xde\xdb\x0d\x6b\x97\x72\x93\x92\x53\x0f\x01\x77\x50\x37\x6f\x0d\xd9\x93\x39\x4a\xcc\x0d\x4a\x5a\x6f\x49\xb5\x61\xd2\xaa\x1a\x71\x29\x56\x84\x9e\xe1\x7a\xb0\x28\x3c\x70\x78\x5b\x4f\x66\x79\x87\x85\xab\x1f\x1c\xf1\xb2\xcb\x22\x49\x2f\x39\x47\xd1\x4b\x08\xa6\x2c\x9d\x84\xfa\x74\x66\x70\x14\x00\xdc\x26\x21\xb8\x55\x12\x5b\xca\x3d\x7c\xa1\x71\xc5\x8d\x8b\x90\x59\x1b\x9c\xa8\x2a\xe2\x46\x3f\xc2\xce\xa8\x0c\xc7\xd8\x53\xb0\x8b\x3b\x5a\xcc\x1c\x7f\x77\x48\x25\x3d\x87\x1a\x3b\xd6\x10\x3d\x47\x07\x09\x43\x22\x90\x82\x48\xb2\x16\x30\xb7\xcb\x4e\x74\x3b\x90\x75\xe2\xc0\x0a\x27\xcc\xb7\x61\x87\x7c\xd6\x73\x49\x4a\x7e\xab\x44\x4c\xe7\x0b\x33\xca\x0c\x10\xd8\xdc\xcc\xa3\x08\x2d\xfe\x9a\x1b\xca\x93\x4a\xcd\x95\x31\xbd\x1c\x6b\x00\xc1\x0d\x1d\xb5\x32\x94\xd7\x85\x2f\xda\x29\x00\xed\x7e\x54\xac\xcd\x59\x46\x4a\xc8\x99\x77\x4a\x42\xc9\xaa\x67\xa4\xb1\xe0\xa1\xb4\x62\x40\x04\x22\x4e\xc8\x16\x05\x87\x77\x8b\xd9\xc8\x66\x6f\xd7\x35\xec\x6b\xcb\xa3\xc3\x2a\x1b\x38\xc2\x8c\xd9\xbb\xd4\xd6\xbb\xf8\x87\x30\x5d\xc4\x0d\xe1\x32\x33\x7d\x84\x44\xe1\x17\x53\x41\xf5\x02\xbc\x40\xc6\xed\x33\x21\x9e\x6b\x49\x60\x7c\xca\xa2\xe6\x9a\xc3\x69\xa3\xb2\x01\x8f\x55\x80\xb9\x97\x42\x65\x1f\x86\xbf\xc8\x07\x07\xe6\xea\x59\xa1\x58\x24\x29\xb9\x75\xdc\x83\xc4\x1a\xdc\x60\x23\x3b\x53\xee\x45\x6c\xbc\x14\x36\xb5\x5a\x41\xc2\x15\x67\xfd\xc1\x82\xd0\xd6\x1e\x0a\x68\x96\x1d\xc4\x34\xe5\xbc\x3d\x12\xa4\xcd\x8e\x07\xc4\x8a\x57\x76\x32\x1a\xb5\x6f\x36\x1e\x05\xc9\x95\xa0\x5a\x2c\x6a\x02\x53\x6d\x5b\x4e\x01\x94\x6d\xea\xe6\x88\xa1\x07\x07\x35\x5c\x49\x03\xc4\x85\x3c\x20\xbf\x55\x91\x06\xea\x7a\x65\x32\x06\x69\x5d\x30\x76\xff\x12\xb9\xff\xeb\x37\x66\xfc\x6d\x28\x34\x12\xf7\x6c\x73\xfd\x59\x0a\xb6\xb9\xb5\x58\x64\x97\x91\x16\x2b\xaf\xda\x6a\x30\x94\x56\x79\x9c\x7e\x9f\xa9\xb8\x63\xb3\x0c\xf2\x4a\xa7\xcf\x45\x79\xe7\x85\x74\x5b\x39\x3f\x96\x85\x25\x5a\x96\x21\x82\x30\x79\x84\x48\x92\xc5\x27\x16\xf0\xe7\x5c\xe6\x5c\x34\x96\x63\x4c\xb8\x18\x71\x49\xab\x02\xd7\xe2\x1a\xa5\x39\x58\x85\xa4\x01\x99\x11\x73\x51\x13\xcc\x14\x34\x19\x50\x33\x98\x35\x55\xbc\x00\xbd\x6a\x5f\x53\x95\x0f\xdc\x86\x1f\x7a\x85\xed\x25\x81\xa8\x2a\xaf\x0a\x87\xa7\x9f\x0a\x00\x50\x36\x36\xb3\xcb\x72\xf3\x6a\x56\xda\x58\xce\x07\x6c\xb0\x85\xf3\x1f\x97\x54\xaa\x49\xc4\xc9\xe6\x13\x74\x29\x2b\xa8\xfe\xea\x98\x75\xeb\xcd\xaf\x11\x03\x79\xf1\xcc\x97\x21\x6f\x08\x92\x32\xf1\x58\x36\x0b\x62\x06\x30\xcc\x93\x2a\xdb\x73\x52\x60\xaa\x4f\x13\x99\x9c\x31\x4b\xec\x8b\xcd\x3d\xc0\x4d\x97\xc8\x31\x09\x6a\x90\x21\xa0\x1e\x8a\xb0\x35\x0f\xf6\x98\x6b\xf0\xb1\x29\xdc\x08\x41\xb6\x48\xb2\x38\x42\xb0\x55\x21\xcc\xc9\xa7\x57\xa2\x58\xdc\x79\x02\xe3\x20\xa0\x4b\x78\xc0\x6f\xc3\x4f\xf8\x28\xa9\xfb\x8c\x20\xe7\xd9\x3f\x54\xa8\x1f\x5c\xc1\x48\x4a\xfb\x2a\x52\x42\x90\x87\x42\x18\x4b\x6b\x39\x13\x37\x8a\xf3\x66\x6a\x15\x42\xb0\x86\x51\x1a\x3a\x16\xce\x0f\x27\x12\xfe\x60\x9e\x66\xd6\x0f\xc9\x08\x58\x82\xd4\x09\xc7\x95\x3e\x57\x25\x9b\x8d\x51\x60\x6e\x7b\x23\x65\xb8\x71\xef\x47\x35\x28\x95\xcd\x3b\xf6\x9b\x46\xd0\xc1\xb9\xa8\x8a\x21\xf3\xb8\x43\x96\x16\x7f\x53\xc4\xeb\x6a\x32\x5f\x99\x42\x9c\xc4\x1f\x86\xd4\x83\xa2\x64\x6d\x4c\xa5\x84\x93\xdb\x4d\x2e\x98\x77\xc9\x4b\x4e\x2b\xb2\x97\xd7\x12\x1c\xd7\x37\xc7\xd8\xa3\x18\x3a\x62\x88\x5b\x04\xbb\xf9\x1c\x7a\x46\x13\xa5\x59\x76\x85\xa9\xe9\xa9\xb1\x71\x8b\xef\xc2\xa6\x3c\xf6\xb3\xa8\x1c\x2c\xbf\x0b\x63\x04\x0c\xc1\x8d\x64\x6d\x01\x7a\x93\x16\xdb\x11\x8f\x80\x85\x16\xa5\x10\x0b\x50\x85\x8a\x1a\xa0\xcc\xd3\x94\xfb\xcb\xcc\xbd\x12\x27\xc7\x65\x90\x38\xe1\x4d\x28\x23\x51\x30\x12\xc6\x98\xac\x65\xd0\x44\xc0\xce\x11\x6c\xf5\x65\x20\x62\x7b\x23\x42\x23\x1f\xc4\x52\xb7\x3b\x57\x99\xb9\x31\x20\x1a\x1b\xb4\x5f\xc0\x51\x92\x92\x23\x1c\xe0\x66\x39\xbb\x70\x5c\x61\xc3\x61\xe6\x3b\x7a\xf6\xa8\xbf\x42\xae\x63\x83\x67\x2b\xe1\x5b\xc5\xbc\x21\x22\x21\x0b\xa7\x1b\x5c\xa6\xb8\x83\x74\xb2\x98\x8c\x1a\xb3\xc2\x75\x73\xfd\x22\x6f\xd6\xc3\x8e\x8e\x66\x43\x42\x70\xc8\x4a\x76\xc9\x7a\x89\x39\xba\x49\xc5\x44\xd1\x8d\x8a\xc1\x2e\x53\x80\x5e\x20\x4c\x2d\xe2\xc5\x3a\x0d\x0c\x89\xd3\x25\x74\x37\x5b\xbe\xa9\x02\x66\x72\xcb\xb5\x9c\xa7\x2a\xae\xe2\xc0\xc9\xc6\x8d\xa2\x33\xb3\xf0\x7c\xa2\x1e\x22\x85\x13\x05\x00\xb7\xb6\x60\x20\xa9\x3a\x74\xd4\x9e\xd2\xd8\x2c\x10\xf4\x84\xd4\x85\xc7\x50\xf9\x1d\x06\x80\x90\x36\xb0\x1d\x66\xe9\xb8\xfe\x85\xc0\x9b\x86\xad\x9d\x79\xb5\x27\xd7\x55\x5b\x65\xb6\x7d\x46\x95\xef\x07\xcd\xcf\xd8\x80\x39\x76\x01\x3c\x27\x23\xe1\x14\xc1\x06\xc2\x65\xa2\x16\x0a\x2e\xbb\x79\x0e\xcc\x38\xbb\x71\xce\x78\x51\xa5\xa9\x7c\x46\x6b\x75\x0a\xa0\x38\x0e\x31\xe5\xa9\xd9\x62\x3b\x39\xb4\xa8\xec\x79\xb3\x79\xf5\x83\xbc\x41\x63\xa5\xe6\x76\xb7\xec\x90\x31\x3b\xa3\xab\x05\xbb\x7f\x84\x02\xe0\xf8\x95\xd0\xd3\x57\x8d\x01\x33\x64\xb5\x57\xfb\x3a\xc4\x90\xf3\x9b\x21\x66\xa3\xef\xe6\xb9\x45\xa2\x57\x71\xf4\x66\xa9\x58\x5d\x01\x5c\x5e\x6b\x74\x6a\xbf\xb9\x2c\xf8\xf4\x78\xf3\x41\xa5\x38\xeb\x82\xd5\x39\x4c\x30\xa7\x60\xd9\xfb\x7c\xf7\x53\x3b\xe6\xb0\xa7\x6e\x26\x83\xc6\x4b\x0f\x13\x82\x83\x0d\xc2\x86\x29\x0a\x27\xa9\xc4\xad\x62\xd3\x52\x6a\x53\x0a\xbe\x15\x8c\xb5\x21\x50\x39\xcc\x76\x6c\x40\x62\x7c\x38\x6b\x10\x2c\x41\xae\x55\x22\x39\x96\xb8\x63\x34\x2b\x21\x75\xa6\x5e\x0a\xc2\xe2\x53\x4a\x11\x44\x32\x99\x15\x42\x57\xd6\x67\x01\x18\x19\xfb\x16\x83\x1e\x88\x8a\x0b\x14\x17\x14\xea\x97\x41\xcc\x97\x7d\xc0\x94\x55\x1a\x52\x25\xfb\x5b\x6e\x83\xbb\x32\x87\x79\xa4\x49\x85\x15\xc1\x0b\x92\xca\x4b\x5f\xa9\xb3\x07\x5c\x7d\xbf\x13\x01\xa4\x1b\x32\x2d\xd3\xaa\xe1\x64\x67\xbf\xc3\x20\x00\x05\x12\x02\xd8\xc7\x01\x97\x68\xba\x58\x51\x0e\x0b\xc5\x2e\x01\x0b\xfc\x7c\x37\x33\x40\x56\xdb\x2a\x86\x28\x5a\x32\xe1\x71\x52\x31\x20\x6e\x8c\xa3\x14\x7d\x34\x9e\x37\xd4\x02\x8e\xd4\xa1\x69\xe3\x64\xfe\xa1\xcd\x54\xf0\xb3\x4f\xa6\x80\xb3\x31\x12\xa5\x49\xc4\xa9\xc9\x1e\xa4\x5a\x0e\x4f\x89\x57\xa8\xc3\x8b\xe4\xac\x49\xf3\xba\x60\x4e\xf8\x52\xd7\x99\x07\xe2\xab\x65\xcc\x11\xc8\x42\xe6\x43\xde\x3c\x9c\xeb\x55\x6e\x51\x83\x75\x83\x96\x2a\x17\xab\x0b\x80\xe3\xa9\x9b\x12\x75\x5b\xa0\x95\xf0\xc8\x97\x15\x43\x80\xdd\xc1\x7c\x6c\xe2\x13\x59\xe4\x2b\x29\xf3\x59\x17\xf6\x7a\x30\x4b\x6d\x4a\x50\xac\x16\x71\x78\x06\x4c\x75\x82\x35\x64\xd2\x35\x55\x23\x30\x88\xeb\xa4\x45\xc0\xb2\x71\x47\xa6\x66\x16\xc8\xc7\xaf\xa9\x9f\x3a\x6c\x96\x1a\x00\xcb\xc0\xec\x05\x36\xb1\x1f\xac\xc8\x69\x15\xc4\x2e\x51\xd7\x2a\x3c\x69\xa8\x48\xab\xb5\x96\xfb\x53\x0d\x43\x9e\x5f\x9b\x03\xa5\xf4\xaa\x45\xf7\x62\x04\xb8\x5a\x48\xa3\x3f\x7f\xd8\x51\xc3\x8c\x2a\xfe\xa9\x24\x4f\xf9\xc9\xa7\xe3\x34\xd0\x37\xc8\xfe\xe7\xc2\xec\xd8\xa8\x54\xf0\xca\x13\x50\x62\x68\x63\xa9\xb6\xe1\x60\x0a\x87\x3c\x26\x74\x1b\x0f\xf3\x31\x45\x10\x21\x17\xec\x63\x0e\x01\xb0\x90\x46\x38\x42\x25\x69\x1a\xd2\xa0\xc2\x54\xcd\x12\x11\xca\x8f\xd3\x44\x36\x0c\x17\x70\x1c\xc3\xda\x3c\x20\x13\xca\xa0\x47\x34\xa1\x07\xb0\x39\x26\x49\x2e\x18\x9c\x2b\xc5\x99\xca\x75\xb6\x2f\x54\xf5\xb2\x7f\xd0\xbf\x90\xa9\x5a\x28\xc7\x26\x95\x08\x8d\x91\x34\x55\x9a\xd1\x6a\x5b\xd1\x64\x8c\xcc\x74\x37\xc6\x4f\xd0\xbb\x94\xc7\x23\xbb\x5e\x74\x00\xc0\x6a\x5c\x53\x67\x6c\x99\x03\xab\x90\x2b\x95\x9b\x40\x6d\x31\x3a\xa4\x6c\xd0\x7d\x90\xb2\x81\x44\xd6\xa2\xa3\xb5\x50\xa4\xb9\xa6\xf1\xa5\x51\xf4\x48\x11\x72\xc9\x8f\x7c\xe8\x0e\x8f\x66\x3a\x08\x38\x9e\x22\x57\x71\x07\xd1\x05\xb0\x10\x02\x80\x28\xba\xd3\xa1\x4c\xcd\xd8\xab\x9d\x0b\x9d\xb6\xbc\x20\x98\x3a\x2d\xc7\x84\x58\x86\xc3\x2f\xdd\x57\x93\x33\x9c\xa5\x26\xf5\x2e\xc1\x20\xc5\x6d\x73\xab\x55\xa4\x73\x58\x02\x4d\x3b\x79\xb1\xae\x73\xa5\x98\x92\x7c\x3b\xe9\x79\xfa\xf0\xab\x1c\xaa\x8e\xd2\x63\x2a\x89\xeb\x8a\x46\x58\x8f\x0d\x7b\x78\x23\xa5\x44\x8b\xe8\x5f\xd9\x00\x92\x9a\x4c\x38\x49\x72\x0a\x5a\x45\x44\x9a\xd0\xc3\x50\xeb\x60\xa3\x39\x9b\x4a\x8c\x62\x56\x76\x86\xd9\x88\x05\xbe\xac\x71\x19\x7b\x4b\xe8\x62\x8f\xac\xc1\x23\xfa\xac\xad\x08\x32\xcb\x70\x94\x55\x24\x29\xc7\x47\xca\x41\x25\x10\x94\x7e\x9c\x47\x6c\x83\xbe\x30\xf2\x0b\x51\x71\x06\xb1\x3b\xa5\x05\x82\xa8\x5f\xfc\x10\xc4\xb9\x89\x9a\x6c\x23\xda\x9b\x4b\x1c\x06\xad\xd3\xb1\x6f\x7a\x1c\x37\x74\x08\x58\x0d\xf0\x09\xac\xa6\xc0\x5e\x84\xb9\x5a\x99\x47\xbe\x25\x23\xc2\x4a\x50\xfd\xb9\xb5\x8d\x37\x8b\x98\x6a\x75\x5e\x29\x33\x5f\xa4\xce\x5b\xd1\x9f\xb8\x22\x15\xa0\xd5\x7b\x91\x6a\x78\xeb\xf4\x2c\x40\x69\x74\x56\xf0\x1e\x1d\x1a\x5e\x4c\xda\x19\x49\x18\xc4\xce\x06\x57\x48\xd8\x22\x6c\xd4\xbe\x0a\x3c\xb5\x45\x2a\x51\x31\x8a\x3d\xf5\x2c\xca\x5b\x59\x4f\x12\xa5\x5f\x19\xda\x32\x64\xc0\xc1\x63\xd2\x67\x5a\xd2\x50\xc7\x18\x01\xb2\xd9\x28\x19\xe3\x64\x48\x44\x52\x8c\xb2\x40\xd7\xc7\x36\x32\xf8\xc4\xd3\x23\x6e\xc2\x2a\x75\xf0\x28\x01\x93\x13\x4f\x8d\xba\x8b\x6b\x75\x1a\xd1\xb4\x40\x56\x15\x3a\xde\xfb\xbf\xc1\x4a\xac\x36\xab\x35\x44\x55\x86\x97\x43\x6d\xcf\xb2\x40\x4e\xb8\xc1\x4c\x81\x4f\x9d\xd4\x68\x29\xea\xa8\x34\xac\x38\x5d\x44\x3f\xc3\x83\x07\x17\x4c\x86\x50\x04\x95\xb9\xb8\x04\x00\xc6\x96\xf2\x49\xb3\x12\xa9\x3d\x7c\xd7\x73\x24\x80\x92\xe2\xe6\x11\xd8\x84\xb9\xdf\xfa\x33\xf6\xa4\x8a\x03\xe7\x7e\x04\x20\x2b\xb0\x75\x98\xff\x07\x7a\x5f\xa4\x6c\xa4\x53\x33\xad\xd7\x89\x6a\xec\x0e\x3b\xba\x7b\x51\xb7\x61\x6c\x3b\xbf\x7d\x84\x7a\x95\xd3\x60\x54\xda\xb1\x29\x91\x38\xc5\xd7\x04\x46\xeb\x59\x89\xa3\x2f\xe9\x90\x8a\xaf\x88\x70\x73\xf4\x15\x5f\xa7\x62\x78\x5b\x4a\x88\x82\x37\xad\xa3\xb7\x58\x64\x83\x19\x08\x59\x55\x89\x52\x8c\x65\x6b\x41\xf3\x2f\xb1\x47\x1e\xde\x29\x1a\x2c\x91\x1b\xbc\x11\x1d\xfd\xfd\xab\x6d\x9b\xc7\x46\x62\x66\x3f\xbe\x40\x2c\xbd\x2b\xbd\x29\xe7\xd9\x95\x41\x54\x89\x86\x85\x2a\xde\x80\xea\x68\x39\x95\x73\x18\xd6\xdd\x09\xb1\x40\x38\x4a\x14\x28\x00\xeb\x75\x15\x7c\xec\xfe\xc5\xfe\xee\x64\xe4\x44\x35\xc6\x57\x3e\x7e\x48\xe2\x9d\xba\x3e\xf7\xfd\x5a\x63\xf4\x81\x53\xe3\xfe\xc1\x29\xd5\xbf\xa0\x82\x97\x7f\x7b\x4f\x71\x9e\x7a\x0c\x3a\x83\xef\x9e";
		let public = b"\xb9\xa8\x8a\x21\xf3\xb8\x43\x96\x16\x7f\x53\xc4\xeb\x6a\x32\x5f\x99\x42\x9c\xc4\x1f\x86\xd4\x83\xa2\x64\x6d\x4c\xa5\x84\x93\xdb\x4d\x2e\x98\x77\xc9\x4b\x4e\x2b\xb2\x97\xd7\x12\x1c\xd7\x37\xc7\xd8\xa3\x18\x3a\x62\x88\x5b\x04\xbb\xf9\x1c\x7a\x46\x13\xa5\x59\x76\x85\xa9\xe9\xa9\xb1\x71\x8b\xef\xc2\xa6\x3c\xf6\xb3\xa8\x1c\x2c\xbf\x0b\x63\x04\x0c\xc1\x8d\x64\x6d\x01\x7a\x93\x16\xdb\x11\x8f\x80\x85\x16\xa5\x10\x0b\x50\x85\x8a\x1a\xa0\xcc\xd3\x94\xfb\xcb\xcc\xbd\x12\x27\xc7\x65\x90\x38\xe1\x4d\x28\x23\x51\x30\x12\xc6\x98\xac\x65\xd0\x44\xc0\xce\x11\x6c\xf5\x65\x20\x62\x7b\x23\x42\x23\x1f\xc4\x52\xb7\x3b\x57\x99\xb9\x31\x20\x1a\x1b\xb4\x5f\xc0\x51\x92\x92\x23\x1c\xe0\x66\x39\xbb\x70\x5c\x61\xc3\x61\xe6\x3b\x7a\xf6\xa8\xbf\x42\xae\x63\x83\x67\x2b\xe1\x5b\xc5\xbc\x21\x22\x21\x0b\xa7\x1b\x5c\xa6\xb8\x83\x74\xb2\x98\x8c\x1a\xb3\xc2\x75\x73\xfd\x22\x6f\xd6\xc3\x8e\x8e\x66\x43\x42\x70\xc8\x4a\x76\xc9\x7a\x89\x39\xba\x49\xc5\x44\xd1\x8d\x8a\xc1\x2e\x53\x80\x5e\x20\x4c\x2d\xe2\xc5\x3a\x0d\x0c\x89\xd3\x25\x74\x37\x5b\xbe\xa9\x02\x66\x72\xcb\xb5\x9c\xa7\x2a\xae\xe2\xc0\xc9\xc6\x8d\xa2\x33\xb3\xf0\x7c\xa2\x1e\x22\x85\x13\x05\x00\xb7\xb6\x60\x20\xa9\x3a\x74\xd4\x9e\xd2\xd8\x2c\x10\xf4\x84\xd4\x85\xc7\x50\xf9\x1d\x06\x80\x90\x36\xb0\x1d\x66\xe9\xb8\xfe\x85\xc0\x9b\x86\xad\x9d\x79\xb5\x27\xd7\x55\x5b\x65\xb6\x7d\x46\x95\xef\x07\xcd\xcf\xd8\x80\x39\x76\x01\x3c\x27\x23\xe1\x14\xc1\x06\xc2\x65\xa2\x16\x0a\x2e\xbb\x79\x0e\xcc\x38\xbb\x71\xce\x78\x51\xa5\xa9\x7c\x46\x6b\x75\x0a\xa0\x38\x0e\x31\xe5\xa9\xd9\x62\x3b\x39\xb4\xa8\xec\x79\xb3\x79\xf5\x83\xbc\x41\x63\xa5\xe6\x76\xb7\xec\x90\x31\x3b\xa3\xab\x05\xbb\x7f\x84\x02\xe0\xf8\x95\xd0\xd3\x57\x8d\x01\x33\x64\xb5\x57\xfb\x3a\xc4\x90\xf3\x9b\x21\x66\xa3\xef\xe6\xb9\x45\xa2\x57\x71\xf4\x66\xa9\x58\x5d\x01\x5c\x5e\x6b\x74\x6a\xbf\xb9\x2c\xf8\xf4\x78\xf3\x41\xa5\x38\xeb\x82\xd5\x39\x4c\x30\xa7\x60\xd9\xfb\x7c\xf7\x53\x3b\xe6\xb0\xa7\x6e\x26\x83\xc6\x4b\x0f\x13\x82\x83\x0d\xc2\x86\x29\x0a\x27\xa9\xc4\xad\x62\xd3\x52\x6a\x53\x0a\xbe\x15\x8c\xb5\x21\x50\x39\xcc\x76\x6c\x40\x62\x7c\x38\x6b\x10\x2c\x41\xae\x55\x22\x39\x96\xb8\x63\x34\x2b\x21\x75\xa6\x5e\x0a\xc2\xe2\x53\x4a\x11\x44\x32\x99\x15\x42\x57\xd6\x67\x01\x18\x19\xfb\x16\x83\x1e\x88\x8a\x0b\x14\x17\x14\xea\x97\x41\xcc\x97\x7d\xc0\x94\x55\x1a\x52\x25\xfb\x5b\x6e\x83\xbb\x32\x87\x79\xa4\x49\x85\x15\xc1\x0b\x92\xca\x4b\x5f\xa9\xb3\x07\x5c\x7d\xbf\x13\x01\xa4\x1b\x32\x2d\xd3\xaa\xe1\x64\x67\xbf\xc3\x20\x00\x05\x12\x02\xd8\xc7\x01\x97\x68\xba\x58\x51\x0e\x0b\xc5\x2e\x01\x0b\xfc\x7c\x37\x33\x40\x56\xdb\x2a\x86\x28\x5a\x32\xe1\x71\x52\x31\x20\x6e\x8c\xa3\x14\x7d\x34\x9e\x37\xd4\x02\x8e\xd4\xa1\x69\xe3\x64\xfe\xa1\xcd\x54\xf0\xb3\x4f\xa6\x80\xb3\x31\x12\xa5\x49\xc4\xa9\xc9\x1e\xa4\x5a\x0e\x4f\x89\x57\xa8\xc3\x8b\xe4\xac\x49\xf3\xba\x60\x4e\xf8\x52\xd7\x99\x07\xe2\xab\x65\xcc\x11\xc8\x42\xe6\x43\xde\x3c\x9c\xeb\x55\x6e\x51\x83\x75\x83\x96\x2a\x17\xab\x0b\x80\xe3\xa9\x9b\x12\x75\x5b\xa0\x95\xf0\xc8\x97\x15\x43\x80\xdd\xc1\x7c\x6c\xe2\x13\x59\xe4\x2b\x29\xf3\x59\x17\xf6\x7a\x30\x4b\x6d\x4a\x50\xac\x16\x71\x78\x06\x4c\x75\x82\x35\x64\xd2\x35\x55\x23\x30\x88\xeb\xa4\x45\xc0\xb2\x71\x47\xa6\x66\x16\xc8\xc7\xaf\xa9\x9f\x3a\x6c\x96\x1a\x00\xcb\xc0\xec\x05\x36\xb1\x1f\xac\xc8\x69\x15\xc4\x2e\x51\xd7\x2a\x3c\x69\xa8\x48\xab\xb5\x96\xfb\x53\x0d\x43\x9e\x5f\x9b\x03\xa5\xf4\xaa\x45\xf7\x62\x04\xb8\x5a\x48\xa3\x3f\x7f\xd8\x51\xc3\x8c\x2a\xfe\xa9\x24\x4f\xf9\xc9\xa7\xe3\x34\xd0\x37\xc8\xfe\xe7\xc2\xec\xd8\xa8\x54\xf0\xca\x13\x50\x62\x68\x63\xa9\xb6\xe1\x60\x0a\x87\x3c\x26\x74\x1b\x0f\xf3\x31\x45\x10\x21\x17\xec\x63\x0e\x01\xb0\x90\x46\x38\x42\x25\x69\x1a\xd2\xa0\xc2\x54\xcd\x12\x11\xca\x8f\xd3\x44\x36\x0c\x17\x70\x1c\xc3\xda\x3c\x20\x13\xca\xa0\x47\x34\xa1\x07\xb0\x39\x26\x49\x2e\x18\x9c\x2b\xc5\x99\xca\x75\xb6\x2f\x54\xf5\xb2\x7f\xd0\xbf\x90\xa9\x5a\x28\xc7\x26\x95\x08\x8d\x91\x34\x55\x9a\xd1\x6a\x5b\xd1\x64\x8c\xcc\x74\x37\xc6\x4f\xd0\xbb\x94\xc7\x23\xbb\x5e\x74\x00\xc0\x6a\x5c\x53\x67\x6c\x99\x03\xab\x90\x2b\x95\x9b\x40\x6d\x31\x3a\xa4\x6c\xd0\x7d\x90\xb2\x81\x44\xd6\xa2\xa3\xb5\x50\xa4\xb9\xa6\xf1\xa5\x51\xf4\x48\x11\x72\xc9\x8f\x7c\xe8\x0e\x8f\x66\x3a\x08\x38\x9e\x22\x57\x71\x07\xd1\x05\xb0\x10\x02\x80\x28\xba\xd3\xa1\x4c\xcd\xd8\xab\x9d\x0b\x9d\xb6\xbc\x20\x98\x3a\x2d\xc7\x84\x58\x86\xc3\x2f\xdd\x57\x93\x33\x9c\xa5\x26\xf5\x2e\xc1\x20\xc5\x6d\x73\xab\x55\xa4\x73\x58\x02\x4d\x3b\x79\xb1\xae\x73\xa5\x98\x92\x7c\x3b\xe9\x79\xfa\xf0\xab\x1c\xaa\x8e\xd2\x63\x2a\x89\xeb\x8a\x46\x58\x8f\x0d\x7b\x78\x23\xa5\x44\x8b\xe8\x5f\xd9\x00\x92\x9a\x4c\x38\x49\x72\x0a\x5a\x45\x44\x9a\xd0\xc3\x50\xeb\x60\xa3\x39\x9b\x4a\x8c\x62\x56\x76\x86\xd9\x88\x05\xbe\xac\x71\x19\x7b\x4b\xe8\x62\x8f\xac\xc1\x23\xfa\xac\xad\x08\x32\xcb\x70\x94\x55\x24\x29\xc7\x47\xca\x41\x25\x10\x94\x7e\x9c\x47\x6c\x83\xbe\x30\xf2\x0b\x51\x71\x06\xb1\x3b\xa5\x05\x82\xa8\x5f\xfc\x10\xc4\xb9\x89\x9a\x6c\x23\xda\x9b\x4b\x1c\x06\xad\xd3\xb1\x6f\x7a\x1c\x37\x74\x08\x58\x0d\xf0\x09\xac\xa6\xc0\x5e\x84\xb9\x5a\x99\x47\xbe\x25\x23\xc2\x4a\x50\xfd\xb9\xb5\x8d\x37\x8b\x98\x6a\x75\x5e\x29\x33\x5f\xa4\xce\x5b\xd1\x9f\xb8\x22\x15\xa0\xd5\x7b\x91\x6a\x78\xeb\xf4\x2c\x40\x69\x74\x56\xf0\x1e\x1d\x1a\x5e\x4c\xda\x19\x49\x18\xc4\xce\x06\x57\x48\xd8\x22\x6c\xd4\xbe\x0a\x3c\xb5\x45\x2a\x51\x31\x8a\x3d\xf5\x2c\xca\x5b\x59\x4f\x12\xa5\x5f\x19\xda\x32\x64\xc0\xc1\x63\xd2\x67\x5a\xd2\x50\xc7\x18\x01\xb2\xd9\x28\x19\xe3\x64\x48\x44\x52\x8c\xb2\x40\xd7\xc7\x36\x32\xf8\xc4\xd3\x23\x6e\xc2\x2a\x75\xf0\x28\x01\x93\x13\x4f\x8d\xba\x8b\x6b\x75\x1a\xd1\xb4\x40\x56\x15\x3a\xde\xfb\xbf\xc1\x4a\xac\x36\xab\x35\x44\x55\x86\x97\x43\x6d\xcf\xb2\x40\x4e\xb8\xc1\x4c\x81\x4f\x9d\xd4\x68\x29\xea\xa8\x34\xac\x38\x5d\x44\x3f\xc3\x83\x07\x17\x4c\x86\x50\x04\x95\xb9\xb8\x04\x00\xc6\x96\xf2\x49\xb3\x12\xa9\x3d\x7c\xd7\x73\x24\x80\x92\xe2\xe6\x11\xd8\x84\xb9\xdf\xfa\x33\xf6\xa4\x8a\x03\xe7\x7e\x04\x20\x2b\xb0\x75\x98\xff\x07\x7a\x5f\xa4\x6c\xa4\x53\x33\xad\xd7\x89\x6a\xec\x0e\x3b\xba\x7b\x51\xb7\x61\x6c\x3b\xbf\x7d\x84\x7a\x95\xd3\x60\x54\xda\xb1\x29\x91\x38\xc5\xd7\x04\x46\xeb\x59\x89\xa3\x2f\xe9\x90\x8a\xaf\x88\x70\x73\xf4\x15\x5f\xa7\x62\x78\x5b\x4a\x88\x82\x37\xad\xa3\xb7\x58\x64\x83\x19\x08\x59\x55\x89\x52\x8c\x65\x6b\x41\xf3\x2f\xb1\x47\x1e\xde\x29\x1a\x2c\x91\x1b\xbc\x11\x1d\xfd\xfd\xab\x6d\x9b\xc7\x46\x62\x66\x3f\xbe\x40\x2c\xbd\x2b\xbd\x29\xe7\xd9\x95\x41\x54\x89\x86\x85\x2a\xde\x80\xea";

		KeyPairKyber::new(private.into(), public.into())
	}

	fn bob_x448_identity() -> KeyPairX448 {
		let private = b"\x80\x5a\xda\x93\x59\xcb\xa7\x6b\x7f\xeb\x4e\x08\x56\xc8\xd7\x7e\x00\x29\x96\x0b\x7c\xa9\xe1\x1a\x0e\x7b\x98\x0a\xc8\x0b\x6e\xbb\xa3\xde\x00\xfb\x7a\xf9\xdc\xab\xa6\x2d\x63\x58\xc5\xc1\x79\xf7\x90\x26\x76\x17\x87\xcb\x21\xb2";
		let public = b"\xc0\x48\x15\x74\x0d\xe0\xf7\xf2\x57\x0b\x62\xae\x04\x41\x8d\xf7\xa8\x71\x78\x77\xec\x1f\x89\xeb\x86\x50\x69\xe4\x15\xc2\x81\x04\x95\xd6\x3f\x6a\x17\x96\x7d\xb6\x35\x4a\xb6\x8c\x38\xb2\x3b\xfd\x92\x12\x05\xba\xda\x32\xf2\x29";

		KeyPairX448::new(private.into(), public.into())
	}

	fn bob_x448_prekey() -> KeyPairX448 {
		let private = b"\x98\x96\xd4\x72\xf4\x4b\x46\x18\xa6\x33\x24\xf6\x7f\x94\x77\x48\xd7\x88\x0f\x1b\xdb\xf8\x56\x75\x2c\x0b\x4f\xa5\xeb\x4a\xca\xd2\x00\x06\x3b\x72\x7b\xe3\x3e\xfd\xb8\x32\x73\xc1\x1f\x9e\xcd\xdc\x90\xfe\x60\xb1\x88\x55\x3a\xb8";
		let public = b"\xfd\x36\xa7\x7e\x1c\xe5\x3a\x60\x34\x8b\x66\x79\xeb\xa6\x61\x27\x40\x0e\x05\x2d\x90\x7e\x5e\x0b\xbf\xe6\x0c\x13\x71\x9d\x66\xf7\x83\xd2\x4b\x8f\x5e\x8d\x15\x66\xf7\x02\xa4\xad\x28\x9d\x9c\x29\x14\xde\x33\x2b\xc6\xb7\x68\xe3";

		KeyPairX448::new(private.into(), public.into())
	}

	fn bob_ed448_identity() -> KeyPairEd448 {
		let private = b"\x43\x00\xdc\xee\x83\xb7\xc5\xdd\x43\x28\x8a\xb6\x3e\xd4\xd0\xaa\xb0\x4a\x97\xc0\x90\xfa\x68\x05\x49\x12\x46\x5b\x5f\x4a\xc6\xde\x34\x32\xb8\x57\x74\xa6\xce\x6c\x9c\x9d\x2e\xc0\xbd\x50\x1d\xdf\x50\xbe\x28\xb9\x82\xf0\x33\x0e\xc7";
		let public = b"\x4b\xee\xf9\x7d\x50\x95\xb7\x8d\x59\x75\xe0\xfe\x9c\xbb\x2c\xcc\xa5\x47\x1f\x67\x68\xc8\x03\xdd\xfc\x18\x67\x95\xad\xe7\x07\x9c\x38\x9f\xa4\x7a\xac\x20\x85\x79\x5a\xfb\xb7\xe2\x9b\x24\xa0\x7b\xe1\xec\x2c\x5e\xf2\xa0\xaf\x9d\x80";

		KeyPairEd448::new(private.into(), public.into())
	}

	fn bob_kyber_identity() -> KeyPairKyber {
		let private = b"\xfa\x60\x44\x9e\x10\x2a\x35\x86\x62\x99\x79\x63\x89\x43\x3c\x41\xec\xaf\x85\xa3\x47\xbc\x7b\x27\x3e\x93\x0e\xc5\xd0\x5f\x6f\xc6\x85\x4b\x96\x5f\x3e\x52\x4b\x67\x84\x71\xc8\xe6\x12\x1e\x87\x40\xef\xb2\x01\x54\x39\xcc\x6b\x05\x49\x90\xc9\x56\x47\xe0\x61\xca\x52\x60\xdb\x07\xb3\x57\x61\x91\xa6\x68\x14\x34\xb3\x34\x80\x46\x64\x34\x2a\x0c\x19\x31\x61\x8d\xca\x99\x0f\x32\x75\x18\x8c\x2b\x4a\x05\xc8\x04\xe3\x27\xeb\xa8\x65\xc1\x25\x32\xc2\xe1\x82\xc6\x3b\xce\x01\xd8\xba\x5d\x02\x56\x38\x70\x7b\x41\x9a\xc6\xd3\xd3\xa6\xd8\x9a\x1c\x7c\x0c\xb7\xa1\xb6\x2c\xe3\x79\x42\x4f\x9b\x3b\x2a\x21\x31\x9f\xa4\x56\x6a\xb7\x88\x0a\x76\x3b\x19\x20\x20\xf4\x77\x1c\x9d\x10\x39\xd5\x37\x10\xa2\x20\x65\x8f\x8b\x2f\x36\x4a\x00\x77\x1b\x1f\x3a\x72\x7d\xcc\xc6\x9b\xa7\xdc\x0b\x2f\xc7\x67\x48\xe8\x31\x5b\xc1\xa3\xa9\xa3\x5b\x09\xab\x20\xbf\x68\x8b\x53\x4a\xa6\x1a\xa2\x09\xcd\x71\x0c\x4c\x1c\x75\x6b\x14\xc3\x86\x81\x47\x05\x11\x81\x9d\x73\xae\x7d\x2c\x5b\x9f\xb8\xa8\xcf\xd3\x29\x5f\x36\x4f\xef\xb4\x83\x78\x91\x4d\xa0\xf0\x1d\x09\xf4\x95\xab\x3b\x49\x94\xe1\xc8\xda\x3c\xa8\x00\x6c\x78\xbb\x9a\x86\x28\x62\x28\xaa\x58\x23\x9b\x65\x3a\xb4\x2a\xba\x16\x46\x62\x9e\xd8\x07\xbf\x33\xca\x53\x13\x55\xa3\xfb\x13\x6f\x3b\x90\xaa\x44\xc5\xa7\x9c\xc9\x94\x55\x52\xc0\x69\xc2\x0a\x80\x03\xd7\x64\x77\x85\xc0\x07\xb8\x54\x42\x62\x8a\xac\x9b\x33\x58\xad\xfa\xae\x34\x72\x53\x81\x59\x2c\x97\x50\x50\x78\x0a\x40\x39\xda\x85\x5a\x58\x9a\xc0\x32\x1f\xac\x82\x37\x43\x10\x3c\x7b\x1c\x2f\xbf\x65\x4b\xd8\xec\xca\xfd\xf5\x8e\x00\x99\x47\xb9\x9a\x5b\x5c\xe7\x50\x75\x64\xb3\xb1\x32\xc3\x8d\x20\xaa\xca\xa2\xae\x80\xa1\x64\x91\x9b\xb6\x02\xe5\x93\x63\xb7\xa7\x8c\xc3\x77\x4e\x11\xad\xb1\x66\xa2\x67\xf6\x41\x50\x0a\x2c\xda\x25\x4a\xaf\x14\x6c\xb7\x2b\x19\x0f\x0a\x68\xc2\x25\x83\xfd\xbc\x5e\xb7\x30\x77\x2f\xf1\x52\xf1\xbc\xa1\x6b\xe6\x32\xad\x80\xb0\x2b\x2c\x0b\x19\x21\x6c\x67\x1b\x0e\x61\xcb\xb8\xd0\xb3\x4f\x3a\x22\x48\x59\x87\x51\x06\x09\x40\x24\x01\x7e\xd1\x05\xac\xf2\x91\x02\xe6\xb1\x71\xa8\xab\x32\x08\x5b\xb4\xe6\x00\x88\x7d\xb7\xb1\x77\xb8\x24\x8d\x10\x08\x41\xaa\x8f\x9d\x19\x1f\xfc\xab\xc0\x29\x74\x25\x55\xb8\xc9\x30\x85\x3f\x7d\x22\x4e\x96\xa8\x99\xe3\x09\x93\x24\x0a\xa9\xd4\xa8\xad\x70\x83\x57\x80\xb3\x40\xe7\x15\x1b\xe3\xcc\x60\x03\x99\x92\xd6\xb2\xaa\x2a\xe5\x84\x49\x63\xc7\xb6\x79\x0f\xbc\x23\x0a\xa1\xc7\x9d\x3a\xe4\x76\xb3\x88\x67\x4a\xe5\x53\x61\xda\x2a\x28\x94\x8e\x1e\x6a\xa6\xa4\x70\x9b\x33\x31\x90\xd3\x4c\x3b\x6b\x23\x74\xc0\xfb\xbf\xb9\xd2\x92\x91\xf1\x8f\x0e\x7b\x9f\xba\xeb\xb5\xa5\x0c\x0b\x57\xc0\x84\xb5\x0a\xb6\x6b\xd5\x25\x95\xe7\x6f\x9a\x35\x14\x05\x68\x9a\x92\xd6\x9a\xb8\x9c\x47\x0b\xfb\x90\xd3\x1b\x0a\x01\x03\xa6\xf5\xc4\x24\x93\x90\x0c\xce\x86\x44\x46\xda\x51\x0b\x46\x62\x47\x49\xa3\x40\x63\x0f\x48\x11\x46\xcf\xe2\x64\x25\x42\x37\xdc\x44\xaf\xe0\x42\xab\x36\x50\xb3\xfc\x86\x07\x6d\xba\x7c\x8f\x51\x9a\x27\xc7\x50\xcc\x05\x8c\x05\x95\x47\x64\x51\x4b\x88\x87\xc3\x63\x36\x4f\x01\x44\x8a\x2a\x68\xca\x1d\x35\x3e\x33\x0b\x39\xa0\xb0\x28\xb0\xcc\x54\xc0\x98\x84\xb0\x66\xad\x91\x54\x14\x71\x8c\x68\x29\x71\x32\x41\x00\xce\xd8\x2a\x16\x66\xc6\x57\x5b\x66\xa5\x00\x95\x79\x47\xe7\x0d\xfe\x63\x32\x62\xac\x3f\xb1\x55\x19\x60\xb4\x79\xb1\xc0\xb3\x96\x05\x54\x22\x22\x17\x3b\xcc\xb4\xad\x2a\x00\x97\x19\x22\x55\xe7\xc6\xfd\x76\x85\x1a\x09\x49\x11\x28\x34\xf3\xe1\x5e\x40\x9a\x8a\xf9\xd1\x64\xd3\x99\x81\xa0\x1c\x3e\x6b\x28\x50\xcb\xa5\x3f\x79\x40\xb8\xb5\x6a\xa2\xe5\xa8\x04\x80\xf2\x21\xe0\xda\x62\x49\x89\x9c\xbf\x19\xa9\x0f\xc0\xba\xa0\x34\xaf\x04\x42\x57\x05\xa6\x04\x36\x30\x41\x8b\xb7\x1c\x67\xe7\x42\xbd\x5a\x97\x48\xb7\xa9\x1c\x07\x71\x8c\x30\x3c\x76\xb1\x25\xbb\xa4\xa9\x98\x34\x27\x6b\x5a\x2c\x2f\xc0\x5a\x62\x4a\x3d\xf3\x15\xad\x7d\x8a\xbf\x0a\x38\xaf\x0b\xc3\x4c\x7d\xe6\x01\x5c\x1c\xb3\xaa\x7c\xb1\xcb\x9b\x3b\xa4\xb7\x98\x0f\x9a\xcb\x3e\xb4\x6a\x63\xa8\x40\xa6\x2a\x50\x4c\x39\x8a\x77\xd0\x52\xd8\x93\x30\x9c\x20\x20\x7d\x3b\x21\xc4\x69\x6a\x53\x33\x68\xd6\x3c\x22\x53\x73\xb5\x77\xf7\x24\x8d\x90\x6b\xc3\x31\x3f\x32\xe6\x83\xe3\xe7\xb5\x7e\x18\x67\xbc\x97\x7d\x2d\x3c\x32\x29\x32\x23\xaa\x3b\x37\xf7\x0a\x92\xb4\xa6\x88\x9c\xf6\x7f\x05\x81\x81\xed\x95\x94\x7d\x66\x46\xa0\x70\xbf\xd9\x19\x2e\x03\xe1\x28\xec\x32\x99\x6c\x6b\x7b\xf6\xf7\x23\xa4\xb1\xad\xf6\xd4\x71\x4b\x6b\xae\x0e\xdc\x65\xd4\xaa\x1d\x64\x05\x95\x55\x42\x99\x2d\x50\x83\x67\x05\x15\xc7\x08\x1d\x08\xba\x40\x2a\x11\x0a\x60\xc6\x64\x95\x80\x2e\xae\xb5\x36\xf2\xd3\xbb\x8c\x93\x6b\x69\xe4\x1f\x33\x43\x61\x4d\x01\x8e\x75\x59\x92\x9d\x87\x59\x2d\xdc\x55\x42\x2b\xa1\xa2\x74\x74\x02\x15\xb8\x8c\x55\x34\xa1\x14\x51\x07\xdb\x91\xb1\x4c\x12\x03\xe0\xbc\xa7\xf1\x39\x7d\xca\x8c\x06\xf7\x85\x35\x81\x85\x26\x4a\x00\x3f\xe7\x35\x42\x68\x49\x98\xc4\x17\x28\xf2\x71\x3c\x87\x6e\x15\x5c\xb5\xde\x88\x1b\xee\x02\xb0\x30\x6a\x55\x9f\xa0\x29\x28\xb7\x21\x69\x1c\x5e\x47\xf9\x0e\x34\x42\x5a\x1b\x81\x45\x13\xf0\x65\x19\x80\x15\xf9\xb8\x20\x4d\xca\x1c\x04\x9a\x56\x4b\x02\x5e\x35\x2a\x4e\x62\x3b\xb2\xf5\x65\x70\x3f\xf2\x22\x46\x73\x82\x8a\x76\xac\xc9\x44\x1d\x5f\x4a\xcb\x95\xea\x45\x6b\xd0\xc8\xa0\xe1\x35\x0e\x01\xa5\x91\x1b\xb3\xb5\x72\xbc\xc3\x2c\x99\xdb\x35\x94\xb8\xb5\x5b\x3b\x46\x05\xb0\x31\xa8\x08\x0b\x67\x0c\x64\x1b\x50\x75\x0f\x92\xfa\x43\xb9\xc9\x65\x70\x50\x72\xf5\xec\xc6\x9b\x18\x98\x68\x0a\x40\x96\x33\x71\x7c\x5b\x2f\xf0\x1b\xcc\xd5\x52\x23\xfc\x40\x94\x47\x68\x77\xfd\xe7\xb8\xa1\x2c\x68\xa8\x1c\x98\xcc\x38\x5c\x10\x22\xad\xfa\xc5\x1c\xb7\xcb\x3a\xcd\x90\x4d\xfa\x37\x11\x40\x59\xac\xca\x79\x28\x4a\xbb\x8e\x36\x7c\x6e\x46\xa1\xcb\xdc\xe2\x52\x19\xa4\x11\x6c\xd5\x97\x20\xec\x1d\xab\x70\x42\xe0\xd6\x57\x53\xbb\x19\x67\x3a\x67\xb6\xbc\x39\xe4\x69\x5e\x5b\x42\x50\x6a\xfa\x96\xa9\xc7\x32\x18\x95\x15\x70\xd8\xa7\xff\xaa\xbc\x7a\xb0\x30\x66\x64\x56\x17\x15\x58\x36\x21\x39\x07\x13\x16\x9d\x80\x64\x47\x69\x1f\x11\x3a\x98\x9e\xb5\xc0\x25\xa4\x21\x60\x57\xa3\xb1\x48\x6a\x19\x9a\xcf\x43\xc1\x81\x02\x34\x84\x81\xf1\xc1\xbf\xe6\x2f\x78\x8a\xbe\x32\xd4\xac\x8e\xe5\x0f\xac\x79\x09\x1d\x5c\x92\xb8\x96\x75\xe4\x44\x66\xcc\xd2\xb5\x19\x61\x6b\x42\xca\x24\x59\xbc\x0a\x4a\xd2\xca\xb1\x63\x70\x5a\x68\x39\x4b\x5a\xa2\x08\x11\x79\xbf\x22\x8c\xa7\xe2\xc9\xea\x36\x1a\xc6\xa5\x41\x42\x09\x8b\xd7\x9a\x39\x42\x22\x1f\x14\xe1\x00\xb6\x20\xbe\x7c\xb4\xa3\x1c\x85\x8f\x10\x53\xb1\x3f\xd1\x75\x74\xd1\x68\x15\x09\x1d\xe8\xf8\x96\x2a\xb8\x2d\xde\x24\x52\x07\xc5\xa4\xbd\x8c\xbb\x47\x79\x55\x76\x07\x93\x36\x96\x0c\x04\x9b\x15\xe0\xa8\x7f\x30\x28\x66\x85\xf9\xc0\x50\xf1\x3f\xd1\x94\x48\x97\xe0\x8c\xb6\xb5\x42\xed\x45\xa0\xb5\x44\x68\xdc\x7b\xbf\x73\x56\xbe\xab\xa0\xca\x64\x66\xbd\xdb\x4b\x04\x45\x42\x61\xca\x5c\x64\xb0\xc2\x61\x48\x39\x7e\xeb\xe5\xcd\xac\x92\xc4\x5e\x07\x62\x0c\x21\x71\x1a\xfa\x08\x60\x82\x93\x7d\xba\x64\xe5\x51\x53\x7c\x40\x73\x44\xd6\x48\xbb\xe7\xa7\xed\xf7\xac\x12\x4a\xaa\x55\xec\x6a\xfa\xb7\xa8\xff\x99\x18\xcb\xe6\x6a\x57\xe6\xb3\x98\x1a\x37\x40\xe4\x0e\xe3\x01\xcc\x05\xa9\x11\xce\xaa\x18\x91\x12\x28\x1a\x23\x44\xab\x87\x94\x41\xf9\xb8\x81\x7a\x70\x7b\x58\x7d\xba\x1b\xb9\x0e\x5a\x0f\x56\x90\xc0\x51\x6b\x69\xeb\x9a\xc3\xab\xd7\xab\x10\xd2\x1d\xc7\x24\x26\xa4\xa4\xa0\xf9\x49\x8a\x08\x9a\x3b\xd7\xe0\x3c\x6f\xe5\x57\x54\xfb\x88\xb5\x51\xba\x85\x7a\x24\xd6\xbc\x02\xec\xc1\x13\xc4\x59\xaa\xbc\xca\x3e\x61\x5c\x16\xf2\xa0\xb3\xff\xd7\x88\xfa\x6c\x88\xb5\xbb\x73\x70\xaa\xa4\x9e\xaa\x4c\xc9\xba\xa1\xc0\x25\xb8\x2e\xc9\x92\xba\xbb\x22\x9e\xf0\x0a\x7f\x81\x09\x06\x12\x75\x7c\x58\xa4\x93\x3c\x0f\x54\x37\xc2\xb2\x21\x51\x00\x3b\x50\x1b\xf5\x12\x94\x3a\x6a\x68\xfc\xaa\xb3\xcc\x3e\xc1\xb5\x1a\x82\x3c\x57\xa6\x95\x92\x4f\xf3\x79\xb8\x31\x24\xd3\x18\x3c\xe8\xfc\x07\xd2\x2c\x9b\x04\x01\x04\x96\xc4\x60\x14\x68\x7e\xbb\x23\xb7\x56\xf0\x28\xaf\x98\x08\xe3\xd1\x08\x88\x40\xa0\x54\xd2\x7f\xf3\x53\x6b\x59\x27\x34\xf3\xdb\x71\x41\x56\x0a\x99\xbb\x72\xd5\x22\x24\xed\x7a\x7c\x20\x53\x06\xa1\x3b\xca\xd4\x35\xb2\xf3\x33\x65\x9c\xf0\x70\x76\x0a\x58\x8c\x50\xb5\x8d\x90\x3c\x91\xe1\x45\x38\x3b\x6d\x04\x6b\x51\x03\xd3\x96\x04\x61\xa3\xe4\xc1\x57\x37\xd2\x94\xf8\x8a\x32\x6d\x59\x22\xbd\x86\x8f\xd4\x12\x9d\xa3\xe4\x6c\x3b\x53\x94\x0a\x12\x03\x12\xcc\x23\x86\x72\xa7\xe1\x01\x51\xe4\x69\x5b\xa6\x65\x97\xe1\xc9\xce\x0e\x9b\x59\x78\x3c\x3d\x3a\xc7\x80\xb5\xf6\x3a\xf1\x17\x9c\x04\x76\x2e\xc3\xe3\xb6\x6d\x15\x69\xf2\xf9\xc0\xc8\x8c\x29\x59\x18\x56\x34\xbc\xc7\x20\x94\xa1\xd8\x68\x55\xda\x06\x6b\x2a\x40\xc5\xb4\x62\xc6\xa4\x37\x82\xcd\x1c\x9b\xf7\x01\x55\x34\xd0\x95\xf6\xa9\x56\x9e\xd1\xa6\x88\x21\xa5\x44\xd1\xb8\x96\xd4\xcb\x01\x22\x1a\x09\xf7\xc8\x74\x39\x74\x06\x05\xc3\xca\x1c\xb7\x96\x39\x3d\x3d\x26\x4e\x20\xd3\xcb\x59\x32\x8f\x07\x18\x52\x1c\x48\x59\xa4\x29\x08\x52\x39\x10\x6e\x57\x00\x6d\xa3\xb9\xb7\x27\x58\xce\x5a\x61\xc1\x21\x21\xb1\xb0\x3d\xc7\x68\x9d\x7a\x58\x0d\x75\x73\xb5\xac\x31\xb7\x83\x59\x14\x2a\x72\xc0\xfb\xe1\xb4\x12\x12\xba\x4a\xb7\x2c\xfd\xc4\xac\xff\xb0\x95\x87\x99\x98\xbe\x3c\xaf\x4a\xec\x11\xca\x8b\x75\x81\x99\x4e\x03\xa9\x48\xf6\xb5\x63\x48\x10\x6c\xeb\x56\x89\xb9\xf2\x4e\xfb\x52\x70\x91\xe2\x02\x23\x10\x0b\xcc\x9b\x40\x55\xc0\x55\x8d\x40\x42\x37\x9a\x16\x2a\x14\x38\x7c\x09\xcd\xb5\xe7\x6c\x4d\x93\xbf\x9c\xfb\x20\x8b\x52\xab\xee\x44\xa7\x53\xd0\xbf\xef\xbc\x49\xba\xb0\xcb\x1f\x85\x2c\x59\x71\x85\xb0\x15\x3e\x09\x1c\x44\x91\xe7\x5c\xdb\xc8\x95\xfd\x5b\x22\xb7\x2b\xb5\x5a\x41\x2b\x26\xac\x27\x1f\x53\xc1\x69\xd3\x3c\xb3\x87\x75\xf9\xe0\x57\xb3\x10\x49\x95\x77\x72\xf0\x14\x99\xa9\x72\xcb\x7a\xc7\x1f\x00\x62\x24\xd7\xa1\x32\x37\xda\x38\xa4\x32\xc5\x00\x6a\x4b\xd2\x86\x78\x9c\xc0\xac\x87\xf7\x3f\x4a\x62\x5b\x99\x39\x84\x94\x3c\x41\x23\x54\x17\x5c\x9c\x71\x6c\x22\xaf\xc8\x53\x1f\x3d\x6c\xc8\x02\xe5\x8e\x0d\x48\x10\xc7\x76\xa9\x4b\xf1\xab\xd2\x71\xab\xfd\xe8\x99\x1e\xe2\x2c\x0a\xc6\x34\x19\xe3\x39\x72\xb7\x0f\x19\x95\x9f\xc4\x67\x0d\x90\x96\x26\xc6\xca\xa9\xee\xf8\xcc\xd1\x73\x5a\x3e\xba\x8a\xa6\x37\x57\xf3\x3a\x18\xc8\x50\x63\xaa\xdb\x5e\x8c\x4a\xab\x52\xb5\xba\x73\x66\x39\xfd\xc5\x05\x48\x85\x6f\x7c\x15\x0d\xe7\xf5\x13\x76\x70\x03\x3e\x67\x3c\xf6\xb1\x36\x71\x56\x82\x38\x79\x8c\xdd\xdb\x0a\x4e\x3c\x00\xf3\xa3\x08\xdc\xb4\x7f\x82\xf9\x24\x27\x80\x68\x32\x78\x04\xe3\x38\x23\x08\xb3\x21\x67\xc0\xc4\x34\x35\xb8\x11\x90\x48\x6f\xcb\x6b\x66\x07\x22\x42\x6b\x74\xe9\xa7\x2a\xc2\x5c\x52\x2e\xf9\x2b\xd2\x56\x5d\x3c\x1a\x05\x9b\x20\x11\xed\xe3\x34\x5c\x29\x7d\xc0\x55\x12\xb6\xf7\x4d\x0b\x1a\x6b\xc6\x35\xb8\x4f\x92\x85\x27\xaa\x04\x90\x62\x1a\x78\xb0\x67\xc9\xf8\xb7\x1d\x89\xb8\x1e\x35\x3b\xcb\x39\x98\x43\xd2\xb2\x1b\x96\x1b\xf3\xf5\x5f\xaa\x04\x79\xd4\x62\x81\xca\xfc\x68\x4d\x85\xc7\xa1\x3b\x13\x4b\x28\x6d\xc2\x39\x75\x7d\x93\xa0\x00\x10\xcf\x2f\x1c\x2b\xaf\x93\xab\x73\xf2\xc7\x65\x25\x18\xd7\x94\x5c\x1d\x29\xb0\xb1\xa2\x14\x75\x34\xa5\x1d\x25\x08\x8c\xb5\x52\x5c\x9a\xa1\x16\xe6\x3b\xe2\xe1\xc2\x5b\xc7\xb0\xec\x13\x80\xcd\xc2\x14\x89\xd7\xa9\x03\xc7\x0b\xf0\x56\x4b\x98\xc5\x65\xdc\x80\xc8\x93\x1b\x2e\x50\x98\x2c\x3d\xdc\x2f\x26\xd6\x25\x54\x17\x92\x28\x66\x90\x48\x9a\x51\xaa\x9c\x39\xf5\x9b\xae\x55\x54\x26\x95\x67\x13\x5e\xac\x6f\xd3\xc8\xbb\xca\xf6\x11\x68\x99\xc2\xd7\xc9\x65\x37\x78\x58\x32\x54\xa2\x8c\xa3\xa9\x4c\xa9\xb2\xdd\xd3\xc1\x25\xd6\x12\x98\x64\x2a\x45\x06\x88\x3d\x79\xbf\x07\xc2\xa5\x38\x73\x1b\x05\xf3\x3e\xd1\x8b\xcf\x45\x3b\x30\x69\x5b\x30\x8a\x31\x58\x82\xe1\xca\xd4\x97\x3a\xf2\xbc\xa2\xdc\x8b\x22\xde\xb2\x1a\x15\xb3\x4c\x5d\x61\x32\xdd\x79\xb1\x49\x15\x58\x52\x78\x9a\x7f\x34\x5f\xfe\x68\xab\x0b\x64\xc4\x42\x91\xa8\x84\x6b\x78\xab\x00\x38\xb5\x2b\x56\x68\x78\x42\xae\x56\x77\xd2\xc2\x4a\x7d\x68\x2f\xbd\x4c\x57\x2b\xbc\x21\x5f\x6a\x8d\xcc\xa3\xcb\x67\x57\x3a\x3d\x60\x5c\x34\xc3\x12\x7e\xca\xa0\x3c\xb5\xb8\xa2\xb0\x4e\xb8\xf6\x69\xa8\x64\xa6\x7c\x25\xc8\xdb\xe0\x49\x36\xb5\x3f\xa4\x03\x58\x7c\xfa\x5c\xdd\xf6\xa0\xbf\xfb\x45\xa5\x45\x01\x05\x36\x2a\x75\x12\x41\x75\xe8\x8b\x02\xa5\x52\x58\x8b\xcb\xe2\x80\x2f\x1d\x22\x07\xf3\x29\x36\x61\x3c\x0c\x4a\x9b\x40\x33\xb2\xcc\xf7\x23\x20\x1e\x94\xb5\x1c\xc4\x4d\xfd\xc8\xcc\xaf\xd2\x0e\xc7\xab\x17\x60\x20\xb6\x37\x85\xc0\x7f\x62\x95\x6a\x43\x2f\x98\x8a\x06\x17\xf1\x6c\x47\xe9\x8f\xb3\x22\x41\x27\x01\x0d\x7e\x1b\xb1\xc8\xfb\x43\xe9\xc2\x78\x45\x3b\x0a\xd7\xf1\x01\x8e\xb4\xa7\x86\xeb\x37\x8e\xa7\xba\x17\x92\x12\x00\xfc\xbf\xdf\x7c\xa4\xe3\x2c\xa2\x51\x35\x7f\x54\xb0\x0d\xea\xf2\xbf\xe7\x9a\x5b\x71\xbb\x20\xc7\xbb\xa6\x31\x89\xc6\x81\xb5\x81\x61\x2c\xb3\xa9\x21\xce\x36\xc0\x65\xab\xb3\x6a\x80\x89\x66\xa2\x62\xcc\xbc\x55\xa4\x50\x19\xc6\x8d\x76\x55\x43\x25\xaf\x68\x42\x6c\x7b\x80\xc9\x89\x57\x5e\x62\xc4\x69\x82\x20\x6c\xef\x84\x74\xf3\xbc\x1f\xc0\xbb\x68\xe4\x98\x4a\xc5\xbc\x21\x1e\xdd\xb3\x42\xee\x4b\x45\x78\x72\xcb\xd0\x63\xba\x42\xe4\xcf\x13\xfe\xd0\x96\x1c\xda\xb3\x84\x5f\xf2\xbd\x21\x39\x5d\x73\xf9\xb8\x25\x97\xfa\x32\x00\x05\xf3\x37\x66\x04\x66\x41\xa0\xc3\xe0\xf5\xf8\xfd\x51\xb2\xbd\x9b\x0c\x23\xb5\x4c\xbc\x8b\xb2\x2f\x52\x47\xbd\x25\x5e\x74\x08\x0c\xc5\xfb\x6a\x4b\x06\x26\xd1\x11\xb6\x48\x5d\x60\x81\x49\x7d\x2d\x0a\x2c\x5c\xcd\xd4\x35\xd0\x73\x5a";
		let public = b"\x3f\xd1\x75\x74\xd1\x68\x15\x09\x1d\xe8\xf8\x96\x2a\xb8\x2d\xde\x24\x52\x07\xc5\xa4\xbd\x8c\xbb\x47\x79\x55\x76\x07\x93\x36\x96\x0c\x04\x9b\x15\xe0\xa8\x7f\x30\x28\x66\x85\xf9\xc0\x50\xf1\x3f\xd1\x94\x48\x97\xe0\x8c\xb6\xb5\x42\xed\x45\xa0\xb5\x44\x68\xdc\x7b\xbf\x73\x56\xbe\xab\xa0\xca\x64\x66\xbd\xdb\x4b\x04\x45\x42\x61\xca\x5c\x64\xb0\xc2\x61\x48\x39\x7e\xeb\xe5\xcd\xac\x92\xc4\x5e\x07\x62\x0c\x21\x71\x1a\xfa\x08\x60\x82\x93\x7d\xba\x64\xe5\x51\x53\x7c\x40\x73\x44\xd6\x48\xbb\xe7\xa7\xed\xf7\xac\x12\x4a\xaa\x55\xec\x6a\xfa\xb7\xa8\xff\x99\x18\xcb\xe6\x6a\x57\xe6\xb3\x98\x1a\x37\x40\xe4\x0e\xe3\x01\xcc\x05\xa9\x11\xce\xaa\x18\x91\x12\x28\x1a\x23\x44\xab\x87\x94\x41\xf9\xb8\x81\x7a\x70\x7b\x58\x7d\xba\x1b\xb9\x0e\x5a\x0f\x56\x90\xc0\x51\x6b\x69\xeb\x9a\xc3\xab\xd7\xab\x10\xd2\x1d\xc7\x24\x26\xa4\xa4\xa0\xf9\x49\x8a\x08\x9a\x3b\xd7\xe0\x3c\x6f\xe5\x57\x54\xfb\x88\xb5\x51\xba\x85\x7a\x24\xd6\xbc\x02\xec\xc1\x13\xc4\x59\xaa\xbc\xca\x3e\x61\x5c\x16\xf2\xa0\xb3\xff\xd7\x88\xfa\x6c\x88\xb5\xbb\x73\x70\xaa\xa4\x9e\xaa\x4c\xc9\xba\xa1\xc0\x25\xb8\x2e\xc9\x92\xba\xbb\x22\x9e\xf0\x0a\x7f\x81\x09\x06\x12\x75\x7c\x58\xa4\x93\x3c\x0f\x54\x37\xc2\xb2\x21\x51\x00\x3b\x50\x1b\xf5\x12\x94\x3a\x6a\x68\xfc\xaa\xb3\xcc\x3e\xc1\xb5\x1a\x82\x3c\x57\xa6\x95\x92\x4f\xf3\x79\xb8\x31\x24\xd3\x18\x3c\xe8\xfc\x07\xd2\x2c\x9b\x04\x01\x04\x96\xc4\x60\x14\x68\x7e\xbb\x23\xb7\x56\xf0\x28\xaf\x98\x08\xe3\xd1\x08\x88\x40\xa0\x54\xd2\x7f\xf3\x53\x6b\x59\x27\x34\xf3\xdb\x71\x41\x56\x0a\x99\xbb\x72\xd5\x22\x24\xed\x7a\x7c\x20\x53\x06\xa1\x3b\xca\xd4\x35\xb2\xf3\x33\x65\x9c\xf0\x70\x76\x0a\x58\x8c\x50\xb5\x8d\x90\x3c\x91\xe1\x45\x38\x3b\x6d\x04\x6b\x51\x03\xd3\x96\x04\x61\xa3\xe4\xc1\x57\x37\xd2\x94\xf8\x8a\x32\x6d\x59\x22\xbd\x86\x8f\xd4\x12\x9d\xa3\xe4\x6c\x3b\x53\x94\x0a\x12\x03\x12\xcc\x23\x86\x72\xa7\xe1\x01\x51\xe4\x69\x5b\xa6\x65\x97\xe1\xc9\xce\x0e\x9b\x59\x78\x3c\x3d\x3a\xc7\x80\xb5\xf6\x3a\xf1\x17\x9c\x04\x76\x2e\xc3\xe3\xb6\x6d\x15\x69\xf2\xf9\xc0\xc8\x8c\x29\x59\x18\x56\x34\xbc\xc7\x20\x94\xa1\xd8\x68\x55\xda\x06\x6b\x2a\x40\xc5\xb4\x62\xc6\xa4\x37\x82\xcd\x1c\x9b\xf7\x01\x55\x34\xd0\x95\xf6\xa9\x56\x9e\xd1\xa6\x88\x21\xa5\x44\xd1\xb8\x96\xd4\xcb\x01\x22\x1a\x09\xf7\xc8\x74\x39\x74\x06\x05\xc3\xca\x1c\xb7\x96\x39\x3d\x3d\x26\x4e\x20\xd3\xcb\x59\x32\x8f\x07\x18\x52\x1c\x48\x59\xa4\x29\x08\x52\x39\x10\x6e\x57\x00\x6d\xa3\xb9\xb7\x27\x58\xce\x5a\x61\xc1\x21\x21\xb1\xb0\x3d\xc7\x68\x9d\x7a\x58\x0d\x75\x73\xb5\xac\x31\xb7\x83\x59\x14\x2a\x72\xc0\xfb\xe1\xb4\x12\x12\xba\x4a\xb7\x2c\xfd\xc4\xac\xff\xb0\x95\x87\x99\x98\xbe\x3c\xaf\x4a\xec\x11\xca\x8b\x75\x81\x99\x4e\x03\xa9\x48\xf6\xb5\x63\x48\x10\x6c\xeb\x56\x89\xb9\xf2\x4e\xfb\x52\x70\x91\xe2\x02\x23\x10\x0b\xcc\x9b\x40\x55\xc0\x55\x8d\x40\x42\x37\x9a\x16\x2a\x14\x38\x7c\x09\xcd\xb5\xe7\x6c\x4d\x93\xbf\x9c\xfb\x20\x8b\x52\xab\xee\x44\xa7\x53\xd0\xbf\xef\xbc\x49\xba\xb0\xcb\x1f\x85\x2c\x59\x71\x85\xb0\x15\x3e\x09\x1c\x44\x91\xe7\x5c\xdb\xc8\x95\xfd\x5b\x22\xb7\x2b\xb5\x5a\x41\x2b\x26\xac\x27\x1f\x53\xc1\x69\xd3\x3c\xb3\x87\x75\xf9\xe0\x57\xb3\x10\x49\x95\x77\x72\xf0\x14\x99\xa9\x72\xcb\x7a\xc7\x1f\x00\x62\x24\xd7\xa1\x32\x37\xda\x38\xa4\x32\xc5\x00\x6a\x4b\xd2\x86\x78\x9c\xc0\xac\x87\xf7\x3f\x4a\x62\x5b\x99\x39\x84\x94\x3c\x41\x23\x54\x17\x5c\x9c\x71\x6c\x22\xaf\xc8\x53\x1f\x3d\x6c\xc8\x02\xe5\x8e\x0d\x48\x10\xc7\x76\xa9\x4b\xf1\xab\xd2\x71\xab\xfd\xe8\x99\x1e\xe2\x2c\x0a\xc6\x34\x19\xe3\x39\x72\xb7\x0f\x19\x95\x9f\xc4\x67\x0d\x90\x96\x26\xc6\xca\xa9\xee\xf8\xcc\xd1\x73\x5a\x3e\xba\x8a\xa6\x37\x57\xf3\x3a\x18\xc8\x50\x63\xaa\xdb\x5e\x8c\x4a\xab\x52\xb5\xba\x73\x66\x39\xfd\xc5\x05\x48\x85\x6f\x7c\x15\x0d\xe7\xf5\x13\x76\x70\x03\x3e\x67\x3c\xf6\xb1\x36\x71\x56\x82\x38\x79\x8c\xdd\xdb\x0a\x4e\x3c\x00\xf3\xa3\x08\xdc\xb4\x7f\x82\xf9\x24\x27\x80\x68\x32\x78\x04\xe3\x38\x23\x08\xb3\x21\x67\xc0\xc4\x34\x35\xb8\x11\x90\x48\x6f\xcb\x6b\x66\x07\x22\x42\x6b\x74\xe9\xa7\x2a\xc2\x5c\x52\x2e\xf9\x2b\xd2\x56\x5d\x3c\x1a\x05\x9b\x20\x11\xed\xe3\x34\x5c\x29\x7d\xc0\x55\x12\xb6\xf7\x4d\x0b\x1a\x6b\xc6\x35\xb8\x4f\x92\x85\x27\xaa\x04\x90\x62\x1a\x78\xb0\x67\xc9\xf8\xb7\x1d\x89\xb8\x1e\x35\x3b\xcb\x39\x98\x43\xd2\xb2\x1b\x96\x1b\xf3\xf5\x5f\xaa\x04\x79\xd4\x62\x81\xca\xfc\x68\x4d\x85\xc7\xa1\x3b\x13\x4b\x28\x6d\xc2\x39\x75\x7d\x93\xa0\x00\x10\xcf\x2f\x1c\x2b\xaf\x93\xab\x73\xf2\xc7\x65\x25\x18\xd7\x94\x5c\x1d\x29\xb0\xb1\xa2\x14\x75\x34\xa5\x1d\x25\x08\x8c\xb5\x52\x5c\x9a\xa1\x16\xe6\x3b\xe2\xe1\xc2\x5b\xc7\xb0\xec\x13\x80\xcd\xc2\x14\x89\xd7\xa9\x03\xc7\x0b\xf0\x56\x4b\x98\xc5\x65\xdc\x80\xc8\x93\x1b\x2e\x50\x98\x2c\x3d\xdc\x2f\x26\xd6\x25\x54\x17\x92\x28\x66\x90\x48\x9a\x51\xaa\x9c\x39\xf5\x9b\xae\x55\x54\x26\x95\x67\x13\x5e\xac\x6f\xd3\xc8\xbb\xca\xf6\x11\x68\x99\xc2\xd7\xc9\x65\x37\x78\x58\x32\x54\xa2\x8c\xa3\xa9\x4c\xa9\xb2\xdd\xd3\xc1\x25\xd6\x12\x98\x64\x2a\x45\x06\x88\x3d\x79\xbf\x07\xc2\xa5\x38\x73\x1b\x05\xf3\x3e\xd1\x8b\xcf\x45\x3b\x30\x69\x5b\x30\x8a\x31\x58\x82\xe1\xca\xd4\x97\x3a\xf2\xbc\xa2\xdc\x8b\x22\xde\xb2\x1a\x15\xb3\x4c\x5d\x61\x32\xdd\x79\xb1\x49\x15\x58\x52\x78\x9a\x7f\x34\x5f\xfe\x68\xab\x0b\x64\xc4\x42\x91\xa8\x84\x6b\x78\xab\x00\x38\xb5\x2b\x56\x68\x78\x42\xae\x56\x77\xd2\xc2\x4a\x7d\x68\x2f\xbd\x4c\x57\x2b\xbc\x21\x5f\x6a\x8d\xcc\xa3\xcb\x67\x57\x3a\x3d\x60\x5c\x34\xc3\x12\x7e\xca\xa0\x3c\xb5\xb8\xa2\xb0\x4e\xb8\xf6\x69\xa8\x64\xa6\x7c\x25\xc8\xdb\xe0\x49\x36\xb5\x3f\xa4\x03\x58\x7c\xfa\x5c\xdd\xf6\xa0\xbf\xfb\x45\xa5\x45\x01\x05\x36\x2a\x75\x12\x41\x75\xe8\x8b\x02\xa5\x52\x58\x8b\xcb\xe2\x80\x2f\x1d\x22\x07\xf3\x29\x36\x61\x3c\x0c\x4a\x9b\x40\x33\xb2\xcc\xf7\x23\x20\x1e\x94\xb5\x1c\xc4\x4d\xfd\xc8\xcc\xaf\xd2\x0e\xc7\xab\x17\x60\x20\xb6\x37\x85\xc0\x7f\x62\x95\x6a\x43\x2f\x98\x8a\x06\x17\xf1\x6c\x47\xe9\x8f\xb3\x22\x41\x27\x01\x0d\x7e\x1b\xb1\xc8\xfb\x43\xe9\xc2\x78\x45\x3b\x0a\xd7\xf1\x01\x8e\xb4\xa7\x86\xeb\x37\x8e\xa7\xba\x17\x92\x12\x00\xfc\xbf\xdf\x7c\xa4\xe3\x2c\xa2\x51\x35\x7f\x54\xb0\x0d\xea\xf2\xbf\xe7\x9a\x5b\x71\xbb\x20\xc7\xbb\xa6\x31\x89\xc6\x81\xb5\x81\x61\x2c\xb3\xa9\x21\xce\x36\xc0\x65\xab\xb3\x6a\x80\x89\x66\xa2\x62\xcc\xbc\x55\xa4\x50\x19\xc6\x8d\x76\x55\x43\x25\xaf\x68\x42\x6c\x7b\x80\xc9\x89\x57\x5e\x62\xc4\x69\x82\x20\x6c\xef\x84\x74\xf3\xbc\x1f\xc0\xbb\x68\xe4\x98\x4a\xc5\xbc\x21\x1e\xdd\xb3\x42\xee\x4b\x45\x78\x72\xcb\xd0\x63\xba\x42\xe4\xcf\x13\xfe\xd0\x96\x1c\xda\xb3\x84\x5f\xf2\xbd\x21\x39\x5d\x73\xf9";

		KeyPairKyber::new(private.into(), public.into())
	}

	fn bob_kyber_prekey() -> KeyPairKyber {
		let private = b"\x4f\x6c\x9f\x21\x42\x3a\x2e\xb7\x88\x1b\xd7\xa0\x12\xfb\x2d\xae\x92\x66\xb9\xe3\xc3\xde\x60\x71\x40\x52\x73\x88\xe1\x95\xb4\x67\x04\x42\x83\xca\xab\xcc\x93\xb1\x02\x48\x64\x45\x26\x82\x44\xbf\x24\x38\x73\xda\xc7\xca\xc3\x06\x82\x9e\x59\x0d\x08\x53\xac\x1a\x62\x1f\xf2\x84\x32\x54\xd9\xcd\xa8\x58\x46\x61\x87\xc6\x94\xbc\xbf\x9b\x79\x6e\xcb\x26\xb2\xc7\xc1\x97\xa4\xe2\x8f\xea\x11\x8e\x63\xb7\x56\xe0\x59\x0d\x9c\xb9\xa2\x11\x66\x51\x66\x5b\x92\x7f\x05\xc8\x43\x94\x4f\x5c\xa2\xbd\x8e\x65\x35\xf7\x35\x08\x07\xa2\x6c\x5d\x41\x9a\xd3\x10\x6c\x6a\xfc\x9a\x70\xe3\x9c\x89\x26\xa8\x0e\x02\x95\xa1\xaa\x6b\x35\xb5\x35\x09\xa6\x04\x65\x88\x7e\x4c\xfc\x70\xd1\x82\xae\xc0\xcb\x81\xea\xc8\xc4\x3b\x4b\xb6\x2b\xc6\x7c\x2c\x24\x54\x7d\x8c\x9a\xec\xa9\x9b\xd6\x64\x7d\xb3\x21\xc8\x4e\xcc\xa3\x18\x02\x01\xb7\xc9\x60\xeb\x47\x98\x6c\x2b\x44\x1e\x46\x79\xff\xe8\x76\x8b\x05\x7f\x94\x83\x1f\xe2\x8b\x24\x97\xac\x16\x0f\xd6\x18\x54\xe6\x62\xed\x36\x2f\x33\x5c\xb1\xb5\xa7\x72\xd6\xb3\x45\xe2\x3c\x83\xd7\xab\x93\x4a\x49\x25\x82\x87\x57\xee\x78\x71\x02\x89\xc3\x4b\xaa\x69\x38\x39\x88\x63\xd3\x46\x1c\xf4\x18\x70\xd5\x8a\xdd\x1a\x82\xbd\x28\x79\x1d\x13\x31\xc6\x37\xc5\x99\xcb\xc4\xb3\xd4\x4b\xcf\x74\x7c\xfe\x70\x80\x6c\x1a\x17\x61\x6b\x5e\xbf\xcb\xc2\xcb\x78\x25\xe6\xf5\x74\xe8\x75\x63\x1a\xb2\x90\x85\xa1\x25\xcc\xd0\x64\x0b\x22\xc1\xa6\x70\xb9\x2c\x92\x87\x26\xf8\x74\x13\x1b\x50\xd5\x50\x78\xc9\xe4\x7c\x05\xaa\x53\x41\x58\x74\xf9\x45\x6a\x40\x95\x1e\xeb\x37\xc4\xd4\x8a\x7a\x9f\x41\x5c\xa3\x6a\x13\x29\xda\xab\xbb\x06\xd0\xa7\xa9\xb4\x60\x60\xcf\x1a\xd6\xbc\x0a\x04\xb9\xe4\x14\x5a\x4f\x5a\x27\x48\x86\x6f\xe0\xe1\x10\x6b\x42\x10\x7e\xe2\x99\x90\x70\x25\xcb\x27\x6a\xce\x13\x44\x11\x84\x50\x0c\xac\x28\x3e\xac\x98\x4c\x81\xc6\xf8\xa3\xb1\x92\x41\xa2\xcb\x25\xb5\x8e\xab\x5f\xa9\x38\xcd\x17\x39\xc6\xac\x71\x6a\x60\x26\x44\x14\x4a\x00\xad\xdb\x3f\x4b\x31\x90\x52\xe7\x2b\xbc\xd7\x9b\xeb\x88\x6e\xd7\xb4\xa7\x9b\xc1\x2a\xe8\xf1\x2a\x82\x33\xc5\x1c\xf0\xb0\xcd\x83\x91\x0d\x9c\x68\x48\xd8\xa3\x24\x54\x91\x0a\xb6\x04\x65\x77\x18\x97\x4b\xbd\xb9\x06\xa9\x74\x0c\x63\xf2\xe8\x33\x3e\xb8\x61\x99\x28\x42\x1e\x0b\xa2\xab\xb2\x16\x8c\xe1\x9e\x35\x44\x9d\x9a\x94\x7f\xd2\x0a\x36\xda\x91\x2c\x58\xe3\xca\xa6\xc5\x67\xc5\x77\x19\x69\x53\xbf\x85\x10\x25\x52\x67\xad\x77\x4b\xac\xf4\x39\x1a\x9e\xc3\xc8\x96\xb0\x99\x27\x4a\xb1\xb3\xd1\x20\x02\x30\xbb\x5b\x63\x42\x89\x81\x76\x33\xcb\x45\xea\x67\x31\x96\x19\x48\x1b\x02\xc9\x25\x6a\x8b\x07\x0c\xa0\x1b\x6b\xc1\xea\x83\x9f\xc2\x85\x58\x1e\xf0\x80\xe4\xd5\x9b\x91\x9a\xa2\x75\x40\x5d\x13\xc9\xb3\xe5\x5b\xa6\x65\xa4\x9b\xa2\xd1\x55\xad\xca\x67\xa9\xc5\xbf\x58\xf3\x20\xb6\x07\x35\x8d\xf8\x55\xa7\x27\x31\xd4\x49\xa2\x67\x50\x19\x4a\xc2\x9c\xcc\x74\x0d\xb5\x0c\x2b\x52\x48\x5f\xe3\x34\x86\x31\x2c\x34\x70\xb8\x81\x4f\x8b\x8e\x9e\x40\x60\x8a\x27\x59\xf3\x18\x5d\x0c\x53\x4d\x93\xe0\xcd\x8e\x23\x85\x34\x20\x0b\xe8\x14\xc1\xe6\xd4\x70\x86\x17\x58\xdd\x90\x70\x18\xf6\x04\x0e\xf6\xa7\xf5\x76\xb8\x31\x03\x18\x3f\xa8\xc7\x58\x00\x86\x74\xa8\x1a\x03\x25\x96\x97\x77\x92\xce\xb0\x45\x30\x15\x27\xd2\xd5\xbb\x86\xd7\x2a\x74\x40\x9a\xd5\x82\x06\x9a\xa6\xb6\xc1\x10\x82\x13\x72\x14\x08\x25\x1a\xfd\xc1\x22\x8f\x45\x0e\xf4\x61\x97\x09\x70\x09\xdb\x0a\x6a\x88\x29\xaf\x0a\x54\x0a\x20\x06\x02\xfc\xf2\xb0\x44\x6b\xcc\x64\xa1\x1b\xb4\xa2\x1e\xc8\x76\xcc\x93\x85\x2b\x1a\x08\xb7\x88\x71\x4a\x9e\x10\x9e\x05\x88\x4f\x6c\xa5\xa7\xdd\xe9\xc4\x09\xa5\x42\xf9\xe0\x19\xb8\x59\x5e\xcd\x28\x02\x49\x52\xcd\xc7\x52\xb2\xe6\x27\x45\x8f\x45\x80\xde\xc5\xa4\xc0\xdc\x00\x6d\x72\x2a\xb9\x45\x5d\x80\x2c\x05\x55\xd0\xb1\xaf\xa1\x1e\xf0\xc0\x66\x7d\x0a\x37\x31\xc4\x3b\x94\x21\x34\x86\x93\xa4\x42\x30\x75\xfe\x01\xc7\xb3\x5b\x0a\xec\xa1\x3c\x86\x60\x44\xca\x77\x27\x70\x38\xc4\x95\xfc\x23\xe4\x0a\x99\x96\x7a\x2d\x11\xfc\x4e\xc1\xf1\xa4\xa7\x96\x66\xb2\x60\x9b\x65\x88\xa0\x2e\x1c\x2d\x6a\x38\x06\x5c\xb0\xad\x76\x9a\x61\xd9\x06\x0d\x7d\xc9\x72\x18\xf6\xa8\x56\x2a\x0a\x11\x39\x69\x74\xc8\x0c\x54\x71\x85\x54\x67\x94\xfa\x37\x13\x88\xa4\xcc\xd9\x9c\x8b\x0b\x60\x9a\x3d\x50\xb4\x68\x35\xbb\x82\x5b\x02\xe0\x51\xbd\x29\xf9\x26\x92\x2b\xc9\xa0\xb0\x8d\xa2\x5b\x36\x99\xd1\xc8\x35\x20\x21\x60\x09\x0c\xd2\xa7\xc2\x68\x15\x24\xc8\xbb\xb2\x81\xcc\xab\x0c\x7c\x33\x53\xb6\x9c\xfd\x9a\x3d\xb9\x70\x3f\x0f\x78\x15\x40\x4b\xae\x27\xdb\x30\xfa\x11\x02\xfe\x44\x5f\xd7\x63\x82\xe3\xe1\xb0\x75\x7c\x55\x8f\x02\x13\xfe\xe7\xab\x1c\x81\x08\x7d\xe5\x42\x5c\x44\xc0\x2b\x62\xca\x4a\x0b\x28\x5d\x54\x9f\x9f\xac\xb0\xad\x33\x7c\x44\x15\x9e\x4d\x69\x21\x81\x98\x07\x04\x2b\xaa\x21\x34\x51\x6c\x22\xb9\x24\x60\x90\x8c\x06\x25\xff\xcb\xce\x45\xc0\x6f\x1b\xd8\xb2\x0f\xac\x2f\xdf\x76\xa8\x34\x20\x1d\x85\x98\xc0\xe9\x19\x5e\x35\xb4\x82\xb1\x9a\x14\xeb\xc9\x2b\x85\xda\x36\x0c\xe4\xad\x9b\x31\xbe\xad\x38\x55\x54\x44\xa4\xb7\x6a\x1b\x89\x43\x04\x9b\xcc\x23\x79\x8c\x7e\x77\x29\x41\x24\xda\x88\x45\x08\xb3\x3f\x4a\xae\x63\x73\xc7\xe5\x44\x20\xb3\xb2\x50\x56\xf8\xca\xe5\x86\x2f\xfd\x10\x76\xbb\xdb\xa0\x6f\x38\xaa\xe6\x51\xbe\xd7\x22\x6f\xc2\x76\x60\x88\xbb\x0b\x32\x89\xb3\x8e\xfb\x3c\xa9\x13\x98\xfa\x10\x9c\xee\xf2\xce\x5b\x1b\x5e\x1a\x68\xa9\x86\x36\x1e\x28\xb4\x7c\xea\xd0\xc3\x0f\xe0\x86\xa5\x07\xbb\x6f\x93\x65\xdf\x95\x57\x94\x8c\xaa\x21\x94\x2f\x44\xb9\x83\xbe\x87\x3f\x32\xe5\x12\x37\x56\x03\x27\xa5\xb7\x06\x6c\x0c\x66\x82\x25\x0c\xdc\xcd\x86\xbb\xc0\xb6\x08\x4c\x37\x67\x4c\xa8\x56\x0e\xb2\x12\x41\x7f\x51\xae\xc7\xf0\x4c\x51\x9a\x4c\xa4\xb7\x82\xab\x25\x5b\xa1\xa4\x19\x71\xf6\x27\x5d\xf4\xa7\xa2\x6c\x81\x89\x42\x95\xd4\x60\x75\xea\xf1\x85\x41\x58\x4d\xf6\x09\x63\x94\xf0\x19\x61\x07\x6b\xfc\x48\x2c\x41\x60\x76\xdb\x23\x68\x95\xd7\xa2\x38\xb0\xa3\xf8\x1b\xb4\x93\x54\x54\x41\x90\xc4\xf5\xd2\x9c\x71\x67\x2a\x33\x57\x62\x04\x69\x4d\xd1\xa5\x22\x3f\x5c\x09\x22\xe4\xbf\xfa\x62\xa2\xf5\xd5\x59\x26\xa8\xb7\x72\xf5\x0f\x7b\x33\x62\xb1\x5b\x31\x24\xa0\x87\x10\x61\x5e\x0a\x42\x75\x83\x6b\x55\x25\x17\x0f\x57\xea\x3c\x99\xcc\x1e\x62\x91\x8c\xdd\xf6\x8d\xb1\x54\x77\xcb\xa6\xbd\xc2\x86\x7a\x57\x7c\x03\xc0\x28\x27\x5c\xf0\xa2\xc7\x45\x13\x8c\x47\x8d\x07\xa8\x75\xed\x13\x72\x24\x9b\xc6\x67\xb4\x5b\x43\xfb\x59\xe4\x77\x71\x80\xa8\x53\xa8\x68\x6d\x68\x34\x79\xbf\x46\x0d\x66\x8c\x83\xb2\xc7\x49\xb9\x22\x10\xf7\xec\x8c\x4e\xc4\x1b\x75\x37\x17\xde\x1a\x91\x21\x68\x74\xab\xd4\x8f\xa8\x86\xbf\xb7\xb8\x83\x42\xb3\x6a\xda\x78\x40\xcf\x08\xc1\x14\x72\x80\xd0\x04\x97\x47\x2b\x79\x91\x1c\xcb\x8e\x32\x8c\xe7\x41\x9c\x35\x07\x21\xd7\x71\x10\xa7\x18\x70\x04\x8c\x3d\x36\x57\xb8\xe5\x76\x18\x1a\x13\x2b\xb2\x8c\x6b\x6f\x05\x70\xd9\x75\x5e\x6d\xba\x3a\x7a\xd5\x6d\x2b\x4a\xbf\x6c\x14\x00\x59\x46\xbb\x3e\xb4\x27\xd3\xd7\x59\x92\xf1\x4c\xe0\xb7\x1c\x2d\xf9\x6a\xc9\xf6\x09\x9e\x32\x0e\xae\xfa\xbe\x70\x22\xbf\x7a\x59\x45\xd0\x4a\xa8\xf0\x65\x41\x84\x06\x12\x1b\xdb\x14\x46\xc1\x41\xde\xfb\x54\xf5\xeb\x0b\x0c\x98\x5b\x12\x34\x87\xec\x48\x4e\x91\x82\x5e\x2c\x98\xab\x51\x02\x22\xb0\xb6\xa0\x51\x42\x3b\xa2\x58\x7d\xff\xdc\x8b\x44\xb5\xcd\xcb\xd5\xa0\xcf\x99\x72\x67\x95\x1a\x4f\x20\xa4\x40\x77\x53\x0a\xab\x9d\x6a\x23\x31\x56\x52\x24\x14\xc1\x75\x14\xc8\x8e\xc0\x04\x96\x92\xd9\xc9\x53\x59\x13\x38\xb7\xcb\x6d\x5a\x11\xe9\xe2\xa0\xf8\x4a\x8b\xbf\x82\xa9\x3a\xeb\x1d\x03\xcc\xce\xdb\x3b\x52\xad\x75\x4f\x4d\x19\x29\x45\xf6\xb6\x32\x49\x2a\x62\x30\x12\x70\x25\x95\x22\x9c\x9d\xd6\xb7\x5a\xe4\xb2\x03\x54\x7b\x9a\xd5\xb9\xbb\xb7\x27\x2b\x48\x35\x2e\xa5\xa6\xca\xc4\x86\x39\xba\x53\x15\x28\x2a\xac\x4c\xf1\x9a\x07\x37\x39\x17\xc3\x23\x46\xd6\x4b\x8f\x12\x15\xd1\xd6\xae\xaa\xe7\x41\x95\xc5\x46\x21\x65\x44\x05\xa3\x3f\x57\x59\xba\x0e\xf9\x17\x40\x1b\x2a\xc3\xe6\x2b\x88\x80\x32\x2e\x58\x29\xea\xd8\x90\x15\x4a\x6f\xb6\x04\x14\x1e\x6a\xca\x04\x93\x74\x34\x6c\x1d\x9a\x76\x57\xaa\x00\x6d\xed\xdc\x32\xcd\x96\xb3\xb0\xba\xc6\xbc\x98\x28\xc8\x67\xc8\xce\xe6\x4a\x9c\xd4\x98\x03\x05\x6a\xce\x38\x8a\xc5\x5c\x04\x5f\x53\x26\x63\x07\x91\x8a\x66\x15\x6c\xc5\x90\x6e\x7c\x3a\x78\x46\xb9\xe3\xf3\x16\xf7\x2a\x89\x8f\x73\x9f\x23\x73\x56\x50\xf5\x58\xb4\x84\x45\xee\x99\x76\xde\x1b\x7c\xea\x70\x54\x76\x5b\x0b\xbf\x50\x5e\x22\x2c\x10\x02\xd1\x36\x5a\xca\x9d\x36\x72\xcc\xd6\x5c\x76\x32\xf2\x21\x22\x56\x78\x18\x48\xc7\x9b\x33\xac\x40\x1c\x13\xe1\x04\x72\xa3\x60\x05\x56\x50\x82\xd8\x7b\xcc\x5c\xfc\x81\x92\x23\x57\xcd\x37\x60\x46\xc3\x7b\x79\xa9\x4c\xb2\xc0\x32\x41\xa0\xa7\x34\x1c\xbb\xae\x36\x64\xe0\x06\xbb\x15\x26\xb9\x68\x20\xb2\x5f\x61\xbb\xd9\x01\x0c\xbc\x2c\x54\x5e\x43\xc4\x65\xc3\x8f\x40\x43\x35\xfb\x45\x97\x94\x8b\xcc\xd1\x20\x9b\x77\xf3\xbf\xc8\x00\x52\x1a\x02\x62\x6d\xf4\x93\x85\x79\xb5\xb4\xf0\x64\xa0\x97\x50\x37\x2a\x11\x7f\x28\x45\x2a\xd8\x15\xd0\x0c\x01\x9e\x77\xc1\x48\x7a\x69\x0a\x81\x32\x03\xa8\x32\xb1\x70\x23\xd2\x07\x0d\xc5\x89\x50\x51\x59\x4a\x04\x52\x76\xfd\xfa\x46\xc7\x7b\x3e\xe0\x68\xaf\xce\x51\x89\x96\xb8\x6f\x61\x91\x8d\xb3\x6c\xb4\xc6\xa0\x01\x07\x33\x3a\x28\x93\x69\x59\x51\x08\x07\xf2\x3c\x83\xa9\x6c\xa4\x16\x75\xaf\x0a\xad\x26\x01\x07\x6f\xe0\x04\x20\x93\x67\x4e\xc1\x41\xe3\x80\x47\xea\x0b\x45\xf2\x95\xcf\x5e\xfb\x34\xce\x50\x80\xf4\x02\x26\x9d\x63\x8f\x41\x76\x92\x12\x2c\x40\x53\xbc\x67\xbb\x92\x73\xe5\x0a\xa4\x82\xd3\x55\x19\x21\x80\xe8\xf7\x99\x71\x65\xcc\xed\x23\x18\xd7\x80\x38\xa1\x60\x50\x58\x05\xcd\xdd\x5a\x00\x97\x4b\x6e\xf4\x54\x98\x4f\xfc\xb3\x59\x96\x9a\xa5\xa2\x3d\xab\xb5\xa4\x9e\xba\x34\x78\x10\x41\xc1\x73\xb1\xf3\x15\xa5\xda\x83\xa9\xe5\x32\x25\x7a\x7c\x37\x87\x92\xbf\x83\xba\xb4\x1b\xc5\xa4\xa6\xb5\x9f\xb7\x8c\xbe\x13\x93\xb5\x1e\xd5\x9a\x05\xb5\x25\x7e\xa6\x1a\xf3\xf8\x05\x9f\x08\x59\xd7\xf0\x8d\x4a\xaa\x05\x57\x75\xc3\x8c\x20\x1e\xfb\x4c\x6d\xdd\xbb\xa2\x86\xca\x2b\x21\x30\xad\xee\x48\x0b\x1d\xc4\x13\xac\x84\x69\x42\x99\x1a\xc9\xac\x14\x3d\x70\x5b\xdd\xcc\x8b\xa3\x89\x98\xe0\x10\x50\x0b\x74\x51\xbe\x43\x2d\xc9\x61\x71\xa3\xc2\x5f\x9f\x7b\x20\x7e\x7a\xc3\xc3\x0a\x6f\x63\xab\x2c\x01\x32\x02\x51\xd2\x43\x37\x37\x84\x63\xfc\xb2\x91\x35\x97\x91\xb7\xcf\x6f\xb3\xa7\x35\xe2\x4d\x9b\x66\xc4\x51\xa3\x7e\x4f\x86\x90\x9e\x01\x57\xe9\xe8\x7f\x6e\x30\x25\x6b\x03\xb3\x10\x03\xb3\x40\x8a\x91\xfb\x46\x2b\x0f\xc1\x68\xea\x51\x71\xee\x38\xba\x43\x0b\x06\x13\xab\x9e\x6d\x78\x59\xd7\xe4\x05\xc9\x90\x1d\x94\xc7\xc1\xd7\xe0\x6b\x39\xc8\x15\x00\x89\xc3\x16\xda\xad\xef\x81\x0f\x3d\xe9\x91\x99\x82\x07\x39\x68\x79\x6a\xc2\xc1\x6c\xda\xce\x6b\xf5\x34\x22\x97\x8c\xc6\x98\x2b\xc5\x5c\x96\xb9\x2b\x92\x90\x0a\x8b\x45\x59\x3a\x4e\xa0\x88\x9c\x29\xb5\x89\xf7\x6f\xf7\xe4\x6f\xdc\x63\x7b\x4a\x08\x9e\x5d\xc4\x7e\x67\x19\x89\x85\xe4\xa4\x45\x7c\x76\xf9\xe2\xaa\x99\xc7\x81\x56\x45\x75\x3f\x46\x3e\x57\x41\x8b\xd6\x09\x8b\x58\x7c\x6a\xe8\x97\x78\x09\x72\x1c\x8d\x52\x2e\x7a\x74\xb6\x4d\xa3\x20\x37\x11\x67\x33\x03\x4b\x6c\xca\x2c\x8d\xe2\x41\x74\x93\x56\x1b\xca\x8f\x16\x14\x9a\x8d\xa0\x8d\x6a\xaa\x59\x7d\x76\x99\xfc\x47\x77\x56\x83\xc6\x3f\x07\x81\xfe\x76\xcc\x2a\x8c\xab\x76\x94\x49\xfd\xb5\x3e\x90\x65\x96\x99\x9a\xc4\x61\x41\x0c\xda\xf4\x1c\x80\x03\x41\x00\xcc\x57\x0d\xb2\x1f\x9a\x4a\xbf\x3b\x9b\x17\x03\x79\x8f\x9d\x9a\xa1\xb0\x94\x85\xb7\x04\x36\x3a\x84\x66\x4d\x36\x79\x11\xfb\xbe\xd8\x79\x86\x1b\x82\x92\xb5\x96\x68\x29\x31\x80\x15\x81\x02\xcb\x51\x9f\x4f\x72\x61\x8d\x41\xc3\x55\x30\x17\x96\xca\x17\x0e\xac\x58\x5d\x82\x15\x13\x97\x0d\x24\x97\x25\xa6\x78\xa2\x62\x89\xa9\xe8\x04\x60\xbe\x9a\x35\x61\x35\xac\xdc\x45\x26\xb4\xcc\xa0\xe5\x92\x9d\xbc\xa5\xbb\xb6\x23\x4a\xf4\x22\x9c\x0c\xeb\xba\x31\x02\x44\xe1\x97\xa1\xce\xfa\xae\xb1\xe1\xb5\xf2\x96\x34\x4b\x87\xbe\x4f\x93\xcb\x56\xe3\x38\x77\x84\x29\xd0\xbc\x5f\xc2\xe0\x37\x4e\xd0\x37\xb3\xe9\x2c\x8a\xb4\x03\x74\x98\x41\x7f\x8b\x64\x95\x3c\x27\xa1\xec\x8a\x53\x28\x8a\x00\x7c\xc8\x7d\x74\x0a\xb4\xa3\x74\xed\x5b\x73\x3e\x22\x11\xcd\x21\x66\xf7\xd0\x29\xe6\x88\x28\xf2\x24\x13\x2b\x65\x69\xc6\xb6\xc1\x5f\xf0\xa3\xa1\xcc\x74\x7f\xea\xce\x6f\x89\x5a\xc0\xa1\xa5\x22\x28\xac\xc9\x00\xaf\x06\x47\x0f\x0c\x14\x59\x09\xb9\x33\xb8\xa4\xcd\x13\x00\x8e\x4f\xe0\x29\xf6\x96\x79\xf8\xb1\x1d\x90\x07\x04\x7d\x42\x73\xc4\x66\x00\xfe\x17\xb4\x9b\xa5\xc1\xea\x82\x40\xf1\xac\x7f\x0a\x34\x07\x48\x7b\x21\xf8\x38\x26\x02\x57\x78\x74\xc0\xb5\xff\xf7\x3b\xaf\xa3\x86\x9c\x75\x45\x09\x7a\x1c\x64\xb0\xb9\xc7\x3a\x5f\x3f\x41\x81\xbc\x06\x35\x0a\xe3\x51\x46\x8c\x02\xe8\xc3\x4c\xcc\x17\x62\x4d\xd0\x13\x3f\xeb\x9a\x42\x8a\x00\x15\xd0\x17\x0b\x11\xb9\xc1\x9a\x9b\xbb\x43\xad\x7a\x40\xc9\x40\xfc\x30\xf0\x63\x9d\x4b\x69\x3c\x5d\x81\x4a\x42\x89\x60\x93\xd8\xb2\xd9\xb9\x08\xc2\xaa\x9b\xe9\xca\x8c\x92\x03\x1c\xef\xf7\x2f\xea\xb7\x4a\xff\x5b\x30\x24\x5b\x35\x55\xe0\x90\x0e\xf6\xa1\xa1\x65\x87\xc0\x84\x85\x25\xb6\x69\x2f\x49\xa8\x44\xa9\x3f\x88\xb1\x75\x76\x89\xdb\x21\x3a\x54\xb8\xf5\x4a\x80\x06\x7b\x52\x73\x71\x0a\xbb\xe6\xb2\xd0\x19\x20\x1d\xf5\x4c\x8c\x91\x66\x4e\xae\x08\x62\x20\x02\xda\x3c\xe8\x1d\x48\x14\x5c\x84\xa9\x1e\x25\xef\x5a\x57\xa9\xff\x45\xf4\xe3\x1e\xd9\x6b\x99\xd1\x4f\xc3\xab\x1f\x81\x92\xb7\xe7\xd1\x32\x4c\x41\xe1\xf2\x93\x85\x37\x17\x6b\xe3\xbe\x0d\x78\x20\x64\x72\x50\xcf\x64\x30\x35\x43\xf2\x28\x3d\xed\xe5\x82";
		let public = b"\xab\xd4\x8f\xa8\x86\xbf\xb7\xb8\x83\x42\xb3\x6a\xda\x78\x40\xcf\x08\xc1\x14\x72\x80\xd0\x04\x97\x47\x2b\x79\x91\x1c\xcb\x8e\x32\x8c\xe7\x41\x9c\x35\x07\x21\xd7\x71\x10\xa7\x18\x70\x04\x8c\x3d\x36\x57\xb8\xe5\x76\x18\x1a\x13\x2b\xb2\x8c\x6b\x6f\x05\x70\xd9\x75\x5e\x6d\xba\x3a\x7a\xd5\x6d\x2b\x4a\xbf\x6c\x14\x00\x59\x46\xbb\x3e\xb4\x27\xd3\xd7\x59\x92\xf1\x4c\xe0\xb7\x1c\x2d\xf9\x6a\xc9\xf6\x09\x9e\x32\x0e\xae\xfa\xbe\x70\x22\xbf\x7a\x59\x45\xd0\x4a\xa8\xf0\x65\x41\x84\x06\x12\x1b\xdb\x14\x46\xc1\x41\xde\xfb\x54\xf5\xeb\x0b\x0c\x98\x5b\x12\x34\x87\xec\x48\x4e\x91\x82\x5e\x2c\x98\xab\x51\x02\x22\xb0\xb6\xa0\x51\x42\x3b\xa2\x58\x7d\xff\xdc\x8b\x44\xb5\xcd\xcb\xd5\xa0\xcf\x99\x72\x67\x95\x1a\x4f\x20\xa4\x40\x77\x53\x0a\xab\x9d\x6a\x23\x31\x56\x52\x24\x14\xc1\x75\x14\xc8\x8e\xc0\x04\x96\x92\xd9\xc9\x53\x59\x13\x38\xb7\xcb\x6d\x5a\x11\xe9\xe2\xa0\xf8\x4a\x8b\xbf\x82\xa9\x3a\xeb\x1d\x03\xcc\xce\xdb\x3b\x52\xad\x75\x4f\x4d\x19\x29\x45\xf6\xb6\x32\x49\x2a\x62\x30\x12\x70\x25\x95\x22\x9c\x9d\xd6\xb7\x5a\xe4\xb2\x03\x54\x7b\x9a\xd5\xb9\xbb\xb7\x27\x2b\x48\x35\x2e\xa5\xa6\xca\xc4\x86\x39\xba\x53\x15\x28\x2a\xac\x4c\xf1\x9a\x07\x37\x39\x17\xc3\x23\x46\xd6\x4b\x8f\x12\x15\xd1\xd6\xae\xaa\xe7\x41\x95\xc5\x46\x21\x65\x44\x05\xa3\x3f\x57\x59\xba\x0e\xf9\x17\x40\x1b\x2a\xc3\xe6\x2b\x88\x80\x32\x2e\x58\x29\xea\xd8\x90\x15\x4a\x6f\xb6\x04\x14\x1e\x6a\xca\x04\x93\x74\x34\x6c\x1d\x9a\x76\x57\xaa\x00\x6d\xed\xdc\x32\xcd\x96\xb3\xb0\xba\xc6\xbc\x98\x28\xc8\x67\xc8\xce\xe6\x4a\x9c\xd4\x98\x03\x05\x6a\xce\x38\x8a\xc5\x5c\x04\x5f\x53\x26\x63\x07\x91\x8a\x66\x15\x6c\xc5\x90\x6e\x7c\x3a\x78\x46\xb9\xe3\xf3\x16\xf7\x2a\x89\x8f\x73\x9f\x23\x73\x56\x50\xf5\x58\xb4\x84\x45\xee\x99\x76\xde\x1b\x7c\xea\x70\x54\x76\x5b\x0b\xbf\x50\x5e\x22\x2c\x10\x02\xd1\x36\x5a\xca\x9d\x36\x72\xcc\xd6\x5c\x76\x32\xf2\x21\x22\x56\x78\x18\x48\xc7\x9b\x33\xac\x40\x1c\x13\xe1\x04\x72\xa3\x60\x05\x56\x50\x82\xd8\x7b\xcc\x5c\xfc\x81\x92\x23\x57\xcd\x37\x60\x46\xc3\x7b\x79\xa9\x4c\xb2\xc0\x32\x41\xa0\xa7\x34\x1c\xbb\xae\x36\x64\xe0\x06\xbb\x15\x26\xb9\x68\x20\xb2\x5f\x61\xbb\xd9\x01\x0c\xbc\x2c\x54\x5e\x43\xc4\x65\xc3\x8f\x40\x43\x35\xfb\x45\x97\x94\x8b\xcc\xd1\x20\x9b\x77\xf3\xbf\xc8\x00\x52\x1a\x02\x62\x6d\xf4\x93\x85\x79\xb5\xb4\xf0\x64\xa0\x97\x50\x37\x2a\x11\x7f\x28\x45\x2a\xd8\x15\xd0\x0c\x01\x9e\x77\xc1\x48\x7a\x69\x0a\x81\x32\x03\xa8\x32\xb1\x70\x23\xd2\x07\x0d\xc5\x89\x50\x51\x59\x4a\x04\x52\x76\xfd\xfa\x46\xc7\x7b\x3e\xe0\x68\xaf\xce\x51\x89\x96\xb8\x6f\x61\x91\x8d\xb3\x6c\xb4\xc6\xa0\x01\x07\x33\x3a\x28\x93\x69\x59\x51\x08\x07\xf2\x3c\x83\xa9\x6c\xa4\x16\x75\xaf\x0a\xad\x26\x01\x07\x6f\xe0\x04\x20\x93\x67\x4e\xc1\x41\xe3\x80\x47\xea\x0b\x45\xf2\x95\xcf\x5e\xfb\x34\xce\x50\x80\xf4\x02\x26\x9d\x63\x8f\x41\x76\x92\x12\x2c\x40\x53\xbc\x67\xbb\x92\x73\xe5\x0a\xa4\x82\xd3\x55\x19\x21\x80\xe8\xf7\x99\x71\x65\xcc\xed\x23\x18\xd7\x80\x38\xa1\x60\x50\x58\x05\xcd\xdd\x5a\x00\x97\x4b\x6e\xf4\x54\x98\x4f\xfc\xb3\x59\x96\x9a\xa5\xa2\x3d\xab\xb5\xa4\x9e\xba\x34\x78\x10\x41\xc1\x73\xb1\xf3\x15\xa5\xda\x83\xa9\xe5\x32\x25\x7a\x7c\x37\x87\x92\xbf\x83\xba\xb4\x1b\xc5\xa4\xa6\xb5\x9f\xb7\x8c\xbe\x13\x93\xb5\x1e\xd5\x9a\x05\xb5\x25\x7e\xa6\x1a\xf3\xf8\x05\x9f\x08\x59\xd7\xf0\x8d\x4a\xaa\x05\x57\x75\xc3\x8c\x20\x1e\xfb\x4c\x6d\xdd\xbb\xa2\x86\xca\x2b\x21\x30\xad\xee\x48\x0b\x1d\xc4\x13\xac\x84\x69\x42\x99\x1a\xc9\xac\x14\x3d\x70\x5b\xdd\xcc\x8b\xa3\x89\x98\xe0\x10\x50\x0b\x74\x51\xbe\x43\x2d\xc9\x61\x71\xa3\xc2\x5f\x9f\x7b\x20\x7e\x7a\xc3\xc3\x0a\x6f\x63\xab\x2c\x01\x32\x02\x51\xd2\x43\x37\x37\x84\x63\xfc\xb2\x91\x35\x97\x91\xb7\xcf\x6f\xb3\xa7\x35\xe2\x4d\x9b\x66\xc4\x51\xa3\x7e\x4f\x86\x90\x9e\x01\x57\xe9\xe8\x7f\x6e\x30\x25\x6b\x03\xb3\x10\x03\xb3\x40\x8a\x91\xfb\x46\x2b\x0f\xc1\x68\xea\x51\x71\xee\x38\xba\x43\x0b\x06\x13\xab\x9e\x6d\x78\x59\xd7\xe4\x05\xc9\x90\x1d\x94\xc7\xc1\xd7\xe0\x6b\x39\xc8\x15\x00\x89\xc3\x16\xda\xad\xef\x81\x0f\x3d\xe9\x91\x99\x82\x07\x39\x68\x79\x6a\xc2\xc1\x6c\xda\xce\x6b\xf5\x34\x22\x97\x8c\xc6\x98\x2b\xc5\x5c\x96\xb9\x2b\x92\x90\x0a\x8b\x45\x59\x3a\x4e\xa0\x88\x9c\x29\xb5\x89\xf7\x6f\xf7\xe4\x6f\xdc\x63\x7b\x4a\x08\x9e\x5d\xc4\x7e\x67\x19\x89\x85\xe4\xa4\x45\x7c\x76\xf9\xe2\xaa\x99\xc7\x81\x56\x45\x75\x3f\x46\x3e\x57\x41\x8b\xd6\x09\x8b\x58\x7c\x6a\xe8\x97\x78\x09\x72\x1c\x8d\x52\x2e\x7a\x74\xb6\x4d\xa3\x20\x37\x11\x67\x33\x03\x4b\x6c\xca\x2c\x8d\xe2\x41\x74\x93\x56\x1b\xca\x8f\x16\x14\x9a\x8d\xa0\x8d\x6a\xaa\x59\x7d\x76\x99\xfc\x47\x77\x56\x83\xc6\x3f\x07\x81\xfe\x76\xcc\x2a\x8c\xab\x76\x94\x49\xfd\xb5\x3e\x90\x65\x96\x99\x9a\xc4\x61\x41\x0c\xda\xf4\x1c\x80\x03\x41\x00\xcc\x57\x0d\xb2\x1f\x9a\x4a\xbf\x3b\x9b\x17\x03\x79\x8f\x9d\x9a\xa1\xb0\x94\x85\xb7\x04\x36\x3a\x84\x66\x4d\x36\x79\x11\xfb\xbe\xd8\x79\x86\x1b\x82\x92\xb5\x96\x68\x29\x31\x80\x15\x81\x02\xcb\x51\x9f\x4f\x72\x61\x8d\x41\xc3\x55\x30\x17\x96\xca\x17\x0e\xac\x58\x5d\x82\x15\x13\x97\x0d\x24\x97\x25\xa6\x78\xa2\x62\x89\xa9\xe8\x04\x60\xbe\x9a\x35\x61\x35\xac\xdc\x45\x26\xb4\xcc\xa0\xe5\x92\x9d\xbc\xa5\xbb\xb6\x23\x4a\xf4\x22\x9c\x0c\xeb\xba\x31\x02\x44\xe1\x97\xa1\xce\xfa\xae\xb1\xe1\xb5\xf2\x96\x34\x4b\x87\xbe\x4f\x93\xcb\x56\xe3\x38\x77\x84\x29\xd0\xbc\x5f\xc2\xe0\x37\x4e\xd0\x37\xb3\xe9\x2c\x8a\xb4\x03\x74\x98\x41\x7f\x8b\x64\x95\x3c\x27\xa1\xec\x8a\x53\x28\x8a\x00\x7c\xc8\x7d\x74\x0a\xb4\xa3\x74\xed\x5b\x73\x3e\x22\x11\xcd\x21\x66\xf7\xd0\x29\xe6\x88\x28\xf2\x24\x13\x2b\x65\x69\xc6\xb6\xc1\x5f\xf0\xa3\xa1\xcc\x74\x7f\xea\xce\x6f\x89\x5a\xc0\xa1\xa5\x22\x28\xac\xc9\x00\xaf\x06\x47\x0f\x0c\x14\x59\x09\xb9\x33\xb8\xa4\xcd\x13\x00\x8e\x4f\xe0\x29\xf6\x96\x79\xf8\xb1\x1d\x90\x07\x04\x7d\x42\x73\xc4\x66\x00\xfe\x17\xb4\x9b\xa5\xc1\xea\x82\x40\xf1\xac\x7f\x0a\x34\x07\x48\x7b\x21\xf8\x38\x26\x02\x57\x78\x74\xc0\xb5\xff\xf7\x3b\xaf\xa3\x86\x9c\x75\x45\x09\x7a\x1c\x64\xb0\xb9\xc7\x3a\x5f\x3f\x41\x81\xbc\x06\x35\x0a\xe3\x51\x46\x8c\x02\xe8\xc3\x4c\xcc\x17\x62\x4d\xd0\x13\x3f\xeb\x9a\x42\x8a\x00\x15\xd0\x17\x0b\x11\xb9\xc1\x9a\x9b\xbb\x43\xad\x7a\x40\xc9\x40\xfc\x30\xf0\x63\x9d\x4b\x69\x3c\x5d\x81\x4a\x42\x89\x60\x93\xd8\xb2\xd9\xb9\x08\xc2\xaa\x9b\xe9\xca\x8c\x92\x03\x1c\xef\xf7\x2f\xea\xb7\x4a\xff\x5b\x30\x24\x5b\x35\x55\xe0\x90\x0e\xf6\xa1\xa1\x65\x87\xc0\x84\x85\x25\xb6\x69\x2f\x49\xa8\x44\xa9\x3f\x88\xb1\x75\x76\x89\xdb\x21\x3a\x54\xb8\xf5\x4a\x80\x06\x7b\x52\x73\x71\x0a\xbb\xe6\xb2\xd0\x19\x20\x1d\xf5\x4c\x8c\x91\x66\x4e\xae\x08\x62";

		KeyPairKyber::new(private.into(), public.into())
	}

	fn bob_signed_prekey() -> SignedKeyPairX448 {
		let private = b"\x98\xbe\x16\x21\x67\xc5\x2b\x75\x5d\xae\xaa\x18\xf0\xcf\xbb\x5b\x8d\x0a\x80\x23\xcd\x6e\x78\xd0\xe8\x47\xdc\xe1\x98\x3e\x39\x8c\x67\x11\x2b\xa8\x02\x9e\xf8\x6b\xe7\x2f\x18\xc2\xe8\x07\x0e\x24\x8e\xed\x73\x93\xbb\x5d\x73\x9b";
		let public = b"\x36\xcb\x46\x0b\xd7\xcb\x41\xe3\xd6\x24\x0a\x25\x6b\x46\xda\xc5\x7f\xeb\x1e\x71\x38\x7f\x93\x1f\x86\xdb\x4d\xde\xd1\x1d\x72\x34\x5d\xe0\x51\x1f\xe4\xa4\xf0\xe9\x26\x01\x1c\xf2\x12\x2e\xd6\x40\x8f\x2c\x4b\xe0\xbf\x92\x2c\x1a";
		let kp = KeyPairX448::new(private.into(), public.into());

		SignedKeyPairX448::new(kp.private_key().clone(), SignedPublicKeyX448::new(kp.public_key().clone(), bob_ed448_identity().private_key().sign(kp.public_key().as_bytes())))
	}

	pub fn alice_session() -> Session {
		Session::alice(
			alice_x448_identity(),
			alice_ephemeral(),
			alice_ed448_identity(),
			alice_kyber_identity(),
			alice_kyber_ratchet(),
			bob_x448_identity().public_key().clone(),
			bob_signed_prekey().public().clone(),
			bob_x448_prekey().public_key().clone(),
			bob_kyber_prekey().public_key().clone(),
			bob_kyber_identity().public_key().clone(),
			false)
	}

	fn bob_session(kex: &KeyExchange) -> Session {
		let decrypted = decrypt_kex(kex);
		Session::bob(
			bob_x448_identity(),
			bob_kyber_identity(), 
			bob_signed_prekey(), 
			bob_x448_prekey(), 
			bob_kyber_prekey(), 
			kex.x448_identity.clone(), 
			decrypted.ephemeral.clone(), 
			decrypted.kyber.clone())
	}

	fn decrypt_kex(kex: &KeyExchange) -> KeyBundle {
		let bob_kyber_prekey = bob_kyber_prekey();

		let find_key = |_| -> Result<&PrivateKeyKyber, kyber::Error> {
			Ok(bob_kyber_prekey.private_key())
		};

		kyber::decrypt_keys(&kex.kyber_encrypted_ephemeral, kyber::DecryptionMode::Double { second_key: bob_kyber_identity().private_key(), first_key: Box::new(find_key) }).unwrap()
	}

	fn turn_ratchet(alice: &mut Session, bob: &mut Session) -> (AxolotlMac, AxolotlMac) {
		let msg1 = alice.encrypt(b"turning", Type::Chat);
		_ = bob.decrypt(&msg1);

		let msg2 = bob.encrypt(b"turning", Type::Chat);
		_ = alice.decrypt(&msg2);

		(msg1, msg2)
	}

	#[test]
	fn test_encrypt_decrypt() {
		let mut alice = alice_session();
		let a0 = alice.encrypt(b"hi 0", Type::Chat);
		let a1 = alice.encrypt(b"hi 1", Type::Chat);
		let a2 = alice.encrypt(b"hi 2", Type::Chat);

		// alice updated her internal state
		assert_eq!(alice.counter, 3);
		assert_eq!(alice.prev_counter, 0);
		assert!(alice.unacked_key_exchange.is_some());

		// all unacked messages are to include a kex
		assert!(a0.body().key_exchange.is_some());
		assert!(a1.body().key_exchange.is_some());
		assert!(a2.body().key_exchange.is_some());

		// all unacked messages are to have an kyber encrypted eph (and no ratchet_key yet)
		assert!(a0.body().ratchet_key.is_none());
		assert!(a1.body().ratchet_key.is_none());
		assert!(a2.body().ratchet_key.is_none());
		assert!(a0.body().kyber_encrypted_ratchet_key.is_some());
		assert!(a1.body().kyber_encrypted_ratchet_key.is_some());
		assert!(a2.body().kyber_encrypted_ratchet_key.is_some());

		// now, bob decrypts the messages
		let mut bob = bob_session(&a1.body().clone().key_exchange.unwrap());
		let rcvd0 = bob.decrypt(&a0).unwrap();
		let rcvd1 = bob.decrypt(&a1).unwrap();
		let rcvd2 = bob.decrypt(&a2).unwrap();

		assert_eq!(rcvd0, b"hi 0");
		assert_eq!(rcvd1, b"hi 1");
		assert_eq!(rcvd2, b"hi 2");

		// counter should not yet change for bob (it's for sending)
		assert_eq!(bob.counter, 0);
		assert_eq!(bob.prev_counter, 0);
		assert!(bob.unacked_key_exchange.is_none());

		// make bob send a message to alice to ratchet once
		let b0 = alice.decrypt(&bob.encrypt(b"hi from bob", Type::Chat)).unwrap();

		assert_eq!(b0, b"hi from bob");

		// now, bob should change his internal sending state
		assert_eq!(bob.counter, 1);
		assert_eq!(bob.prev_counter, 0);
		// bob didn't start this conversation, so he should not have a kex
		assert!(bob.unacked_key_exchange.is_none());

		// now, alice sends a few more messages with a new ratchet
		let a3 = alice.encrypt(b"hi 3", Type::Chat);
		let a4 = alice.encrypt(b"hi 4", Type::Chat);
		let a5 = alice.encrypt(b"hi 5", Type::Chat);

		// make sure no key exchange is present for this ratchet (attached for the first unacked messages only)
		assert!(a3.body().key_exchange.is_none());
		assert!(a4.body().key_exchange.is_none());
		assert!(a5.body().key_exchange.is_none());

		// and unacked_key_exchange is cleared
		assert!(alice.unacked_key_exchange.is_none());

		// as well as no kyber_encrypted_ratchet_key is applied while ratchet_key is set
		assert!(a3.body().ratchet_key.is_some());
		assert!(a4.body().ratchet_key.is_some());
		assert!(a5.body().ratchet_key.is_some());
		assert!(a3.body().kyber_encrypted_ratchet_key.is_none());
		assert!(a4.body().kyber_encrypted_ratchet_key.is_none());
		assert!(a5.body().kyber_encrypted_ratchet_key.is_none());

		// also, alice's internal state should update
		assert_eq!(alice.counter, 3);
		assert_eq!(alice.prev_counter, 3);
		
		let rcvd3 = bob.decrypt(&a3).unwrap();
		let rcvd4 = bob.decrypt(&a4).unwrap();
		let rcvd5 = bob.decrypt(&a5).unwrap();

		// now bob decrypts the messages with his new derived ratchet
		assert_eq!(rcvd3, b"hi 3");
		assert_eq!(rcvd4, b"hi 4");
		assert_eq!(rcvd5, b"hi 5");
	}

	#[test]
	fn test_force_kyber() {
		let mut alice = alice_session();
		let a0 = alice.encrypt(b"hi 0", Type::Chat);
		let a1 = alice.encrypt(b"hi 1", Type::Chat);
		let a2 = alice.encrypt(b"hi 2", Type::Chat);

		// all unacked messages are to have an kyber encrypted eph (and no ratchet_key yet)
		assert!(a0.body().ratchet_key.is_none());
		assert!(a1.body().ratchet_key.is_none());
		assert!(a2.body().ratchet_key.is_none());
		assert!(a0.body().kyber_encrypted_ratchet_key.is_some());
		assert!(a1.body().kyber_encrypted_ratchet_key.is_some());
		assert!(a2.body().kyber_encrypted_ratchet_key.is_some());

		// now, bob decrypts the messages
		let mut bob = bob_session(&a1.body().clone().key_exchange.unwrap());
		_ = bob.decrypt(&a0).unwrap();
		_ = bob.decrypt(&a1).unwrap();
		_ = bob.decrypt(&a2).unwrap();

		// make bob send a message to alice to ratchet once
		_ = alice.decrypt(&bob.encrypt(b"hi from bob", Type::Chat)).unwrap();

		// now, alice sends a few more messages with a new ratchet
		let a3 = alice.encrypt(b"hi 3", Type::Chat);
		let a4 = alice.encrypt(b"hi 4", Type::Chat);
		let a5 = alice.encrypt(b"hi 5", Type::Chat);

		// as well as no kyber_encrypted_ratchet_key is applied while ratchet_key is set
		assert!(a3.body().ratchet_key.is_some());
		assert!(a4.body().ratchet_key.is_some());
		assert!(a5.body().ratchet_key.is_some());
		assert!(a3.body().kyber_encrypted_ratchet_key.is_none());
		assert!(a4.body().kyber_encrypted_ratchet_key.is_none());
		assert!(a5.body().kyber_encrypted_ratchet_key.is_none());
		
		// now, bob decrypts 
		_ = bob.decrypt(&a3).unwrap();
		_ = bob.decrypt(&a4).unwrap();
		_ = bob.decrypt(&a5).unwrap();

		_ = alice.decrypt(&bob.encrypt(b"meaning of life, please?", Type::Chat)).unwrap();

		// now, make alice kyber-encrypt her next message's ratchet
		alice.force_kyber_for_next();

		let a6 = alice.encrypt(b"42", Type::Chat);
		let a7 = alice.encrypt(b"or not", Type::Chat);

		// and notice the messages are encrypted with an kyber encrypted ratchet
		assert!(a6.body().ratchet_key.is_none());
		assert!(a7.body().ratchet_key.is_none());
		assert!(a6.body().kyber_encrypted_ratchet_key.is_some());
		assert!(a7.body().kyber_encrypted_ratchet_key.is_some());

	}

	#[test]
	fn test_keys_used_for_kex() {
		let msg = alice_session().encrypt(b"hi", Type::Chat);
		let kex = msg.body().key_exchange.as_ref().unwrap();

		// I used one of your prekeys for this session
		assert_eq!(kex.x448_prekey_id, bob_x448_prekey().public_key().id());
		// as well as one of your signed prekeys
		assert_eq!(kex.signed_prekey_id, bob_signed_prekey().public().key().id());
		// and this is my identity in turn
		assert_eq!(kex.x448_identity.id(), alice_x448_identity().public_key().id());
		// my kyber-encrypted ratchet
		assert_eq!(kex.kyber_encrypted_ephemeral.key_id, alice_ephemeral().public_key().id());
		// it is double encrypted, by the way,
		assert!(kex.kyber_encrypted_ephemeral.double_encrypted);
		// with your kyber identity first (and another key on top)
		assert_eq!(kex.kyber_encrypted_ephemeral.payload.encryption_key_id, bob_kyber_identity().public_key().id());
		// this is my kyber identity (not used by Session actually, but we have it in protobuf)
		assert_eq!(kex.kyber_identity.id(), alice_kyber_identity().public_key().id());
		// and my signing key
		assert_eq!(kex.ed448_identity.id(), alice_ed448_identity().public_key().id());
	}

	#[test]
	fn test_kyber_encrypt_ratchet() {
		let mut alice = alice_session();
		let a0 = alice.encrypt(b"hi 0", Type::Chat);
		let kex = a0.body().key_exchange.as_ref().unwrap();

		// all unacked messages are to have a kex containing a double encrypted eph: first, it's 
		// encrypted with bob's kyber prekey, then â€“ his kyber identity
		assert_eq!(alice.ratchet_counter, 1);
		assert!(kex.kyber_encrypted_ephemeral.double_encrypted);
		assert_eq!(kex.kyber_encrypted_ephemeral.payload.encryption_key_id, bob_kyber_identity().public_key().id());
		// while initial kyber encrypted ratchet eph is never double encrypted
		assert_eq!(a0.body().kyber_encrypted_ratchet_key.as_ref().unwrap().double_encrypted, false);
		// bob's prekey is used as his first kyber ratchet to encrypt alice's eph ratchet
		assert_eq!(a0.body().kyber_encrypted_ratchet_key.as_ref().unwrap().payload.encryption_key_id, bob_kyber_prekey().public_key().id());
		// plain ratchet eph should be None, by the way
		assert!(a0.body().ratchet_key.is_none());

		let mut bob = bob_session(kex);
		// turn once for bob to start using plain eph ratchet
		_ = bob.decrypt(&a0);
		// and for alice
		_ = alice.decrypt(&bob.encrypt(b"hi, alice 0", Type::Chat));

		// still 1 for alice
		assert_eq!(alice.ratchet_counter, 1);
		assert_eq!(bob.ratchet_counter, 1);

		// turn the root key N - 1 more times, in other words right before both sides decide to exchange a new kyber key
		for ctr in 2..RATCHETS_BETWEEN_KYBER + 1 {
			let (a, b) = turn_ratchet(&mut alice, &mut bob);

			assert_eq!(alice.ratchet_counter, ctr);
			assert_eq!(bob.ratchet_counter, ctr);
			// at this point, non-kyber-encrypted ratchet shoudl be used
			assert!(a.body().kyber_encrypted_ratchet_key.is_none());
			assert!(a.body().ratchet_key.is_some());
			assert!(b.body().kyber_encrypted_ratchet_key.is_none());
			assert!(b.body().ratchet_key.is_some());
		}

		let a1 = alice.encrypt(b"this goes with a new kyber encrypted ratchet by alice", Type::Chat);

		// now, on the Nth turn, alice includes a new kyber key, encrypted with bob's kyber ratchet; no plain ratchet is used
		assert!(a1.body().ratchet_key.is_none());
		// again, it should not be double encrypted (double encryption is used for kex only)
		assert_eq!(a1.body().kyber_encrypted_ratchet_key.as_ref().unwrap().double_encrypted, false);

		// make sure different ephemeral keys are used between the ratchets
		assert_ne!(a0.body().kyber_encrypted_ratchet_key.as_ref().unwrap().key_id, a1.body().kyber_encrypted_ratchet_key.as_ref().unwrap().key_id);
		// it's still the same old bob's kyber ratchet (= bob kyber prekey) for alice
		assert_eq!(a1.body().kyber_encrypted_ratchet_key.as_ref().unwrap().payload.encryption_key_id, a0.body().kyber_encrypted_ratchet_key.as_ref().unwrap().payload.encryption_key_id);

		_ = bob.decrypt(&a1);

		// here, bob will use alice's new kyber ratchet
		let b0 = bob.encrypt(b"this goes with a new kyber encrypted ratchet by bob", Type::Chat);

		assert!(b0.body().kyber_encrypted_ratchet_key.is_some());
		assert!(b0.body().ratchet_key.is_none());
		// as usual, no double encryption
		assert_eq!(b0.body().kyber_encrypted_ratchet_key.as_ref().unwrap().double_encrypted, false);
		// bob's eph is encrypted with alice's most recent kyber ratchet
		assert_eq!(b0.body().kyber_encrypted_ratchet_key.as_ref().unwrap().payload.encryption_key_id, alice.my_kyber_ratchet.as_ref().unwrap().public_key().id());

		_ = alice.decrypt(&b0);

		// and finally, switch back to plain ratchets again
		let a2 = alice.encrypt(b"now, no kyber ratchet will be used by alice", Type::Chat);
		assert!(a2.body().kyber_encrypted_ratchet_key.is_none());
		assert!(a2.body().ratchet_key.is_some());

		// and same for bob
		_ = bob.decrypt(&a2);
		let b1 = bob.encrypt(b"now, this goes with a plain ratchet by bob as well", Type::Chat);

		assert!(b1.body().kyber_encrypted_ratchet_key.is_none());
		assert!(b1.body().ratchet_key.is_some());
	}

	#[test]
	fn test_decrypt_skipped_kyber_ratchet() {
		// make alice and bob turn once by sending each other 1 message each
		let mut alice = alice_session();
		let a0 = alice.encrypt(b"hi, bob 0", Type::Chat);
		let mut bob = bob_session(&a0.body().key_exchange.as_ref().unwrap());
		_ = bob.decrypt(&a0);
		_ = alice.decrypt(&&bob.encrypt(b"hi, alice 0", Type::Chat));

		// now, turn N - 1 times, just before exchanging a new kyber ratchet key
		for _ in 1..RATCHETS_BETWEEN_KYBER {
			_ = turn_ratchet(&mut alice, &mut bob);
		}

		let msg_to_skip = b"this one goes with a new kyber ratchet by alice";
		let a1 = alice.encrypt(msg_to_skip, Type::Chat);
		// so, we have a message from alice with an kyber encrypted ratchet
		assert!(a1.body().kyber_encrypted_ratchet_key.is_some());

		// make alice and bob completely switch to new ratchets by turnig a lot
		for _ in 1..RATCHETS_BETWEEN_KYBER * 5 {
			_ = turn_ratchet(&mut alice, &mut bob);
		}

		// current and "forgotten" chains should be kept by now
		assert_eq!(bob.receive_chain.len(), 2);

		let skipped = bob.decrypt(&a1).unwrap();
		assert_eq!(msg_to_skip, &skipped[..]);
		// when the lost message is decrypted, its chain is disposed (given it was just one such message)
		assert_eq!(bob.receive_chain.len(), 1);
	}

	#[test]
	fn test_decrypt_out_of_order() {
		let mut alice = alice_session();
		let a0 = alice.encrypt(b"a0", Type::Chat);
		let a1 = alice.encrypt(b"a1", Type::Chat);
		let a2 = alice.encrypt(b"a2", Type::Chat);
		let a3 = alice.encrypt(b"a3", Type::Chat);

		let mut bob = bob_session(&a0.body().key_exchange.as_ref().unwrap());

		assert_eq!(b"a3", &bob.decrypt(&a3).unwrap()[..]);
		assert_eq!(b"a0", &bob.decrypt(&a0).unwrap()[..]);
		assert_eq!(b"a2", &bob.decrypt(&a2).unwrap()[..]);
		assert_eq!(b"a1", &bob.decrypt(&a1).unwrap()[..]);
	}

	#[test]
	fn test_dispose_chain_when_no_skipped_messages_left() {
		let mut alice = alice_session();
		let a0 = alice.encrypt(b"hi, bob 0", Type::Chat);
		let mut bob = bob_session(&a0.body().key_exchange.as_ref().unwrap());

		_ = bob.decrypt(&a0);
		_ = alice.decrypt(&bob.encrypt(b"hi, alice 0", Type::Chat));

		// with one message sent, alice and bob each has 1 chain-sized receive chains respectively
		assert_eq!(alice.receive_chain.len(), 1);
		assert_eq!(bob.receive_chain.len(), 1);

		// encrypt a message that will be decrypted by bob later making him preserve a chain for that
		let a1 = alice.encrypt(b"this one will be skipped for now", Type::Chat);

		_ = bob.decrypt(&alice.encrypt(b"this will be decrypted by a new chain", Type::Chat));
		// and turn several times to swich to new ratchets
		turn_ratchet(&mut alice, &mut bob);
		turn_ratchet(&mut alice, &mut bob);

		// there were three chains: (1) initial chain w/ skipped key, (2) no skipped, and (3) current
		// 2 would be cleaned up immediately since it has no skipped keys and is replaced by 3 (those turn_ratchet calls)
		assert_eq!(bob.receive_chain.len(), 2);
		// alice doesn't have any skipped messages, so she has only one chain â€“ current
		assert_eq!(alice.receive_chain.len(), 1);

		// decrypt bob's skipped message and ensure he only has on (current) chain left
		_ = bob.decrypt(&a1);
		assert_eq!(bob.receive_chain.len(), 1);
	}

	#[test]
	fn test_fail_when_skipped_too_many_keys() {
		let mut alice = alice_session();
		let a0 = alice.encrypt(b"hi 0", Type::Chat);
		let mut valid_messages: Vec<AxolotlMac> = (1..chain::MAX_KEYS_TO_SKIP + 1)
				.into_iter()
				.map(|ctr| alice.encrypt(format!("skipped {}", ctr).as_bytes(), Type::Chat)).collect();
		let last_valid = valid_messages.pop().unwrap();
		// this generates a message with a large counter
		let invalid_msg = alice.encrypt(b"invalid", Type::Chat);
		let mut bob = bob_session(&a0.body().key_exchange.as_ref().unwrap());

		// the very first message decrypts just fine for it has a small ctr
		assert_eq!(bob.decrypt(&a0).unwrap(), b"hi 0");
		assert_eq!(bob.decrypt(&invalid_msg).err(), Some(Error::TooManyKeySkipped));
		// this last valid one decrypts just fine
		assert_eq!(bob.decrypt(&last_valid).unwrap(), format!("skipped {}", chain::MAX_KEYS_TO_SKIP).as_bytes());
		// as well as this one, since we've just freed one slot to store
		assert_eq!(bob.decrypt(&invalid_msg).unwrap(), b"invalid");

		// and the process goes endlessly
		for ctr in 0..10 {
			// when there's one last message that can be decrypted
			let valid = alice.encrypt(format!("skipped {}", ctr).as_bytes(), Type::Chat);
			// while the next one fails
			let invalid = alice.encrypt(format!("failing {}", ctr).as_bytes(), Type::Chat);
			
			assert_eq!(bob.decrypt(&invalid).err(), Some(Error::TooManyKeySkipped));
			// until there's a slot to process a skipped key
			assert_eq!(bob.decrypt(&valid).unwrap(), format!("skipped {}", ctr).as_bytes());
			assert_eq!(bob.decrypt(&invalid).unwrap(), format!("failing {}", ctr).as_bytes());
		}

		// but then, we can decrypt all those pending messages
		valid_messages.iter().enumerate().for_each(|(i, msg)| {
			assert_eq!(bob.decrypt(&msg).unwrap(), format!("skipped {}", i + 1).as_bytes());
		});

		// and encrypt/decrypt new messages within this same chain
		let a1 = alice.encrypt(b"a1", Type::Chat);
		let a2 = alice.encrypt(b"a2", Type::Chat);
		let a3 = alice.encrypt(b"a3", Type::Chat);

		assert_eq!(bob.receive_chain.len(), 1);
		assert_eq!(bob.decrypt(&a1).unwrap(), b"a1");
		assert_eq!(bob.decrypt(&a2).unwrap(), b"a2");
		assert_eq!(bob.decrypt(&a3).unwrap(), b"a3");
	}

	#[test]
	fn test_invalid_mac() {
		let mut alice = alice_session();
		let a0 = alice.encrypt(b"a0", Type::Chat);
		let mut bob = bob_session(&a0.body().key_exchange.as_ref().unwrap());

		// the first one decrypts fine
		assert_eq!(bob.decrypt(&a0).unwrap(), b"a0");
		let mut a1 = alice.encrypt(b"a1", Type::Chat);
		a1.set_mac(hmac::digest(&hmac::Key::new([42u8; 32]), b"fake message"));

		assert_eq!(bob.decrypt(&a1).err(), Some(Error::WrongMac));
	}
}

mod serialize {
	#[derive(Debug, PartialEq)]
	pub enum Error {
		NoId,
		NoRole,
		BadRole,
		NoCounter,
		NoPrevCounter,
		NoRatchetCounter,
		BadMyKyberIdentity,
		BadMyRatchet,
		BadMyKyberRatchet,
		BadTheirRatchet,
		NoTheirRatchetKyber,
		BadTheirKyberRatchet,
		BadKeyExchange,
		BadRootKey,
		NoRootKey,
		BadSendChainKey,
		BadReceiveChain,
		BadFormat,
		NoReceiveOnly
	}

	impl TryFrom<u32> for Role {
		type Error = Error;

		fn try_from(value: u32) -> Result<Self, Self::Error> {
			match value {
				0 => Ok(Self::Alice),
				1 => Ok(Self::Bob),
				_ => Err(Error::BadRole)
			}
		}
	}

	use crate::{serializable::{Serializable, Deserializable}, proto, kyber::{KeyPairKyber, PublicKeyKyber}, x448::{KeyPairX448, PublicKeyX448}, key_exchange::KeyExchange, root_key::RootKey, chain_key::ChainKey, receive_chain::ReceiveChain};
	use super::{Session, Role};
	use prost::Message;

	impl From<&Session> for proto::SessionState {
		fn from(src: &Session) -> Self {
			Self {
				id: Some(src.id),
				role: Some(src.role as u32),
				their_identity: None,
				root_key: Some(src.root_key.as_bytes().to_vec()),
				send_chain_key: src.send_chain_key.as_ref().map(|k| k.into()),
				receive_chain: (&src.receive_chain).into(),
				my_ratchet: src.my_ratchet.as_ref().map(|r| r.serialize()),
				their_ratchet: src.their_ratchet.as_ref().map(|r| r.as_bytes().to_vec()),
				ratchet_flag: None,
				counter: Some(src.counter),
				prev_counter: Some(src.prev_counter),
				key_exchange: src.unacked_key_exchange.as_ref().map(|kex| kex.into()),
				alice_base_key: None,
				my_ratchet_kyber_key: src.my_kyber_ratchet.as_ref().map(|r| r.serialize()),
				their_ratchet_kyber_key: Some(src.their_ratchet_kyber.as_bytes().to_vec()),
				ratchet_counter: Some(src.ratchet_counter),
				my_kyber_identity: src.my_kyber_identity.as_ref().map(|i| i.serialize()),
				failed: Some(false),
				receive_only: Some(src.receive_only)
			}
		}
	}

	impl Serializable for Session {
		fn serialize(&self) -> Vec<u8> {
			proto::SessionState::from(self).encode_to_vec()
		}
	}

	impl TryFrom<proto::SessionState> for Session {
    type Error = Error;

    fn try_from(value: proto::SessionState) -> Result<Self, Self::Error> {
			Ok(Self {
				id: value.id.ok_or(Error::NoId)?,
				role: value.role.map_or(Err(Error::NoRole), |r| Role::try_from(r))?,
				receive_only: value.receive_only.ok_or(Error::NoReceiveOnly)?,
				counter: value.counter.ok_or(Error::NoCounter)?,
				prev_counter: value.prev_counter.ok_or(Error::NoPrevCounter)?,
				ratchet_counter: value.ratchet_counter.ok_or(Error::NoRatchetCounter)?,
				my_kyber_identity: value.my_kyber_identity.map_or(Ok(None), |i| Ok(Some(KeyPairKyber::deserialize(&i).or(Err(Error::BadMyKyberIdentity))?)))?,
				my_ratchet: value.my_ratchet.map_or(Ok(None), |r| Ok(Some(KeyPairX448::deserialize(&r).or(Err(Error::BadMyRatchet))?)))?,
				my_kyber_ratchet: value.my_ratchet_kyber_key.map_or(Ok(None), |i| Ok(Some(KeyPairKyber::deserialize(&i).or(Err(Error::BadMyKyberRatchet))?)))?,
				their_ratchet: value.their_ratchet.map_or(Ok(None), |r| Ok(Some(PublicKeyX448::try_from(r).or(Err(Error::BadTheirRatchet))?)))?,
				their_ratchet_kyber: PublicKeyKyber::try_from(value.their_ratchet_kyber_key.ok_or(Error::NoTheirRatchetKyber)?).or(Err(Error::BadTheirKyberRatchet))?,
				unacked_key_exchange: value.key_exchange.map_or(Ok(None), |kex| Ok(Some(KeyExchange::try_from(kex).or(Err(Error::BadKeyExchange))?)))?,
				root_key: RootKey::try_from(value.root_key.ok_or(Error::NoRootKey)?).or(Err(Error::BadRootKey))?,
				send_chain_key: value.send_chain_key.map_or(Ok(None), |k| Ok(Some(ChainKey::try_from(k).or(Err(Error::BadSendChainKey))?)))?,
				receive_chain: ReceiveChain::try_from(value.receive_chain).or(Err(Error::BadReceiveChain))?
			})
    }
}

	impl Deserializable for Session {
		type Error = Error;

		fn deserialize(buf: &[u8]) -> Result<Self, Self::Error> where Self: Sized {
			Self::try_from(proto::SessionState::decode(buf).or(Err(Error::BadFormat))?)
		}
	}

	#[cfg(test)]
	mod tests {
    use crate::{serializable::{Serializable, Deserializable}, session::Session};

		#[test]
		fn test_serialize_deserialize() {
			let session = super::super::tests::alice_session();
			let serialized = session.serialize();
			let deserialized = Session::deserialize(&serialized);

			assert_eq!(Ok(session), deserialized);
		}
	}
}