use std::borrow::Borrow;
use crate::{key_exchange::KeyExchange, ntru::NtruEncryptedKey, x448::PublicKeyX448, serializable::{Serializable, Deserializable}, proto};

// MessageType
#[derive(Clone, Copy, PartialEq, Debug)]
pub enum Type {
	Chat, InterDevice
}

#[derive(PartialEq, Debug)]
pub enum Error {
	BadFormat,
	NoCounter,
	NoPrevCounter,
	NoCiphertext,
	NoMessageType,
	UnknownType,
	BadEphemeralKeyFormat,
	BadNtruEncryptedKeyFormat,
	BadKeyExchange,
	NoRatchetKeySupplied
}

impl From<Type> for i32 {
	fn from(t: Type) -> Self {
		match t {
			Type::Chat => 0,
			Type::InterDevice => 1
		}
	}
}

impl TryFrom<i32> for Type {
	type Error = Error;

	fn try_from(value: i32) -> Result<Self, Self::Error> {
		use Type::{Chat, InterDevice};

		match value {
			0 => Ok(Chat),
			1 => Ok(InterDevice),
			_ => Err(Error::UnknownType)
		}
	}
}

// TODO: introduce getter & setters?
#[derive(Clone)]
pub struct Message {
	pub counter: u32,
	pub prev_counter: u32,
	// TODO: introduce RatchetMode { raw, ntru_encrypted }?
	pub ratchet_key: Option<PublicKeyX448>,
	pub ntru_encrypted_ratchet_key: Option<NtruEncryptedKey>,
	pub ciphertext: Vec<u8>,
	pub key_exchange: Option<KeyExchange>,
	pub _type: Type,
}

impl Message {
	pub fn new(t: Type) -> Self {
		Self {
			counter: 0,
			prev_counter: 0,
			ratchet_key: None,
			ntru_encrypted_ratchet_key: None,
			ciphertext: vec![],
			key_exchange: None,
			_type: t 
		}
	}
}

impl From<&Message> for proto::CryptoMessage {
	fn from(src: &Message) -> Self {
		Self {
			ephemeral_key: src.ratchet_key.as_ref().map(|k| k.as_bytes().to_vec()),
			ntru_encrypted_ephemeral_key: src.ntru_encrypted_ratchet_key.as_ref().map(|k| k.into()),
			counter: Some(src.counter),
			previous_counter: Some(src.prev_counter),
			ciphertext: Some(src.ciphertext.clone()),
			key_exchange: src.key_exchange.as_ref().map(|kex| kex.into()),
			message_type: Some(i32::from(src._type))
		}
	}
}

impl Serializable for Message {
	fn serialize(&self) -> Vec<u8> {
		use prost::Message;

		proto::CryptoMessage::from(self).encode_to_vec()
	}
}

impl TryFrom<proto::CryptoMessage> for Message {
	type Error = Error;

	fn try_from(msg: proto::CryptoMessage) -> Result<Self, Self::Error> {
		// either ratchet or ntru_encrypted_ratchet
		let mut ratchet_key: Option<PublicKeyX448> = None;
		let mut ntru_encrypted_ratchet_key: Option<NtruEncryptedKey> = None;

		if let Some(key) = msg.ephemeral_key {
			ratchet_key = Some(PublicKeyX448::try_from(key).or(Err(Error::BadEphemeralKeyFormat))?);
		} else if let Some(key) = msg.ntru_encrypted_ephemeral_key {
			ntru_encrypted_ratchet_key = Some(NtruEncryptedKey::try_from(key).or(Err(Error::BadNtruEncryptedKeyFormat))?);
		} else {
			return Err(Error::NoRatchetKeySupplied)
		}

		Ok(Self {
			counter: msg.counter.ok_or(Error::NoCounter)?, // REVIEW: how about 0?
			prev_counter: msg.previous_counter.ok_or(Error::NoPrevCounter)?, // REVIEW: how about 0?
			ratchet_key,
			ntru_encrypted_ratchet_key,
			ciphertext: msg.ciphertext.ok_or(Error::NoCiphertext)?,
			key_exchange: msg.key_exchange.map_or(Ok(None), |kex| Ok(Some(KeyExchange::try_from(kex).or(Err(Error::BadKeyExchange))?)))?,
			_type: Type::try_from(msg.message_type.ok_or(Error::NoMessageType)?)?
		})
	}
}

impl Deserializable for Message {
	type Error = Error;

	fn deserialize(buf: &[u8]) -> Result<Self, Self::Error> {
		use prost::Message;

		Self::try_from(proto::CryptoMessage::decode(buf).or(Err(Error::BadFormat))?)
	}
}

impl Message {
	// set_ephemeral_key
	pub fn set_ratchet_key(&mut self, key: PublicKeyX448) {
		self.ratchet_key = Some(key);
	}

	pub fn ratchet_key(&self) -> Option<&PublicKeyX448> {
		self.ratchet_key.borrow().as_ref()
	}

	// set_allocated_ntru_encrypted_ephemeral_key
	// TODO: combine with set_ratchet via an enum?
	pub fn set_ntru_encrypted_ratchet_key(&mut self, key: NtruEncryptedKey) {
		self.ntru_encrypted_ratchet_key = Some(key);
	}

	pub fn ntru_encrypted_ratchet_key(&self) -> Option<&NtruEncryptedKey> {
		self.ntru_encrypted_ratchet_key.borrow().as_ref()
	}

	pub fn set_counter(&mut self, ctr: u32) {
		self.counter = ctr;
	}

	pub fn counter(&self) -> u32 {
		self.counter
	}

	pub fn set_prev_counter(&mut self, ctr: u32) {
		self.prev_counter = ctr;
	}

	pub fn prev_counter(&self) -> u32 {
		self.prev_counter
	}

	pub fn set_type(&mut self, t: Type) {
		self._type = t;
	}

	pub fn set_key_exchange(&mut self, kex: Option<KeyExchange>) {
		self.key_exchange = kex;
	}

	pub fn ciphertext(&self) -> &[u8] {
		&self.ciphertext
	}

	pub fn set_ciphertext(&mut self, ct: &[u8]) {
		self.ciphertext = ct.to_vec();
	}
}

#[cfg(test)]
mod tests {
	use crate::{serializable::{Serializable, Deserializable}, x448::KeyPairX448, ntru::{KeyPairNtru, self}, key_exchange::KeyExchange, ed448::KeyPairEd448};
	use super::{Type, Error, Message};

	#[test]
	fn test_message_serialize_deserialize() {
		let eph_kp = KeyPairX448::generate();
		let mut msg = Message::new(Type::Chat);
		let ct = b"123";
		let ntru = KeyPairNtru::generate();
		let encrypting_ntru = KeyPairNtru::generate();
		let ntru_encrypted_eph = ntru::encrypt_ephemeral(eph_kp.public_key(), ntru.public_key(), ntru::EncryptionMode::Once { key: encrypting_ntru.public_key() });
		let ed_identity = KeyPairEd448::generate();
		let kex = KeyExchange {
			x448_identity: KeyPairX448::generate().public_key().clone(),
			ntru_encrypted_ephemeral: ntru_encrypted_eph,
			ntru_identity: ntru.public_key().clone(),
			ed448_identity: ed_identity.public_key().clone(),
			signed_prekey_id: 123,
			x448_prekey_id: 456 
		};

		msg.set_counter(3);
		msg.set_prev_counter(18);
		msg.set_ratchet_key(eph_kp.public_key().clone());
		msg.set_ciphertext(ct);
		msg.set_key_exchange(Some(kex.clone()));

		let serialized = msg.serialize();
		let deserialized = Message::deserialize(&serialized).unwrap();

		assert_eq!(deserialized.counter, 3);
		assert_eq!(deserialized.prev_counter, 18);
		assert_eq!(deserialized._type, Type::Chat);
		assert_eq!(deserialized.ciphertext(), ct);
		assert!(deserialized.ntru_encrypted_ratchet_key().is_none());
		assert_eq!(deserialized.ratchet_key().unwrap().as_bytes(), eph_kp.public_key().as_bytes());
		assert_eq!(deserialized.key_exchange.unwrap().x448_prekey_id, kex.x448_prekey_id);
	}

	#[test]
	fn test_deserialize_with_ntru_encrypted_ephemeral_specified() {
		let kp = KeyPairX448::generate();
		let ntru = KeyPairNtru::generate();
		let encrypting_ntru = KeyPairNtru::generate();
		let ntru_encrypted = ntru::encrypt_ephemeral(kp.public_key(), ntru.public_key(), ntru::EncryptionMode::Once { key: encrypting_ntru.public_key() });
		let mut msg = Message::new(Type::InterDevice);
		let ct = b"123";

		msg.set_counter(3);
		msg.set_prev_counter(18);
		msg.set_ntru_encrypted_ratchet_key(ntru_encrypted.clone());
		msg.set_ciphertext(ct);

		let serialized = msg.serialize();
		let deserialized = Message::deserialize(&serialized).unwrap();

		assert_eq!(deserialized.counter, 3);
		assert_eq!(deserialized.prev_counter, 18);
		assert_eq!(deserialized._type, Type::InterDevice);
		assert_eq!(deserialized.ciphertext(), ct);
		assert!(deserialized.ratchet_key().is_none());
		assert_eq!(deserialized.ntru_encrypted_ratchet_key().unwrap().key_id, ntru_encrypted.key_id);
	}

	#[test]
	fn test_deserialize_no_ephemeral_key_specified() {
		let mut msg = Message::new(Type::InterDevice);
		let ct = b"123";

		msg.set_counter(3);
		msg.set_prev_counter(18);
		msg.set_ciphertext(ct);

		let serialized = msg.serialize();
		let deserialized = Message::deserialize(&serialized);

		assert_eq!(deserialized.err(), Some(Error::NoRatchetKeySupplied));
	}

	#[test]
	fn test_decode_from_encoded_by_android() {
		// Currently, this decodes properly, but decryption fails when verifying hmac
		// On the other hand, all the propertirs are restored just fine and if hmac verificatin is disabled, the bundle decrypts
		// Hence, the difference is in encoding format itself where the new one produces a shorter output = different hmac
		// It is more likely being caused by some legacy fields, eg a brief review points to some 32 extra bytes in the KeyExchange object which is 25519 public key
		let encoded = b"\x10\x00\x18\x00\x22\x40\xb9\x32\x35\xdf\x54\x81\x8a\x22\xa8\x2f\x97\x34\xaa\xdf\x9f\x80\x5c\x70\xf1\x92\x52\x3a\xde\x36\x5c\x69\x03\x54\xb5\xe9\x70\xf2\xb4\x0e\x01\x0a\x6f\x08\x73\x2a\xfe\xb8\x85\x28\xc1\x5c\xb2\x07\x1e\x8d\x81\x59\x3a\x4b\x8c\xab\x07\x52\x17\x42\x76\x77\xc8\xa2\x2a\xb6\x22\x09\x9a\x51\xcd\x97\xe2\xae\xc1\xd2\x12\x38\x89\x31\x15\xd5\x2b\xb3\xab\x92\xe6\x99\xe7\xe0\x56\x9e\xd7\x06\x6a\x4f\xbf\x8b\x61\xef\x7c\xf6\x6d\xa0\x92\xe8\x6a\xa1\x31\x68\x2a\x30\x6c\x65\xa4\xf1\x8f\x23\xf2\xbd\x01\x7d\x9f\x95\x0a\x55\x63\xf4\xce\x62\x07\x17\x6d\xff\x22\xfb\x18\x09\x4a\xb9\x3b\x59\xc1\x39\xc0\xd3\x10\x01\x1a\xed\x18\x09\x74\x3f\x8f\x8d\xa5\x55\x1d\xa2\x12\xfe\x07\x21\xfe\x1a\x81\xf8\xe1\x41\x57\xab\x00\x78\xbd\x50\x64\xea\xbb\x09\x04\x2b\xe2\x87\x33\x53\x48\x90\x2b\x93\xfa\xf1\x3b\xf4\x2d\xa4\xdf\x18\x08\x97\x3c\xf3\x7f\x4f\xeb\x40\x0b\x09\x3d\x2a\x91\x0a\xc3\x91\x5b\x68\xad\x07\x2f\x87\x49\xdf\x4f\xaa\x2f\xf3\xa7\x87\xf7\xa3\xf9\x15\xec\xdc\x39\xb9\x1a\x79\x55\x19\x20\xba\x56\xf1\x89\x9e\x67\x48\x96\xee\xdd\x2a\x0a\xf4\x94\xac\xc9\xfd\xdd\xb2\x70\x8f\x89\x7b\x68\x3c\xab\x28\xe6\x16\xcd\xd8\x59\xd0\xbf\x47\x36\x87\x04\x96\x6d\x5c\x85\xab\xa9\x0d\x5c\x1b\xb1\x57\x15\x1d\xea\x68\xee\x7d\xc2\xb4\x3c\x37\x29\x7e\x22\x36\x0c\xd7\xbf\x76\xd6\x2c\xbc\x6b\xf1\x94\x57\x4b\x72\x18\x7e\x99\xf2\x61\x1b\x70\x7e\xbc\xae\xa4\xc3\x28\x08\xc3\x5a\x6a\x3e\x86\x94\xa6\x36\xfa\xd4\x21\xb1\xb8\xa2\x6d\x07\x3c\x20\x92\x96\x7f\xef\xad\x81\xcc\xb1\x04\x04\xec\xc8\x0b\x8b\xe7\x9d\x53\xaa\x46\x81\x65\x88\xd3\x8a\xd8\xda\x1c\x58\x55\xed\x2f\xd6\x9d\x79\x20\x5d\x9e\xa1\x9e\x2c\xd3\x2d\x91\xba\x5b\xd8\xf5\x47\x92\x7f\xe5\xe9\x05\x2c\xee\x9f\x15\x8f\x38\xc8\x17\x17\x6e\x2e\x69\xbb\xc9\xdb\xd2\xe1\x91\x1c\x16\x23\x32\xa3\x8a\x54\x44\x47\x64\x6d\xcc\xbf\x46\x30\xb6\x90\xbb\x5f\x6c\xef\x67\x23\xe5\x29\xb3\xb8\xb5\xf0\x11\xbb\x36\x58\xf1\x0d\xea\x63\xc7\xfe\x53\x92\xcc\xa0\x3f\x67\xb2\x2f\x33\x63\x59\xbc\x38\xd4\xe5\xe3\x34\xea\xfb\x6a\xcd\xfb\x32\x3e\x82\x48\x89\x3c\x58\x65\xfd\x13\x31\x85\xec\xff\xfd\x6e\x3b\x15\x7a\xc5\xc3\x1d\x8c\x76\xe4\x80\x48\xfb\xf5\x4b\xf7\x40\xcc\xe8\x37\x40\x48\x52\xe7\x17\x10\x90\x3d\x52\xf1\xc0\x60\xcd\xfd\x03\x34\x23\x3c\xa2\xf0\xf8\xcb\xd0\xb9\x14\xf3\x04\xf5\x3a\x05\x30\xee\x2d\x0c\xf7\x89\x8d\x5d\x89\xf2\xfa\x79\x0d\x2a\xab\xb9\x3d\x60\x7d\x9d\x14\x0b\xc2\x1c\xcd\x88\x35\x66\x13\x91\x10\xf6\xe1\x9d\xa0\x25\xac\x3d\x39\x0b\xe4\xb6\x81\x79\x8c\x8f\x15\x79\xe6\xeb\xee\x15\x05\x67\x6c\x34\x1a\xaf\x4c\x50\xec\xa9\xc8\x62\xe7\xac\x06\xe2\x32\xeb\xe0\x93\x96\xcc\xf5\x71\x59\xd2\x43\xef\xc0\xe3\x00\x2e\x8b\x04\xe4\x1c\x8c\xba\xf7\x50\xf7\xff\xbf\x2c\xbb\xc0\x5a\x4d\x83\xb3\x0d\xf6\xa8\x3b\x2f\xab\x65\xc0\xbc\x99\x94\xad\x23\xd6\xd1\xdf\x78\x2b\x1f\xdf\xa6\xfc\x97\x5d\x81\x13\x78\xce\xd7\xa5\xd4\x75\x7f\xf5\x55\x19\xa3\x95\xc6\x55\x6c\x83\x67\x60\x75\x8a\x9c\xcc\x05\x98\x0b\x53\x17\x5a\xcc\x4c\x74\xa3\x8c\x68\x9c\xb3\xe3\xf3\x9f\x6b\xaf\xa6\xa6\x9f\x6f\x95\xc3\xe3\x78\x5f\xcc\x4d\x8e\x8d\x5b\x74\x65\xff\x82\x1d\xa1\x0f\xe2\x59\xdd\xed\x5c\x2c\xdf\x60\x1c\xde\x7c\x59\x0f\xd0\x23\xad\x00\x2c\xda\x2c\x67\x18\x4e\xe7\x1d\x06\xa6\xca\xb9\x58\x77\x96\x2f\x00\xfe\x0c\x3e\xd5\x6c\xfa\x19\x3c\xe0\xc5\x9c\x3f\x16\x94\x85\x1c\x10\x58\xee\x30\xe5\x0a\x4e\x8a\xb1\xa2\x9d\x1e\x4e\x9c\xfd\xdc\x40\xd2\xda\x45\x24\x5c\x70\xdb\x91\x84\x85\x90\x55\x08\x12\x31\xca\xa7\x33\x22\xd1\xb9\xb4\x91\xcd\xcd\x93\xfe\x2f\x50\x88\x6c\xad\x64\x61\x43\x75\x0c\x6c\xf4\xab\x0d\x3b\x1c\xa5\xb4\x77\xd8\xae\x1e\xd9\x9b\x36\x53\x05\x4b\xbe\x4f\xf7\xd3\xfe\x6f\x91\x87\xe1\xd5\xcd\xec\x4b\xf2\x20\x59\x4b\x86\x32\xc6\x48\xd7\x36\xbb\x73\x89\x56\xa8\x57\xdd\xb0\x71\x8d\xbd\x6e\x44\x07\x6b\x99\x82\x47\x02\x22\x35\x57\xd8\x6a\x12\xf2\x5c\x0c\xf2\xa7\x9d\x5d\x28\x3e\xcf\x2e\x61\xc6\xad\x0b\x5d\xc4\x88\x4d\x33\x69\x9e\xae\x61\x3a\x70\x8b\x82\x3a\xb0\x22\x30\x1f\x3d\xca\x3e\x36\x4e\xd9\xe9\x97\x2e\x4c\xeb\xde\xcb\xc1\x24\xfb\x2f\xf1\xcd\x1d\x11\xb0\x1e\x0c\x70\xd2\x7a\xb0\xce\xcc\x6a\x87\xfa\x46\xae\xc2\x73\x10\x5e\x16\x09\xed\xae\x3c\xd3\x30\x8c\xfb\x52\x30\x31\xbf\x62\xbf\xa5\x43\xe6\xa1\x73\x91\xc3\x10\xe5\x8e\xfe\x16\x06\xe9\x56\x17\x4d\xf9\x89\xe4\x27\xf9\xa5\x1a\xc0\x66\x54\x3e\x3c\xd6\xd4\x47\x03\xe1\x33\x3c\x1c\x9e\xa6\x66\xbd\x9b\xf4\x9e\x14\x4b\x1e\xb2\x65\x66\xa1\xa9\xbe\xf4\x3a\xde\xa7\xde\xd5\xad\x44\x13\xb7\x27\xe1\xef\x6d\xc6\x89\x1b\x9a\xa5\x99\x3b\xdd\xbc\x40\x39\x16\x89\xf6\x94\x0a\xce\x89\xe5\xa2\x02\xb0\x80\xa0\x64\xcc\xe1\xc7\x9b\xa9\x42\x17\xd8\x58\xa2\xf2\xa0\x2a\x77\x14\x96\x55\x2a\x82\x39\x06\xc6\x8c\x09\x85\x9e\x30\x3f\x3f\x13\x1e\x82\x56\x98\x88\xce\x1d\x20\x45\xa0\x3f\x2d\xde\x77\x72\xb4\x6e\x6e\x36\xb1\x33\x4e\xcd\xca\x41\xe0\x3d\x15\x1b\x9c\xf7\x94\xae\x74\xb3\xe6\x0e\xb8\xe6\xc8\x38\x7a\x9c\xee\xa3\x40\xa8\x52\x85\x75\x48\x1e\x07\x71\x6d\xfe\x95\x85\x60\x9f\x5e\x05\xd7\xa8\xee\xf3\xbf\x9d\x0a\x68\x1a\xe0\x10\xa0\xc0\xb0\xf9\x33\x2d\xb9\x69\x82\x49\xd3\x4a\xba\x6d\xac\x9d\x90\x5b\xc8\xe2\x9a\x95\x84\xd1\x98\xcc\x90\x45\x9e\x8c\xfd\x89\x16\x7b\xb9\xd7\x19\x68\x30\xe2\xcd\x95\x62\x4c\xdf\x35\x46\xcc\xd1\x91\xf4\x4c\xbf\x02\xa9\x67\xe9\xb8\xf6\x40\xe9\xb7\x41\xc1\x22\x07\xda\x58\x48\xd5\x63\xc8\xa6\x29\xc8\x15\x34\x8b\x3b\xbf\x1a\x37\x47\xd6\xd2\xf9\xbb\xa3\x08\x47\x0e\x38\x2d\x96\xae\x81\x83\xa1\x07\xfc\x6f\x98\xe6\x4d\x92\x04\x32\x61\x90\xaa\xb5\xd7\xf2\xbf\x56\x11\x38\xf6\x4c\xcc\x8c\x87\xa3\xa1\x53\x1f\xec\xd8\xc7\x67\xed\xaf\xb5\x99\xec\xb0\xa9\x1d\x04\x35\xef\x78\x21\xda\xbe\x60\x0b\x84\x53\x78\x7f\x86\xc1\xcb\x2b\xb9\xd5\x2f\xbd\x1a\x10\x7a\xd3\xa2\x49\xa4\x57\xf3\xfd\x4f\x87\xe5\x64\x69\x49\x9a\x83\x6a\x28\x89\xf9\xab\xf8\xe2\x8e\xf4\x96\x7c\xed\xac\xa2\x8c\x44\x04\x6c\xce\x20\x5f\x88\x88\x6e\x17\x56\xa8\xf2\xa7\x98\xa0\x1a\x1b\x8f\xb4\x94\x57\x75\x45\x46\x10\x73\xa3\xa2\xe4\x95\xd1\x63\xd2\xf6\x09\x76\x11\x6b\xb8\xd6\x34\x2b\xb0\x78\x6a\x00\x38\x72\x48\x7c\x44\x24\xa1\x64\x69\x2a\xff\x60\x3d\xe5\xc9\x47\xc0\xd1\x26\x72\x03\x4e\xa4\xe2\xc1\xc4\xfe\x85\x0b\xa9\x64\xf7\x7b\x60\x50\x1c\xa8\xf8\xc8\x31\x17\x79\xe9\x2a\x4b\x2b\xd0\xc1\xdb\x1d\xb6\x3b\x44\xbf\xaf\x85\x01\x9d\xd9\xb1\x3d\x54\xa9\xb2\x6a\x33\x33\xbb\x0f\xd3\x07\x53\x6d\x97\x24\x54\xcd\x3d\x3d\x52\x60\xd5\x32\x49\xa2\xdf\x17\x77\x16\x6e\x59\x21\x2a\x53\x02\xde\x40\x7b\xce\x07\xf4\x09\x3e\xf7\x12\xb9\x3f\x1e\xfd\xd9\xfe\xd9\xb6\x3b\xe1\x9c\xbc\xad\xae\xbc\xbf\x00\xd1\x3a\xf3\xa8\x40\xad\x35\x8f\x21\x12\xd5\xa3\xfb\xbd\xf1\x04\xd5\x41\xc5\x71\xb6\x96\xf4\xff\x74\x93\x74\x3b\xea\x74\x8e\xf0\x55\x71\x3a\xb2\xab\x11\xd6\x83\xf9\x3a\x29\x45\xe2\x78\x0a\x3c\x76\xa9\x40\xc1\xa1\xda\x35\x8b\x7b\x54\x99\xb5\xba\x4a\x94\xa4\x3e\x1e\x52\xc6\x19\x78\xb6\x0e\xd3\xd5\x27\x95\x27\x2e\x22\x6b\x60\x0a\x3f\x02\x76\xa4\x66\x84\xd2\xfc\x5f\xeb\xd9\x6e\x01\xf4\x18\xc3\x8a\x2c\xb0\xd0\x72\xd7\x1b\x2b\xba\xae\x91\x02\xdc\xc3\x32\xec\xbf\xd7\xed\xfe\x71\xa5\xe2\x2e\xef\x7d\x2c\x78\x30\x91\xd2\x22\xef\xb9\x1a\x42\x5c\x6f\xc8\x4e\x23\x42\xdf\x59\x90\xec\x7f\x6e\xd2\xe6\xf5\xb1\x46\x14\x5e\x68\x05\x86\xe0\x8e\x9a\x67\xe4\x45\xf0\x3f\xef\x41\x93\x66\x46\x53\x9e\xea\x42\x7d\xb7\x75\x99\x6f\x48\x8a\xeb\xd6\x27\xfc\x31\xfb\x4e\x84\x17\xe5\x03\x49\xf7\xe3\x16\x89\x26\x54\xf8\x51\x72\xa5\xb7\x1c\x17\x81\x13\x0d\x13\x2e\xf4\xbc\xb6\x3a\x92\xc1\xaf\xcd\x32\x4f\x98\x75\x28\xfd\x0b\x16\xfe\x84\x73\x50\x8d\xaf\xd9\xab\xed\xd6\x94\x59\xaa\x25\xdf\xa2\x69\x82\xaf\xb1\x76\xb1\x87\x54\x22\x8a\x95\x2e\x6c\xa8\x9f\x95\x73\x89\x20\xca\xc6\x2d\x79\x01\xe8\x50\xf5\xd4\x66\xfb\xca\x1f\x58\x86\x51\x28\x89\xff\x94\x06\x2d\x5d\xb8\x9e\x9e\x7b\xb6\xe6\xe8\x89\x68\x14\x90\x97\x0a\xb5\xa5\xea\x8c\xeb\x63\x72\xc7\xb5\x1e\xd9\xad\xbf\xf8\x44\xc5\xad\x68\x3c\x33\xcc\x34\x89\x40\x47\x6b\xf6\x48\x2e\x93\x4a\xed\x6f\x01\x7e\xa4\x2b\xb0\xbe\x4b\x3a\x73\x6c\x62\x0a\x91\xa9\xf2\x63\x20\x2b\xe8\xda\x35\xe0\x77\x66\xde\x2d\x4a\x1b\x6f\xe9\x53\xd4\x56\x07\xd2\x43\xcb\xe0\x0d\xb9\xe4\xf4\x13\x2a\x42\x32\x12\x3b\xef\x50\x94\xed\x23\xc9\x6f\xd0\xc8\x24\x6c\x6e\x8e\xc9\xe9\x9a\x2d\xb4\x68\x2d\x4b\xe0\xba\x2c\x31\x8b\x09\xa5\x55\x5c\xc5\xa2\x40\x51\xc4\xbb\x4e\xa0\xd9\x8a\xeb\xec\xe3\xc9\xff\xa4\x68\x3e\x56\x99\xcc\x30\x39\x96\xf9\x67\x18\xb5\xe6\x8d\xa2\xed\xe7\xcb\x22\xed\xab\x9a\x7a\x0b\x21\x8b\xce\xe1\x3a\x80\xb4\x95\xe8\x77\xe4\x1d\x21\x0d\x54\x67\x77\x0e\xa3\x95\x88\x65\xa4\xd8\x4d\x1f\x25\x79\x82\x08\x80\x4f\xe3\x16\x3f\xa0\xcf\x38\x09\x27\xef\x40\x5e\x08\x30\x6e\x3e\xed\x2b\xd6\x90\xcf\xa2\xd1\x4d\xff\x40\x94\x5a\xe1\x41\xdd\xb8\x06\x08\x49\x03\xf6\x7b\x37\xc5\x72\x4c\x55\x07\x9c\x26\xed\x7f\x9c\x3b\xb0\x13\xdb\xd5\x00\x14\xb6\x25\x14\xb1\x29\xf3\x6f\x12\x0e\xb5\xa6\xf1\xf7\x17\x01\x5d\x4d\x95\xb9\xec\xa4\xe8\x0e\xac\x95\x52\x52\xc0\x9f\xd8\xc9\x3d\xc1\x52\xaf\xa0\xc8\xa0\x4a\x06\x77\xcf\x7b\x31\x4e\xad\xbf\x0d\x25\xe3\x4b\x5f\x2f\x81\x85\xae\xcb\xae\x5d\xc0\x5a\xdf\x99\x62\x7a\x15\xe4\xe3\xfc\x2c\x76\xf1\x0b\x74\xc2\x3f\x21\xf5\xa2\x78\x7a\x49\xc5\xe0\x87\x64\x5f\xa6\xc9\xcd\x97\x1a\x39\x00\x84\x63\x1c\x63\x0b\x8d\xc4\x39\x3f\xc6\xe6\xf8\x7c\x85\xd4\x6e\x99\x83\x79\x18\x9c\xa9\x91\x76\x8a\x10\x1a\xf0\xe8\xf1\x4c\x30\xdb\xbc\x48\x57\xde\x83\x52\x04\xcc\x75\x70\x08\x0e\x70\x4d\x1e\x20\x96\x6d\xc3\xa7\xc5\xc7\x38\x2e\xf7\xc1\x86\x8f\xfe\xca\x46\xcb\x79\x85\xea\x7a\x4b\xcb\x14\x5c\xef\x79\x32\xdc\x34\x32\xfc\xfe\x63\xf4\xdd\x04\xfb\xd6\x6b\x29\x73\x74\xc6\xdb\x92\x30\x78\xc6\xa0\xd3\x9a\xaa\x42\xcf\xd3\x51\xc3\xa9\xe0\x44\x32\x93\xf5\x89\x6e\x78\xcf\x2b\x2a\x7a\xb9\xde\xaa\x73\xc0\x4f\xb8\xec\x86\x8e\x16\x3c\x52\x7e\xe0\x20\xe8\xee\xbd\x73\xaa\x8a\x85\x9b\x1d\x7e\x4a\x06\x60\x2d\x29\x3c\x50\x8e\x96\x34\xaf\xfc\x4e\xd9\x3a\x6e\x4a\x70\xb9\x58\xf5\x0a\x08\x1c\x2f\x2d\x02\x1f\x75\x92\x18\x99\x0e\x29\xf4\x04\x26\x40\xea\xcf\xbc\x21\x56\x01\x24\x7b\x9d\x8e\x1b\x85\xcd\x5d\xdb\x1f\xda\x12\x5d\x63\x69\xce\x4a\x11\xe6\x77\xf5\xd1\xfc\x3e\x06\x9d\xea\xc6\xef\xfb\x61\xde\xa3\x08\x15\xab\x7b\x55\xfe\x4e\x70\x74\xda\x0e\xeb\x1b\xde\x2e\x48\xc7\x56\x16\x36\xde\x95\x2a\x03\xf1\x72\x2e\x2f\x2c\xcc\x1f\xa5\x53\x9f\xba\x00\xa7\xe3\x29\xe1\x10\x2f\x89\xad\x49\xf3\x1a\x11\xe9\xb3\xee\x90\x57\xe5\x48\xf2\x59\x6b\xa4\x14\x40\xdb\x84\xd4\x4b\xd9\x5e\x3f\xd7\x24\xfe\xf6\x65\xb7\x73\x69\x84\x2d\xcf\x8a\xe9\xcd\xc7\x73\x17\x01\x7f\xef\x9d\x0e\x35\x72\xc0\xa7\x8f\xb9\x64\x54\x87\x8b\xea\x88\xef\x98\xac\xf1\x22\x7f\xa1\x6c\x28\x1d\x67\x1b\xd1\x49\xd0\xb9\x43\xe7\x66\x83\x68\x80\x83\x9f\x08\xae\x62\x7f\x7c\x1b\x4a\x7c\x30\xd8\xef\x50\x70\x16\xd3\x23\x63\x33\x36\xd2\xa6\xa0\x46\x63\xca\x36\x5c\x16\xbd\xad\x30\x20\xa6\xdd\x32\x73\x71\x2b\xe3\x0d\x77\x2b\x1f\x5b\x1e\x4e\xf7\x76\x2d\x42\xdb\x84\xb3\x49\x89\x97\x18\x25\x9e\x37\x95\x8f\xcf\x44\xe9\x15\x56\x5e\x1c\x57\xd0\x7d\x13\x84\xd6\x8a\x8f\x89\xd9\x2a\x14\x53\x42\x26\xfa\x98\xee\xa1\x28\x54\x7f\x89\xeb\x8b\x6c\x82\xc5\x23\x31\x0d\x9f\x7b\x72\xea\xdb\xd8\xe2\x6d\x12\xe3\x17\xee\xf4\x33\x3f\x01\xd6\x3a\x7b\x7f\xe5\x65\x25\xbf\x30\x04\x33\xf4\x6a\x79\x4f\x3d\x6e\xc4\x8b\x77\x65\x53\x7f\xce\xce\xba\x08\xaa\x31\xab\x79\x66\xab\xab\xd4\x98\x02\xd7\x15\xae\xaa\xcc\x84\x96\xca\x02\xe1\x76\x2c\x36\x40\xa2\x4d\xc5\x55\xd4\x36\x58\xfd\x8d\x5f\xc2\xdf\xcf\xe7\x35\x38\x46\xb7\xb8\x37\x98\xf4\xfb\xa8\xc4\x96\xd1\x72\x53\xe0\x0d\x4b\x53\x6d\xd7\x3b\xf7\xc6\x7a\x78\xc8\x21\x40\xd0\x34\xfb\x8a\xb3\x70\xe9\x00\x42\x9c\x79\xf1\x2e\x40\xaf\x04\xc4\xd1\xad\xee\xed\x1b\x67\x7e\x06\xe1\x7a\x2b\x2c\x04\xa6\x21\xbf\x36\xf0\x55\x13\xe2\x4f\x01\x78\x4a\xa2\x6d\x03\x80\x34\x94\x96\xef\xaf\x7a\x95\x42\xca\x4c\x95\x43\xa8\x57\x5c\x7e\x02\x5a\xdc\x40\xb4\x3d\xcd\x1e\x0e\x6b\x07\x19\x35\xf5\xf2\x70\x85\x46\x4e\x5a\x07\x4d\x58\xb7\xce\xdd\x59\xf9\x9d\xca\xdc\xcb\x49\x87\x1c\xb0\x34\x9b\x3d\x24\x17\x1c\x66\x48\xbc\x90\xc3\x96\x08\x18\x7f\x3e\x60\x9e\x81\x37\xdb\x60\xc7\x0a\xcc\x55\x6d\x2d\x50\x50\xdb\x3e\xff\x88\x9a\x0a\x95\xa5\x05\x8d\x59\x84\xaa\xb5\x86\xf2\x2f\x51\x37\xd7\x5f\x70\xb2\x78\x60\x7f\x91\x87\x03\x75\x4b\x01\xb4\xf9\x49\xd4\x6d\xd3\x6b\x1c\x59\xf1\x44\x5e\xf5\xeb\x28\xa1\xd2\xf4\xb2\xb0\xae\x25\x70\xf0\x58\x6f\x6b\xca\x56\x42\x5e\xac\xa2\x3e\x4d\x05\xe8\x49\x72\x63\xac\x1a\x71\x29\xc5\xf1\xfc\xc2\x3b\x11\xbe\x36\x8f\x37\x36\xe7\x54\xda\xae\x8c\x40\xe3\x99\xcf\x6e\x07\xa7\xfe\x8a\x4b\x7a\x96\xe9\xa8\x65\x7e\xc5\x5c\xb8\x68\x53\xe6\xc7\xb6\x1f\x08\xb3\xd0\x20\xad\xa1\x05\xb9\xa7\xcc\x58\xb8\xf4\xb8\x1c\x28\x81\x9e\x33\x0d\x23\xd1\xc6\x2c\xd1\x8b\x2c\xed\xed\x3e\xae\x3b\xe1\x93\xf7\xc4\xe6\xea\xb8\xfa\x99\xce\x73\x76\xa6\x1e\x55\x5d\xb1\x23\x70\xdf\xb8\xd6\x71\x10\x41\xad\xed\xfe\xa8\x8e\x85\xea\x64\x73\x5b\x27\x29\x00\x27\x03\x87\xd9\x37\xc4\xfa\x95\x36\x86\x52\x6e\xf2\x87\x28\xe9\x0b\x51\x9e\x03\xe6\x40\x79\x3a\x6f\x58\x81\x38\xad\xe2\xdc\xd0\x24\x4f\x56\x2a\x6b\x66\xdb\x46\x50\x36\x3d\xc3\x12\xc5\x34\x48\x8d\x14\x3f\xa6\xdd\xa4\xa7\x93\x88\x65\x61\x7d\x86\x58\xd7\x0f\xaa\x19\x5d\x01\xa8\xc7\x7c\x53\xc4\x92\x86\xfd\x47\x57\x19\x40\xee\xa1\xa5\x0c\x40\x0e\x94\x3e\xa4\x54\xbe\x0e\xa8\xe3\x56\x3e\x51\xc2\x26\x23\xdc\x13\xa9\xc7\xc2\x36\x6c\x45\xa4\xf7\x7a\x5d\x58\xb2\x25\xad\xba\x68\x72\xff\x24\x41\xd4\x0a\x8a\x52\xcd\xcd\x1d\x8c\x38\x27\x02\xa9\x95\x31\x78\xbb\x24\x5a\x42\x3a\x97\x9d\x62\x7a\x44\x07\xec\xa8\x09\x50\xba\x23\x81\x06\xd2\x74\xfa\x69\x70\x26\x58\x0c\xc4\x05\xa1\xf2\x65\x70\xa8\x14\x71\xf8\xbb\xcc\x08\xf2\x52\x3e\x57\x4d\xee\xbe\x14\x58\xf4\x26\x91\x4c\x6a\x29\x39\x57\xb3\xf6\x69\x93\xfa\x91\x90\x9d\x40\x35\xb3\x32\xc6\x4c\x8f\xea\xb8\x48\x00\x51\x5c\x59\xf3\x43\x32\x85\x3b\xd8\x26\x13\x8d\x43\xc9\x66\x8f\x97\x6c\x62\x42\x07\x1b\x01\xb9\x5b\x3b\x97\x65\x12\xb8\x4b\xb3\xcb\x65\xb9\x66\x48\x0a\x76\x51\xd8\x6c\x0e\xb9\x5d\x55\xb8\x87\x7b\x8f\x21\x2c\xf7\x0c\xcd\x9e\x7e\x54\x31\x38\x01\x46\x91\xd0\x5e\x06\xa5\x9a\x2a\x20\x60\xc5\xc8\xd1\xac\x9d\x1a\x69\x5d\x6b\x21\x92\xf6\x88\x74\xf3\xb5\x7e\xaf\x2d\x43\x96\xea\x8c\x12\xbd\xe1\x06\xf8\xfb\xde\x72\x32\x83\x08\x01\x03\x00\x06\x10\x02\x81\x0d\x39\x57\xa9\x78\x30\xfe\x82\xd2\x26\x4c\xde\xd6\x9c\x7c\xbd\xb6\x52\xd8\xf5\xa7\xe9\xfb\x82\x63\x37\x36\x36\xa2\x36\x01\x99\x16\xd8\xf2\x72\xe0\x8e\x8e\x30\x35\xc7\xb4\x10\x63\x2e\x0c\xa6\x6e\x6f\xec\x8c\xbe\xdf\x2c\xa1\x3f\x21\xfa\x1c\x7b\x66\x69\x1f\x82\x54\xae\xde\x72\xe7\xa5\xe8\x9d\xd0\xac\xa9\xa3\x17\x64\x51\xc3\x32\x3b\x30\xed\xa3\x3b\x1e\xb0\xba\xa3\x3f\x9c\x6d\xe8\xe4\x2c\x54\xaa\x2e\x2c\x65\xd1\xcd\x74\x0a\xf9\x66\x12\xd5\x78\x2b\x82\x4e\xbf\x11\x44\x50\x9c\xc1\x67\x0f\xfe\x7c\x12\x4f\xa7\xee\x1a\x63\x25\x7c\x2d\xc2\xf8\xdc\xe0\xbf\x5d\x18\xf0\xba\x78\x6a\x50\xc7\x05\x34\x5a\xf0\xca\x4f\xfd\x53\x45\xf4\x1d\x39\x1a\xfa\x97\x8c\x4f\xe8\x7b\x64\xce\x0d\xba\x7a\x9e\xc4\xbe\x86\xbd\x18\x7b\x6c\x18\xea\x55\x0a\x30\x6f\x08\x97\x34\x00\x02\xb6\x5e\xe0\xce\x5a\xd5\xcb\x15\x3b\x59\xc2\x1f\x19\xb4\x9e\x7c\xad\x28\x30\xf5\xa5\x8a\x07\x6c\x1d\xa0\x88\x00\x53\x8c\xb5\x58\x17\x6d\xdd\x11\x6c\x90\xaf\x9e\x2c\x82\xa2\x69\x1a\x2c\x59\xb0\xcf\x55\x6b\x20\xb5\x31\xcb\x3b\x9d\x3b\x33\x69\x4e\x9d\x6a\x26\x70\x4a\x9f\x80\xa7\xb6\xbc\xbc\xe9\x25\x3b\xd2\x83\x4c\x45\x4d\xbf\xfe\xaf\x13\x38\x29\xe4\x12\x1f\x03\x0c\xba\xe5\x01\xe8\x57\xc7\xb3\x69\x1b\x39\x72\xb0\x29\x59\x0a\x6c\xbe\xe6\x91\x14\x5f\xe8\xc0\xa5\xfc\x3c\x7c\xa3\x29\xb2\x48\x5b\xb7\xda\x5d\xbf\x7e\xb2\xab\xbe\xe9\xd3\x27\x7d\xcc\x0d\x48\x58\x25\x6f\x54\x4e\x5c\xfe\x4f\xb8\xda\xbd\x81\x3a\xf8\x3f\x89\xc1\xd0\x1e\x02\xc2\x29\x1c\x73\x54\xdb\xd5\x61\x5d\xea\xc5\x6a\xdb\x08\xad\x98\xe6\x56\xfa\xa7\x2e\x1e\xfb\xf9\x57\x3f\xe4\xb9\x7d\x02\x90\x3f\x4c\x08\x7c\xb3\x89\x4d\x20\x51\x75\x1c\x58\x46\x0b\x58\xbc\x08\xa1\xd1\x9b\xab\x91\x94\x1b\x38\xe7\xb0\xa8\xce\x27\x16\x96\xec\xa2\xd9\xb2\x47\xa9\x44\xbd\xa2\x77\x8c\x93\x83\x80\xfa\x53\x39\x9e\x68\x38\x65\xff\xe0\x88\x7b\x51\x67\x4d\xe7\x98\xdf\xba\x7f\xe7\xc4\xfd\x01\x26\x1a\xc7\x71\x6c\xc8\x48\x67\x84\x38\x14\xd2\x9b\x6b\x9a\x46\x97\xee\xd4\x59\x9c\x6d\x51\xc5\xbf\x3d\x56\xfa\x6a\x7d\xfb\xe7\x32\x26\x45\xd0\x04\xf8\x90\x8b\x21\xe3\x7b\xa6\x23\xb3\xb1\x85\xbf\xc6\x56\x92\x9d\x54\xc7\xd7\x82\x91\x18\x8d\x91\x01\x3a\x7d\x32\xab\x53\x04\x09\xb1\xe6\xb6\xf6\x96\xae\x52\x7a\x3e\x35\xeb\xeb\x99\xd2\xe6\x4a\x8a\x4d\xde\xdc\x7e\x48\x72\x83\x2b\xb3\x23\xd8\x35\x2f\xbf\x37\xcd\xfb\x9a\xe9\x09\xba\x20\xb0\x54\x79\x29\xa2\x64\xc0\x23\xb2\x5a\xd2\x6f\xd0\xd3\x48\xd8\x7c\xc0\x6e\x75\x40\x0e\x9e\xa8\xbc\x61\x4f\x6c\x51\x37\x0a\xc9\x36\xa2\xd0\x21\x44\x7f\x1e\x2b\x2c\xe9\x17\xbf\x53\x79\x92\x57\xfb\x62\x8c\x9a\x56\xdb\x12\xc9\x6b\x6f\x29\x5d\x3a\x19\xb8\xf9\x90\x2c\x7f\x0c\x4f\x55\x51\x43\xc8\x48\x1a\x78\x77\x6c\xa8\xe2\x26\x7f\xb4\x6b\xe0\x37\x33\x3b\x87\x9f\xc2\x1e\xbd\xa6\x8a\xc5\xb0\x74\x73\x88\x58\xb7\xea\x3a\xfc\x7c\x78\x53\xa2\x78\xb7\x93\x05\xb2\x23\x7c\xe2\xc0\xae\xae\x93\x2c\xe8\x98\x53\x0b\x63\x1b\xdb\x80\xa4\xac\x10\x8e\xdf\x02\xce\x05\x4c\xd7\xd2\x71\x5c\x6b\xf7\xf9\x85\xa4\x06\x04\xfb\x35\x79\x89\x08\x5d\xf9\x3a\xe9\x7e\x46\x9f\x11\x5e\x01\x11\x5d\x81\x8e\xfc\x18\xbc\xd2\x5e\x1c\xeb\xb0\x4c\xf7\x43\x41\x61\x41\xda\x4b\xf3\x3a\xbe\x02\xd6\xe2\x3e\x86\x47\xc5\x32\x5f\x32\x2d\xe1\x93\x19\x8c\xcd\x32\xde\xc4\x9d\xbd\x0b\x24\x59\xd6\xa3\x8d\x36\x64\xb0\x72\x37\x8b\xdd\xf6\x33\x92\xfd\x6e\xaf\xff\xce\xe0\xad\xff\xd7\x47\x5c\x0c\x8d\xbf\x3a\x83\x46\xa6\xe5\x15\x82\x53\x88\xb0\x28\x49\xd6\x40\xc9\x33\x8f\x0d\x31\x0a\xc6\xc6\x44\x01\xa7\xfb\x9b\xd2\x24\x39\xdf\x8f\x2c\x40\x30\x3e\x75\x39\xbe\xd4\xe1\xaa\xf6\x01\x24\x9b\x04\x05\x0b\x05\xf0\x06\x3d\xc6\xad\xd4\x35\xa7\xec\x85\xfa\x9e\x5c\xa2\x58\x48\xb9\xcf\x42\x97\xff\xd2\xbe\x2e\x33\xa7\x72\x3c\x67\x32\x03\xd1\x57\xf4\x14\x96\xd2\x5f\x06\x91\x96\x12\x52\xea\x84\x39\xdf\x5f\x97\xf9\x25\x22\x7d\xf5\x6c\x45\xc1\x41\xb2\x5f\xe9\x93\x23\x5c\xb7\xa1\x6f\x97\x44\x38\x51\xa7\x2e\xfb\x05\xb1\xb9\xaf\x2e\xa0\x59\x78\x73\xf3\x92\xc8\x39\x15\xbd\x75\x5f\xcf\xd4\x74\xd6\x61\x78\x6b\x6d\x99\x48\xf6\x15\x5f\x51\x1a\xc8\xb0\x4c\x1c\x23\xec\xcd\x49\xe6\xac\xbb\xb0\xc6\xf2\x1e\xcc\xa6\x6b\xf0\x20\xdc\xf8\xab\x8c\xfb\x16\x1b\x52\x72\xc8\x77\xdb\xbb\x4c\x0a\xae\xdd\x19\x29\x5f\x73\xe2\xc2\xc4\xd1\xa9\x97\x1e\xb7\xce\x8b\xf8\xda\x08\xfb\xda\x98\xeb\x04\x64\xfc\x8d\x88\x4c\x6b\x5f\x27\xd4\x64\xf8\x3a\x39\xbf\x03\x18\x56\x0f\xbd\x0c\xd9\xf2\x47\xe1\x38\x69\xb3\x27\x5e\xef\x1c\x65\x3e\xc0\x3a\x6d\xcd\xa4\x2c\xf2\xdc\xb0\x06\x93\xc3\x80\x26\xdb\x54\x8e\xf0\xc7\x60\xcc\x6a\xb6\x7f\x7c\x0d\x32\xeb\x13\x89\x94\x7b\xb5\xfe\x3b\x8e\x00\x41\x2c\x49\x74\x04\xc6\xaa\x7c\x22\x49\x8a\x44\x68\x96\xc5\x47\xaa\x52\x32\xeb\x10\x09\x04\x72\x86\x6f\x9d\xf7\xdf\xe9\x10\x00\x1a\xdd\x10\x09\x7c\x51\xf5\x4b\x24\x0e\xc9\xd3\x12\xfe\x07\xb2\x71\x5c\xa8\x16\x85\x84\x07\xf9\xcc\x71\xdc\xe7\xf7\xa5\xf9\xa6\x54\x45\xd0\x4a\x92\x14\x5a\xf1\xb2\xd7\x40\x08\x62\xf8\x1f\x90\xfa\x58\xdc\x2b\xc8\x59\x0e\x20\xc8\x60\x9f\x5e\x3f\x76\x3a\xb9\x25\x1b\x5c\x33\x14\xa1\x13\x90\x65\x12\x3e\x09\xb7\xb8\x36\xf9\x76\x7e\xf0\x53\xa0\xf4\x44\x82\xa6\x6e\xb5\x46\x3b\x5c\x02\x8d\x60\x85\x02\x0c\x5a\x50\x28\xe1\xb7\xbf\x14\x90\x83\x25\xa3\xb5\x2e\xdd\xf4\x65\xc4\xa9\xdb\xe4\x4d\x82\x7f\x34\x21\x4a\xad\xc9\x1a\x14\x20\xba\x6d\xfc\x95\xb7\x87\x57\x3d\xdd\xe8\xe2\x2e\x4c\x76\xf9\xa2\xe6\x5a\x36\xa2\x37\xf9\xc5\x61\x10\x0d\xf8\xff\x71\x8f\x21\xcf\x6b\x50\x06\x17\x57\x9c\x3e\xba\x3b\xe0\xb4\xb2\x18\xbe\x5d\xb8\x05\x9f\x16\x3c\xf8\xa4\x52\xd1\x0a\x73\x95\x07\xd8\x11\x1f\xd9\x3e\x45\xb1\x93\x98\x4c\xae\x82\x49\xb4\xc1\xbc\x5d\x41\x9e\x41\xc5\x0c\x26\x74\x48\x63\xca\xd4\xb3\x6e\x4e\x0e\xbd\x64\x90\x87\xd8\x22\x78\xc5\x71\x80\xba\xec\x9f\xda\x85\x2f\x77\x94\xa2\x38\x10\x37\xfa\x2b\xd0\x12\x0d\xaa\x65\xb1\x0d\x03\xb1\xe1\xab\xc6\x4a\x3e\x42\xea\xdb\xf6\xcb\xdf\x10\xc1\x2f\xb1\x74\x5b\x9f\xde\x12\x04\xf4\x73\xa9\x82\x73\x4f\xfb\x73\x4f\xae\x77\x2c\xf3\x60\x42\x39\xe2\x19\x8c\x6d\x64\xd5\x80\xef\x88\xdc\x9d\xa8\x06\x07\xa7\x0b\x55\x83\x24\xd7\xa5\xfe\xc5\x2e\x2f\x16\xed\x9e\x23\xf0\x2f\x00\x74\x24\xd0\x25\x16\x74\x30\xe1\xa5\x23\xad\xc6\xad\xc1\x84\xe9\x1a\x24\x01\x08\x43\xed\x3d\x54\x93\x87\x4c\x73\x58\xaf\xa6\xbd\x71\xeb\x1a\x3a\xce\x9b\xa3\xbc\x9c\x90\x9c\xab\xa2\x18\x57\x77\xfb\xcc\x60\x14\x9b\x34\xcf\xfa\x88\x98\xbc\x0b\xcb\x1a\x3f\xd5\x59\xad\x3f\x33\x68\x01\x9a\x36\x6b\x7d\xb5\xeb\x55\xb0\x76\x3c\xfd\xc4\x82\xcf\x79\x7e\x89\x26\x44\xa2\xd7\xec\xf5\x98\x0b\x68\x14\x21\xcc\x7d\x34\x6d\x94\x5f\x06\x79\xb7\x50\x91\x44\xea\x40\x7a\xaa\xda\x3b\xec\x81\xf1\xaa\x16\x35\x4c\xae\x2d\x38\x45\x6a\xd8\xaa\xe6\x20\x21\xc8\x23\xfa\xd7\x7f\xc8\xf1\x24\xaf\xc9\xe8\x8f\x36\xeb\x9d\x8d\xa7\x00\xd0\xac\x8f\x8f\xa3\x1d\x3e\x0d\xca\x7c\x0d\xfd\x27\x81\xc9\xd6\xef\x06\x26\x6d\x66\x7c\xdb\x2b\xba\xdf\xf8\x2e\xc8\x6f\xb7\x04\xc7\x50\xde\x93\xb4\x19\x86\x7b\xb5\x1e\x23\xa3\xd3\xc8\x7b\x4c\x5f\xa1\xef\x0b\x0a\x7c\x5d\xc9\xa6\x1a\x74\xe7\xea\xd0\xf4\xb0\xb8\x4d\x32\x0c\xef\x83\xa9\x04\x1a\x24\xa4\x47\xea\xf1\x38\x68\xfa\x29\x62\xfc\x85\x62\xdb\x9f\x12\x3b\xd5\xaf\x5b\x8e\x5a\x60\xb7\x0c\x4e\x8e\xb0\x74\x8f\x49\x83\x4f\x1a\xa6\xf4\x24\x87\x63\xcd\xf7\x20\xe1\x55\xbd\xa1\x30\xd3\x88\x77\xf3\xa7\xaf\xb5\xc0\xfd\xfa\x26\x34\x7f\x9f\x8f\x21\x99\x84\xd1\xee\x58\x1c\x65\xfb\x86\x12\xd8\xdb\xcc\x16\xa8\xfc\xd6\x6b\x4f\xf9\xab\xab\x21\x51\xeb\xb4\x9f\xd4\xbf\xe9\x8c\xd5\xde\x8f\x2c\x95\x98\x78\x3f\x87\x80\xac\x43\x6d\xc9\xa7\xbe\x77\x2d\x69\x37\x15\x83\xa4\xd0\xd2\xba\x22\x2c\x66\x43\x91\xa8\x27\xb1\xa6\x60\x7d\x1f\xdc\xe6\x48\x02\xa8\x95\xe5\xf1\x3a\xbd\xef\x50\xec\x12\xd5\xd1\x76\x91\x34\x8b\x2e\x2f\x7a\x7a\xd8\xe1\x83\x30\x16\x3f\x8f\x2e\x50\x95\x20\x27\x58\x01\x3b\xc1\xfa\x0a\x22\xc8\xe4\x5e\xc9\xdf\x7b\xfd\xae\x1b\x50\xb1\x67\x6b\x20\x1c\xb9\xea\x40\xa6\xe6\x8f\x7c\x6c\xcc\x6a\x4a\xbb\xab\xba\x46\x57\xfd\x8c\xfc\x25\xca\x98\xfe\xb5\xe0\x95\x2a\x4e\x6e\x07\xb3\x23\xd8\x58\xe4\x1a\x41\x91\xba\x39\x97\xa6\xa8\x1f\xa1\x6f\x31\xef\x96\x30\x92\xe4\x04\x93\x32\xd3\x82\x58\x69\x91\x08\xa3\x91\x3c\xd8\xf3\x01\x6d\xce\x38\xd8\x19\x36\xf5\xdf\x8d\x07\x35\x5a\x37\x22\x85\xb2\x5f\xaf\xa8\x51\x04\x76\x75\x2f\x71\x62\xbb\xf0\x18\x6f\x4c\xa9\x46\xb6\x30\xb9\x70\xe6\x8d\x37\x06\xcb\xc7\xce\xd5\x7e\xeb\x81\xf6\xc9\x27\xc2\xec\x3a\x6f\xf4\xc8\xf3\x1e\xe2\xdb\x0d\x88\x48\x6d\x52\xd7\x62\x29\x28\x4e\x57\x42\xbe\x8a\x9f\x99\x50\x96\x7a\x32\x9a\xd6\xa9\xc8\x50\x61\x03\x6d\x8b\xdd\x0c\x45\x51\xbd\x0e\xf2\xef\xd2\xa6\xeb\x27\x40\x03\xf3\xb9\xa0\x2f\x5d\xe2\xd5\x25\x71\x9e\xd0\x1c\x7f\xb3\x52\xce\x46\xc0\xe2\x56\xe3\xf6\x29\x20\x66\x6c\x16\xc7\x33\x97\xc9\x9c\x6d\x5e\xcd\x93\x0b\x84\x6e\xcd\x02\xc2\xb4\x2b\xf1\xba\x21\x2a\x4b\x32\x74\x85\x38\x51\xdf\x7f\xb0\x88\x9a\xed\x67\x58\xdc\xbf\xff\xea\x96\x66\x64\x34\xdc\x0d\x95\xf7\x5e\xe5\x34\x67\xbb\x4e\xf1\xc8\xd4\x4e\x0e\xf4\xe3\x68\x95\xeb\xd9\x0b\x18\x44\xb2\xca\xfd\x11\xa8\xc5\x5b\xc6\x30\x13\x53\x8c\x0f\x0d\x91\x84\x61\xcc\xc9\x3e\x50\xfc\xe8\x63\xc7\xed\xf0\xab\x42\x45\x44\x31\x70\x1a\xd0\x08\x8b\xfe\x10\x84\xc7\xcb\xda\x23\x67\x87\xc0\xda\xf9\x97\x17\x35\xb1\xad\x9c\xbc\x2c\x21\x50\x74\xd1\x76\x23\xa4\x2e\xe4\x34\xfc\x64\x13\xf6\x14\x90\xeb\x8b\x25\x29\x53\x0b\x9d\xb9\x7e\x3f\x97\xfc\x63\xa4\xc4\x0f\x30\x3f\xb5\xd6\x38\xda\xa0\x81\x26\xcc\x7b\x06\x46\xd2\x8e\x76\xe4\x11\xe1\x95\x91\x89\x9b\xa1\x95\x42\x21\x84\x76\xde\xbb\x5c\x65\xa7\xe6\x1f\x1d\x8f\x7d\xe6\xfa\x73\x82\x45\x79\x1b\x66\x1d\x4d\x81\x94\xae\xf8\x30\x81\x0f\xed\xab\xcc\xdf\xac\x2c\x4b\xb7\x89\x73\x55\x17\xd9\x6d\x0c\x61\x81\xba\xb7\xed\xe0\xad\x88\xf7\xbe\xdf\x57\x00\x6d\x4b\xe2\x09\x77\x31\xb0\x7d\x27\xfc\x54\xe3\x13\xd5\x20\x33\xb4\x6a\x91\x12\x81\xb4\x9e\xec\x54\x7f\x8e\x94\xc8\xb3\xf8\x82\xac\xd5\xb5\x94\x84\x8c\x76\xc0\x1b\xde\xbf\xbc\x73\x20\x3b\x89\xe5\x84\x2c\x26\xdb\x34\x9c\xef\xf7\x57\x4d\x4a\x59\x33\x15\x3a\x71\x59\x55\x9b\x63\xb5\x63\x15\x69\x0a\x81\x25\x8c\x29\x0c\xf2\x60\xb8\x15\xec\xac\x1f\x11\x78\xee\x23\xf3\x04\x7a\xfc\xed\x05\x77\xbe\x76\xd4\xd4\xfc\x2f\x04\x35\xc2\x7a\x9f\xf6\x46\xd4\x0f\xdc\x3e\xe5\x33\x61\x69\xbc\x10\x85\x4c\xa4\x06\x95\x88\xd1\x14\x40\x1d\x8d\x4a\xd5\x55\x3a\x40\x3a\xf8\xf9\x74\xc3\x17\x88\x43\x5c\x37\x8e\x7b\xff\xe2\x00\xa8\xff\xb4\x42\xc7\xa9\x4b\xe0\x16\x8c\x74\x6d\x78\xbc\x71\xcc\x39\x77\x7b\x27\x12\xb0\x4a\xf7\x3f\xe2\xf8\x72\xa1\xc2\x7d\xf8\xa8\x11\x0c\xfe\x74\xfd\xbc\x7e\x58\x1a\x57\xab\x65\xee\x02\x57\x1f\x69\x6a\x2b\xa6\x96\xa1\x70\x92\xda\xcf\xb6\x28\x50\x86\x65\x53\x7c\x98\x9a\x53\x20\x92\x49\x31\x82\x73\xe3\x17\xae\xf1\xee\xfc\xb8\x15\x4d\x0e\xf8\x54\x52\x23\x3c\x8d\x37\xde\x70\x11\x6c\x99\x20\x8f\x65\x45\xa9\x73\x80\x18\x7e\x50\xbf\xc1\x92\x2e\x96\x78\xec\x16\x4a\x71\xbd\xf1\x78\x11\xaf\x20\x4d\xfd\xdd\x78\x13\x41\x50\x40\x48\xe3\x53\x79\xe7\xe1\xdf\x84\x3b\xb2\xed\xca\x2f\x66\xc3\x87\x38\x51\xfe\x37\xcf\x63\xa7\x96\x19\x93\xe5\x00\xd1\x3a\xd1\xe2\x00\x53\x40\x8e\x11\x3b\x4d\x32\xb3\xe7\x78\x7f\xf1\x96\x18\xd9\xbf\xc4\xc7\x38\x97\xee\xbd\xa9\x05\xea\xf5\xa9\x7a\x71\xc8\xee\x39\x84\xc1\x27\xba\x7b\xe5\xdf\x9f\xf3\x6b\x6c\x3d\x9c\x55\xd0\xb2\x31\x1d\xf7\x3f\xf4\x04\x22\xed\xd4\x80\x32\xc3\xe7\xbe\x16\x3d\x87\x4c\x4d\x35\x42\xac\xc8\x59\x71\x50\x52\xf6\xa8\x8c\x36\xf1\xcf\x88\xc0\xb6\x13\x12\x8a\x1d\x38\xa3\xa6\x1e\xbc\x03\x6a\xdd\x50\x61\x2d\x3b\x4f\xea\xc4\x10\xe5\x25\x5b\x31\xc6\x9d\x2b\x71\xc4\xc3\xcf\x84\x77\x79\x8f\x17\x18\xf6\x23\xe1\x85\x98\x87\x0d\x76\x77\x76\xe5\x5d\x53\x14\x5a\x97\x9b\xe5\xff\x91\x14\x68\xe4\xcb\xb3\xa1\x8b\x23\xf8\x0f\xeb\x41\x5a\x37\xf3\xa0\x5e\x72\xb1\x3d\xcb\xbf\xb2\x19\x47\xe5\xaa\x84\xce\x75\x29\xda\xbd\x89\x21\x5d\x0a\xe7\x09\x94\x7e\x36\xc2\x44\xf3\xdb\x06\xc6\x6a\x49\xf0\xcf\x46\xc8\x41\xfc\xa8\xee\x2d\x5a\x74\x91\xae\xeb\xec\x99\x71\xb4\xc4\x77\x78\x11\x48\xa2\x8d\x3a\xd8\xb3\x5e\x1d\xfb\x83\x3f\x9d\xd4\x2d\x6a\x42\x80\x4f\x58\x3b\xe9\x1c\x3e\xf8\xd4\xfc\x5f\xaa\x06\xb7\x25\xe4\xaf\xa5\x5d\x61\x70\xae\x7d\x73\x40\x93\x1f\x09\xaa\x00\xd3\x28\xd1\x11\x71\xbf\x05\x95\xbd\x17\xa8\xac\xb6\x8c\x7b\xa5\x16\x27\x5c\x5d\xd9\xc2\xa8\x64\x14\x24\x69\x35\xa8\x80\x5d\x5a\xaa\xaa\xaa\xcd\xee\xd4\x6a\x79\xdb\x64\xc3\x91\x07\xed\x1a\xe3\xf9\x78\xfd\xc0\x5f\xf9\x34\xea\x34\x4e\xd6\x72\x5c\x63\xf0\xf3\x82\xa2\x47\xee\x96\xaa\xf8\xac\x4b\x61\x65\xc3\xd0\x73\x64\x68\x18\x09\x51\x85\x9c\x9d\x34\xbb\x36\xae\xd4\x80\xa0\xe6\xcb\xaf\xe6\xc6\x06\x82\xa7\x0c\xf9\xca\x36\x60\x8b\x01\x44\x53\x60\xa0\x0e\xc7\xff\x3d\x97\xa1\x74\xca\x13\xa1\x9e\x8b\x8b\xad\x03\x36\x40\x21\x09\x39\xc7\xbc\x18\xe0\x92\xe7\x0e\xe4\x27\xcd\x36\x5f\xcc\xa2\x5d\xdb\x2e\x18\x56\xb9\x2a\x8b\x97\x0e\xe3\xf0\xd7\xa7\xed\xd5\x1a\xe2\xd8\xee\xed\x7f\x97\x44\x34\x7a\x8e\x86\x2d\x7d\xc2\x15\x73\x49\x4b\xc5\x4a\x60\xd3\x36\xa8\xb4\x16\x0d\xf8\xd9\x60\x43\x62\xce\x41\x68\xc9\x68\xa0\x86\xe4\x91\x75\x33\x47\x1e\x1f\x80\x11\x25\x44\x60\x98\xe2\xd0\xeb\x1c\x0c\x59\xa0\x5f\x9c\x09\x96\xb7\xa0\x61\xa9\x36\xf6\x9c\xd1\xb2\xb2\xac\x9f\xfd\x91\x99\x07\xf4\xaf\xaa\x1b\x40\xc7\x98\x73\xf3\xc5\x80\x3e\x0c\x57\xe1\xcd\x0e\x4e\x24\x42\x53\x57\x5c\x5f\xa8\xd5\xd1\xdc\x8c\xdf\x0c\x33\x2c\x08\x18\x47\x4f\xf2\x60\xe6\x31\x66\x6d\x4b\xbf\xd3\xa1\xcb\x11\x4d\x0a\x10\x94\x6a\x51\x36\xcf\x3d\xe9\x5b\x23\x2f\x9a\x4c\xeb\x66\xa6\x41\x34\x53\x92\x13\x79\xe0\x4a\x4f\x4b\xca\xb7\x15\x39\xd9\x55\x4c\x5f\xcc\xa6\xe3\x31\xe5\x5c\x14\x2f\x66\x3c\x5f\xa5\x32\x6d\x00\x28\x0b\x2d\xa2\xbe\x93\x2e\x48\x76\x3c\x1e\x18\x6e\xde\xaa\x3d\x65\x42\x56\xa0\x28\x51\x67\xa2\xb4\xfa\x6a\x06\x81\xf9\x20\xed\xcf\x47\x83\xdc\xdd\x28\x35\x13\x6d\x14\x78\xda\x3b\xce\x75\xa0\xff\x91\xc6\x38\x01";
		let msg = Message::deserialize(encoded).unwrap();

		assert_eq!(msg._type, Type::InterDevice);
		assert!(msg.ratchet_key.is_none());
		assert!(msg.ntru_encrypted_ratchet_key.is_some());
		assert!(msg.key_exchange.is_some());
	}

	#[test]
	fn test_message_type_to_i32() {
		assert_eq!(i32::from(Type::Chat), 0);
		assert_eq!(i32::from(Type::InterDevice), 1);
	}

	#[test]
	fn test_i32_to_type() {
		assert_eq!(Ok(Type::Chat), 0.try_into());
		assert_eq!(Ok(Type::InterDevice), 1.try_into());
		assert_eq!(Err(Error::UnknownType), Type::try_from(2));
		assert_eq!(Err(Error::UnknownType), Type::try_from(-1));
		assert_eq!(Err(Error::UnknownType), Type::try_from(i32::MAX));
	}
}